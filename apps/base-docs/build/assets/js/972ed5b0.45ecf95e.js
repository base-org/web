"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[5307],{30876:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),h=a,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||r;return t?o.createElement(m,i(i({ref:n},d),{},{components:t})):o.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},21861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(7896),a=(t(2784),t(30876));const r={title:"The `useAccount` Hook",description:"Learn how to access information about the connected user's wallet.",hide_table_of_contents:!1},i=void 0,s={unversionedId:"docs/reading-and-displaying-data/useAccount",id:"docs/reading-and-displaying-data/useAccount",title:"The `useAccount` Hook",description:"Learn how to access information about the connected user's wallet.",source:"@site/base-camp/docs/reading-and-displaying-data/useAccount.md",sourceDirName:"docs/reading-and-displaying-data",slug:"/docs/reading-and-displaying-data/useAccount",permalink:"/base-camp/docs/reading-and-displaying-data/useAccount",draft:!1,tags:[],version:"current",frontMatter:{title:"The `useAccount` Hook",description:"Learn how to access information about the connected user's wallet.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Building an Onchain App",permalink:"/base-camp/docs/frontend-setup/building-an-onchain-app"},next:{title:"The `useReadContract` Hook",permalink:"/base-camp/docs/reading-and-displaying-data/useReadContract"}},c={},l=[{value:"Objectives",id:"objectives",level:2},{value:"Displaying Connection Information",id:"displaying-connection-information",level:2},{value:"The <code>useAccount</code> Hook",id:"the-useaccount-hook",level:3},{value:"Connection Status Conditional Rendering",id:"connection-status-conditional-rendering",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:l},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://wagmi.sh/"},"wagmi")," is a library that provides React hooks that trade a somewhat complex setup process for a great developer experience when building a frontend around the constraints and quirks of onchain building. One of the hooks, ",(0,a.kt)("inlineCode",{parentName:"p"},"useAccount"),", provides access to information about your users' wallet and connection information."),(0,a.kt)("p",null,"You can use this for connection-status-based rendering, to enable or disable controls or views based on address, and many other useful tasks."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"objectives"},"Objectives"),(0,a.kt)("p",null,"By the end of this guide you should be able to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Implement the `useAccount`` hook to show the user's address, connection state, network, and balance"),(0,a.kt)("li",{parentName:"ul"},"Implement an ",(0,a.kt)("inlineCode",{parentName:"li"},"isMounted")," hook to prevent hydration errors")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"displaying-connection-information"},"Displaying Connection Information"),(0,a.kt)("p",null,"We'll be working from an app generated by RainbowKit's ",(0,a.kt)("a",{parentName:"p",href:"https://www.rainbowkit.com/docs/installation/"},"quick start"),". Either open the one you created when we were exploring ",(0,a.kt)("a",{parentName:"p",href:"../frontend-setup/wallet-connectors/"},"Wallet Connectors"),", or create a new one for this project."),(0,a.kt)("p",null,"Either way, change the list of chains to only include ",(0,a.kt)("inlineCode",{parentName:"p"},"baseSepolia")," as the network option. You don't want to accidentally spend real money while developing!"),(0,a.kt)("p",null,"You can set up your providers as described in ",(0,a.kt)("a",{parentName:"p",href:"https://docs.base.org/tutorials/intro-to-providers/"},"Introduction to Providers"),", or use the default from RainbowKit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const config = getDefaultConfig({\n  appName: 'RainbowKit App',\n  projectId: 'YOUR APP ID',\n  chains: [baseSepolia],\n  ssr: true,\n});\n")),(0,a.kt)("p",null,"Either way, be sure to set ",(0,a.kt)("inlineCode",{parentName:"p"},"ssr")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", or you will get a ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/messages/react-hydration-error"},"hydration error")," from Next.js."),(0,a.kt)("h3",{id:"the-useaccount-hook"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"useAccount")," Hook"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/hooks/useAccount"},(0,a.kt)("inlineCode",{parentName:"a"},"useAccount"))," hook allows you to access account and connection data from within any of your components."),(0,a.kt)("p",null,"Add a folder for ",(0,a.kt)("inlineCode",{parentName:"p"},"components")," and a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"ConnectionWindow.tsx")," in that folder. Add the below component to the file, and replace the boilerplate text in ",(0,a.kt)("inlineCode",{parentName:"p"},"index.tsx")," with an instance of it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// ConnectionWindow.tsx\nexport function ConnectionWindow() {\n  return (\n    <div>\n      <p>Connection Status</p>\n    </div>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// index.tsx\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nimport { ConnectionWindow } from '../components/ConnectionWindow';\n\nconst Home: NextPage = () => {\n  return (\n    <div className={styles.container}>\n      <main className={styles.main}>\n        <ConnectButton />\n        <ConnectionWindow />\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n")),(0,a.kt)("p",null,"For the purposes of this exercise, open ",(0,a.kt)("inlineCode",{parentName:"p"},"styles/Home.module.css")," and ",(0,a.kt)("strong",{parentName:"p"},"delete or comment out")," ",(0,a.kt)("inlineCode",{parentName:"p"},".main"),". Doing so will move the content to the top of the page, which will prevent the RainbowKit modal from blocking your ability to see changes."),(0,a.kt)("p",null,"Return to ",(0,a.kt)("inlineCode",{parentName:"p"},"ConnectionWindow.tsx")," and add the ",(0,a.kt)("inlineCode",{parentName:"p"},"useAccount")," hook to the top, where you'd add any state variables. The general pattern for wagmi hooks is you decompose the properties you want to use from a function call of the name of the hook. For some, you'll add a config object to that call, but it's not needed for this one."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useAccount } from 'wagmi';\n\nexport function ConnectionWindow() {\n  const { address, isConnected, isConnecting, isDisconnected } = useAccount();\n\n  return (\n    <div>\n      <h2>Connection Status</h2>\n    </div>\n  );\n}\n")),(0,a.kt)("p",null,"You can see all the deconstructable return options in the ",(0,a.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useAccount#return-type"},"UseAccountReturnType"),":"),(0,a.kt)("p",null,"Update your ",(0,a.kt)("inlineCode",{parentName:"p"},"<div>")," to show the address of the connected wallet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"<div>\n  <h2>Connection Status</h2>\n  <div>\n    <p>{'Address: ' + address}</p>\n  </div>\n</div>\n")),(0,a.kt)("p",null,"Test it out by connecting and disconnecting with your wallet. You should see your full address when you are connected, and the address will be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when you are disconnected."),(0,a.kt)("h3",{id:"connection-status-conditional-rendering"},"Connection Status Conditional Rendering"),(0,a.kt)("p",null,"It isn't very nice to display a value of ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," to the user, so let's use the connection status values for conditional rendering depending on if the user is disconnected, connected, or connecting."),(0,a.kt)("p",null,"A common pattern is to use the conditional directly in the html return of a component or render function. For example, we could add a line to show that we're connecting as demonstrated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<div>\n  <h2>Connection Information</h2>\n  <div>\n    {!isConnecting && <p>Please click Connect in your wallet...</p>}\n    <p>{"Address: " + address}</p>\n  </div>\n</div>\n')),(0,a.kt)("p",null,"Connect and disconnect your wallet a few times. The ",(0,a.kt)("inlineCode",{parentName:"p"},"isConnecting")," state is true while the ",(0,a.kt)("em",{parentName:"p"},"Connect to website")," wallet UI is open."),(0,a.kt)("p",null,"Autoconnect is enabled by default, so you'll need to clear the connection from your wallet settings to see this more than once. Otherwise, it will briefly flash as the autoconnect processes."),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"connected")," property in the same way to only render the wallet address if there is a wallet connected. Similarly, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"isDisconnected")," property to show a message asking the user to connect."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<div>\n  <h2>Connection Information</h2>\n  <div>\n    {isConnecting && <p>Please click Connect in your wallet...</p>}\n    {isConnected && <p>{"Address: " + address}</p>}\n    {isDisconnected && <p>Please connect your wallet to use this app.</p>}\n  </div>\n</div>\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"In this guide, you've learned how the ",(0,a.kt)("inlineCode",{parentName:"p"},"useAccount")," hook gives you access to information about the user's connection status and wallet. It can be used in any part of your app that is wrapped by the wagmi context provider. You've also learned a technique for conditional rendering based on connection status. Finally, you've learned to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"ssr")," flag to prevent hydration errors due to the client and server possessing different information about the user's connection status."),(0,a.kt)("hr",null))}u.isMDXComponent=!0}}]);