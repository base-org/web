"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[748],{30876:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var i=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=i.createContext({}),c=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return i.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(t),f=a,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||r;return t?i.createElement(m,o(o({ref:n},s),{},{components:t})):i.createElement(m,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},46035:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(7896),a=(t(2784),t(30876));const r={title:"Function Visibility and State Mutability",description:"A quick reference for all your function declaring needs.",hide_table_of_contents:!1},o=void 0,l={unversionedId:"docs/advanced-functions/function-visibility",id:"docs/advanced-functions/function-visibility",title:"Function Visibility and State Mutability",description:"A quick reference for all your function declaring needs.",source:"@site/base-camp/docs/advanced-functions/function-visibility.md",sourceDirName:"docs/advanced-functions",slug:"/docs/advanced-functions/function-visibility",permalink:"/es/base-camp/docs/advanced-functions/function-visibility",draft:!1,tags:[],version:"current",frontMatter:{title:"Function Visibility and State Mutability",description:"A quick reference for all your function declaring needs.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Function Visibility",permalink:"/es/base-camp/docs/advanced-functions/function-visibility-vid"},next:{title:"Function Modifiers",permalink:"/es/base-camp/docs/advanced-functions/function-modifiers-vid"}},u={},c=[{value:"Objectives",id:"objectives",level:2},{value:"Function Visibility",id:"function-visibility",level:2},{value:"External",id:"external",level:3},{value:"Public",id:"public",level:3},{value:"Private and Internal",id:"private-and-internal",level:3},{value:"Function State Mutability",id:"function-state-mutability",level:2},{value:"Pure",id:"pure",level:3},{value:"View",id:"view",level:3},{value:"Unlabeled Functions",id:"unlabeled-functions",level:3},{value:"Conclusion",id:"conclusion",level:2}],s={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You've seen much of this before, but this document outlines and highlights the options for ",(0,a.kt)("em",{parentName:"p"},"function visibility")," and ",(0,a.kt)("em",{parentName:"p"},"state mutability")," all in one document."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"objectives"},"Objectives"),(0,a.kt)("p",null,"By the end of this lesson you should be able to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Categorize functions as public, private, internal, or external based on their usage"),(0,a.kt)("li",{parentName:"ul"},"Describe how pure and view functions are different than functions that modify storage")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"function-visibility"},"Function Visibility"),(0,a.kt)("p",null,"There are four types of ",(0,a.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/contracts.html?highlight=pure#function-visibility"},"visibility")," for functions in Solidity: ",(0,a.kt)("inlineCode",{parentName:"p"},"external"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"public"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"internal"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"private"),". These labels represent a further division of the ",(0,a.kt)("em",{parentName:"p"},"public")," and ",(0,a.kt)("em",{parentName:"p"},"private")," labels you might use in another language."),(0,a.kt)("h3",{id:"external"},"External"),(0,a.kt)("p",null,"Functions with ",(0,a.kt)("inlineCode",{parentName:"p"},"external")," visibility are ",(0,a.kt)("strong",{parentName:"p"},"only")," callable from other contracts and cannot be called within their own contract. You may see older references stating you should use ",(0,a.kt)("inlineCode",{parentName:"p"},"external")," over ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," because it forces the function to use ",(0,a.kt)("inlineCode",{parentName:"p"},"calldata"),". This is no longer correct, because both function visibilities can now use ",(0,a.kt)("inlineCode",{parentName:"p"},"calldata")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"memory")," for parameters. However, using ",(0,a.kt)("inlineCode",{parentName:"p"},"calldata")," for either will cost less gas."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Foo {\n    constructor() {\n        // Bad code example, will not work\n        uint bar = foo(3);\n        // ... other code\n    }\n\n    function foo(uint _number) external pure returns (uint) {\n         return _number*2;\n    }\n}\n")),(0,a.kt)("h3",{id:"public"},"Public"),(0,a.kt)("p",null,"Public functions work the same as external, except they may also be called within the contract that contains them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Foo {\n    constructor() {\n        // Public functions may be called within the contract\n        uint bar = foo(3);\n        // ... other code\n    }\n\n    function foo(uint _number) public pure returns (uint) {\n        return _number*2;\n    }\n}\n")),(0,a.kt)("h3",{id:"private-and-internal"},"Private and Internal"),(0,a.kt)("p",null,"Functions visible as ",(0,a.kt)("inlineCode",{parentName:"p"},"private")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"internal")," operate nearly identically. Beyond writing hygienic code, these have a very important effect. Because they are not a part of the contract's ABI, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"mapping"),"s and ",(0,a.kt)("inlineCode",{parentName:"p"},"storage")," variable references as parameters."),(0,a.kt)("p",null,"The difference is that ",(0,a.kt)("inlineCode",{parentName:"p"},"private")," functions can't be called from derived contracts. You'll learn more about that when we cover inheritance."),(0,a.kt)("p",null,"Some developers prepend an underscore to ",(0,a.kt)("inlineCode",{parentName:"p"},"private")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"internal")," functions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function _foo(uint _number) private returns (uint) {\n    return _number*2;\n}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"All data on a blockchain is public. Don't mistake hiding visibility while coding for hiding information from the world!")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"function-state-mutability"},"Function State Mutability"),(0,a.kt)("p",null,"State mutability labels are relatively unique to Solidity. They determine how a function can interact with state, which has a substantial impact on gas costs."),(0,a.kt)("h3",{id:"pure"},"Pure"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pure")," functions promise to neither read nor write state. They're usually used for helper functions that support other functionality."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function abs(int x) public pure returns (int) {\n    return x >= 0 ? x : -x;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pure")," functions can be called from outside the blockchain without using gas, if they are also ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"external"),"."),(0,a.kt)("h3",{id:"view"},"View"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"view")," functions access state, but don't modify it. You've used these for tasks such as returning all the values in an array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function getArr() public view returns (uint[] memory) {\n    return arr;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"view")," functions can be called from outside the blockchain without using gas, if they are also ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"external"),"."),(0,a.kt)("h3",{id:"unlabeled-functions"},"Unlabeled Functions"),(0,a.kt)("p",null,"Functions that are not labeled ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"pure")," can modify state and the compiler will generate a warning if they do not."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function addToArr(uint _number) public {\n    arr.push(_number);\n}\n")),(0,a.kt)("p",null,"They can have any visibility and will always cost gas when called."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"The visibility and mutability keywords in Solidity help you organize your code and alert other developers to the properties of each of your functions. Use them to keep your code organized and readable."),(0,a.kt)("hr",null))}d.isMDXComponent=!0}}]);