"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[7879],{30876:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(2784);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(a),c=i,h=d["".concat(o,".").concat(c)]||d[c]||m[c]||r;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},65942:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(7896),i=(a(2784),a(30876));const r={title:"Mappings",description:"Use the mapping data type to store key-value pairs.",hide_table_of_contents:!1},l=void 0,s={unversionedId:"docs/mappings/mappings-sbs",id:"docs/mappings/mappings-sbs",title:"Mappings",description:"Use the mapping data type to store key-value pairs.",source:"@site/base-camp/docs/mappings/mappings-sbs.md",sourceDirName:"docs/mappings",slug:"/docs/mappings/mappings-sbs",permalink:"/base-camp/docs/mappings/mappings-sbs",draft:!1,tags:[],version:"current",frontMatter:{title:"Mappings",description:"Use the mapping data type to store key-value pairs.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Using `msg.sender`",permalink:"/base-camp/docs/mappings/using-msg-sender-vid"},next:{title:"How Mappings are Stored",permalink:"/base-camp/docs/mappings/how-mappings-are-stored-vid"}},o={},p=[{value:"Objectives",id:"objectives",level:2},{value:"Mappings in Solidity vs. Hash Tables",id:"mappings-in-solidity-vs-hash-tables",level:2},{value:"Creating a Mapping",id:"creating-a-mapping",level:3},{value:"Writing to the Mapping",id:"writing-to-the-mapping",level:3},{value:"Utilizing msg.sender",id:"utilizing-msgsender",level:3},{value:"Retrieving All Favorite Numbers",id:"retrieving-all-favorite-numbers",level:2},{value:"Using a Helper Array",id:"using-a-helper-array",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In Solidity, the hashtable/hashmap/dictionary-comparable type used to store key-value pairs is called a ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping"),"s are a powerful tool with many uses, but they also have some unexpected limitations. They also ",(0,i.kt)("strong",{parentName:"p"},"aren't")," actually hash tables!"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"objectives"},"Objectives"),(0,i.kt)("p",null,"By the end of this lesson you should be able to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Construct a Map (dictionary) data type"),(0,i.kt)("li",{parentName:"ul"},"Recall that assignment of the Map data type is not as flexible as for other data types/in other languages"),(0,i.kt)("li",{parentName:"ul"},"Restrict function calls with the ",(0,i.kt)("inlineCode",{parentName:"li"},"msg.sender")," global variable"),(0,i.kt)("li",{parentName:"ul"},"Recall that there is no collision protection in the EVM and why this is (probably) ok")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"mappings-in-solidity-vs-hash-tables"},"Mappings in Solidity vs. Hash Tables"),(0,i.kt)("p",null,"On the surface, the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/types.html#mapping-types"},(0,i.kt)("inlineCode",{parentName:"a"},"mapping"))," data type appears to be just another hash table implementation that stores pairs of any hashable type as a key, to any other type as a value. The difference is in implementation."),(0,i.kt)("p",null,"In a more traditional implementation, the data is stored in memory as an array, with a hash-to-index ",(0,i.kt)("em",{parentName:"p"},"(hashmod)")," function used to determine which spot in the array to store a given value, based on the key. Sometimes, the ",(0,i.kt)("em",{parentName:"p"},"hashmod")," function for two different keys results in the same index, causing a ",(0,i.kt)("em",{parentName:"p"},"collision"),"."),(0,i.kt)("p",null,"Collisions are resolved via additional solutions, such as linked list chaining; when the underlying array starts to get full, a bigger one is created, all the keys are re-hash-modded, and all the values moved over to the new array."),(0,i.kt)("p",null,"In the EVM, ",(0,i.kt)("inlineCode",{parentName:"p"},"mappings")," do ",(0,i.kt)("strong",{parentName:"p"},"not")," have an array as the underlying data structure. Instead, the ",(0,i.kt)("inlineCode",{parentName:"p"},"keccak256")," hash of the key plus the storage slot for the mapping itself is used to determine which storage slot out of all 2","*","*","256 will be used for the value."),(0,i.kt)("p",null,"There is no collision-handling, for the same reason that makes wallets work at all - 2","*","*","256 is an unimaginably large number. One of the biggest numbers you might encounter regularly is the number of possible configurations for a ",(0,i.kt)("a",{parentName:"p",href:"https://czep.net/weblog/52cards.html"},"shuffled deck of cards"),", which is:"),(0,i.kt)("p",null,"80658175170943878571660636856403766975289505440883277824000000000000"),(0,i.kt)("p",null,"Meanwhile, the number of variations of a ",(0,i.kt)("inlineCode",{parentName:"p"},"keccak256")," hash are:"),(0,i.kt)("p",null,"115792089237316195423570985008687907853269984665640564039457584007913129639935"),(0,i.kt)("p",null,"Collisions are very unlikely."),(0,i.kt)("p",null,"As a result, there are a few special characteristics and limitations to keep in mind with the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," data type:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mappings can only have a data location of ",(0,i.kt)("inlineCode",{parentName:"li"},"storage")),(0,i.kt)("li",{parentName:"ul"},"They can't be used as parameters or returns of public functions"),(0,i.kt)("li",{parentName:"ul"},"They are not iterable and you cannot retrieve a list of keys"),(0,i.kt)("li",{parentName:"ul"},"All possible keys will return the default value, unless another value has been stored")),(0,i.kt)("h3",{id:"creating-a-mapping"},"Creating a Mapping"),(0,i.kt)("p",null,"Create a contract called ",(0,i.kt)("inlineCode",{parentName:"p"},"Mappings"),". In it, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," from an ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"uint")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteNumbers"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Mappings {\n    mapping (address => uint) favoriteNumbers;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"writing-to-the-mapping"},"Writing to the Mapping"),(0,i.kt)("p",null,"Add a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"saveFavoriteNumber")," that takes an ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"uint"),", then saves the ",(0,i.kt)("inlineCode",{parentName:"p"},"uint")," in the mapping, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," as the key."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function saveFavoriteNumber(address _address, uint _favorite) public {\n    favoriteNumbers[_address] = _favorite;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"Deploy and test it out. Does it work? Probably..."),(0,i.kt)("p",null,"You don't have a way to read the data in ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteNumber"),", but this problem is easy to correct. Similar to arrays, if you mark a ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," as public, the Solidity compiler will automatically create a getter for values in that ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping"),"."),(0,i.kt)("p",null,"Update the declaration of ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteNumbers")," and deploy to test again."),(0,i.kt)("h3",{id:"utilizing-msgsender"},"Utilizing msg.sender"),(0,i.kt)("p",null,"Another issue with this contract is that a ",(0,i.kt)("inlineCode",{parentName:"p"},"public")," function can be called by anyone and everyone with a wallet and funds to pay gas fees. As a result, anyone could go in after you and change your favorite number from lucky number ",(0,i.kt)("strong",{parentName:"p"},"13")," to anything, even ",(0,i.kt)("strong",{parentName:"p"},"7"),"!"),(0,i.kt)("p",null,"That won't do at all!"),(0,i.kt)("p",null,"Luckily, you can make use of a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/units-and-global-variables.html"},"global variable")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"msg.sender")," to access the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," of the wallet that sent the transaction. Use this to make it so that only the owner of an ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," can set their favorite number."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function saveFavoriteNumber(uint _favorite) public {\n    favoriteNumbers[msg.sender] = _favorite;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"Deploy and test again. Success!"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"retrieving-all-favorite-numbers"},"Retrieving All Favorite Numbers"),(0,i.kt)("p",null,"One challenging limitation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," data type is that it is ",(0,i.kt)("strong",{parentName:"p"},"not")," iterable - you cannot loop through and manipulate or return ",(0,i.kt)("strong",{parentName:"p"},"all")," values in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping"),"."),(0,i.kt)("p",null,"At least not with any built in features, but you can solve this on your own. A common practice in Solidity with this and similar problems is to use multiple variables or data types to store the right combination needed to address the issue."),(0,i.kt)("h3",{id:"using-a-helper-array"},"Using a Helper Array"),(0,i.kt)("p",null,"For this problem, you can use a helper array to store a list of all the keys present in ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteNumbers"),". Simply add the array, and push new keys to it when saving a new favorite number."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Mappings {\n    mapping (address => uint) public favoriteNumbers;\n    address[] addressesOfFavs;\n\n    function saveFavoriteNumber(uint _favorite) public {\n        favoriteNumbers[msg.sender] = _favorite;\n        // Imperfect solution, see below\n        addressesOfFavs.push(msg.sender);\n    }\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"To return all of the favorite numbers, you can then iterate through ",(0,i.kt)("inlineCode",{parentName:"p"},"addressesOfFavs"),", look up that addresses' favorite number, add it to a return array, and then return the array when you're done."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function returnAllFavorites() public view returns (uint[] memory) {\n    uint[] memory allFavorites = new uint[](addressesOfFavs.length);\n\n    for(uint i = 0; i < allFavorites.length; i++) {\n        allFavorites[i] = favoriteNumbers[addressesOfFavs[i]];\n    }\n\n    return allFavorites;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"On the surface, this solution works, but there is a problem: What happens if a user ",(0,i.kt)("strong",{parentName:"p"},"updates")," their favorite number? Their address will end up in the list twice, resulting in a doubled entry in the return."),(0,i.kt)("p",null,"A solution here would be to check first if the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," already has a number as a value in ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteNumbers"),", and only push it to the array if not."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function saveFavoriteNumber(uint _favorite) public {\n    if(favoriteNumbers[msg.sender] == 0) {\n        addressesOfFavs.push(msg.sender);\n    }\n    favoriteNumbers[msg.sender] = _favorite;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"You should end up with a contract similar to this:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity 0.8.17;\n\ncontract Mappings {\n    mapping (address => uint) public favoriteNumbers;\n    address[] addressesOfFavs;\n\n    function saveFavoriteNumber(uint _favorite) public {\n        if(favoriteNumbers[msg.sender] == 0) {\n            addressesOfFavs.push(msg.sender);\n        }\n        favoriteNumbers[msg.sender] = _favorite;\n    }\n\n    function returnAllFavorites() public view returns (uint[] memory) {\n        uint[] memory allFavorites = new uint[](addressesOfFavs.length);\n\n        for(uint i = 0; i < allFavorites.length; i++) {\n            allFavorites[i] = favoriteNumbers[addressesOfFavs[i]];\n        }\n\n        return allFavorites;\n    }\n}\n"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"In this lesson, you've learned how to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," data type to store key-value pairs in Solidity. You've also explored one strategy for solving some of the limitations found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," type when compared to similar types in other languages."),(0,i.kt)("hr",null))}m.isMDXComponent=!0}}]);