"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[5941],{82247:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var o=t(14041);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),d=r,g=c["".concat(s,".").concat(d)]||c[d]||y[d]||a;return t?o.createElement(g,l(l({ref:n},p),{},{components:t})):o.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=t[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},24371:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=t(89575),r=(t(14041),t(82247));const a={title:"Foundry: Setting up Foundry with Base",slug:"/intro-to-foundry-setup",description:"A tutorial that teaches how to set up your development environment to work with Foundry.",author:"Edson Alcala",keywords:["Foundry","Forge","Foundry Book","smart contract development","toolchain"],tags:["smart contracts"],difficulty:"beginner",hide_table_of_contents:!1,displayed_sidebar:null},l=void 0,i={unversionedId:"docs/intro-to-foundry-setup",id:"docs/intro-to-foundry-setup",title:"Foundry: Setting up Foundry with Base",description:"A tutorial that teaches how to set up your development environment to work with Foundry.",source:"@site/tutorials/docs/4_intro-to-foundry-setup.md",sourceDirName:"docs",slug:"/intro-to-foundry-setup",permalink:"/tutorials/intro-to-foundry-setup",draft:!1,tags:[{label:"smart contracts",permalink:"/tutorials/tags/smart-contracts"}],version:"current",sidebarPosition:4,frontMatter:{title:"Foundry: Setting up Foundry with Base",slug:"/intro-to-foundry-setup",description:"A tutorial that teaches how to set up your development environment to work with Foundry.",author:"Edson Alcala",keywords:["Foundry","Forge","Foundry Book","smart contract development","toolchain"],tags:["smart contracts"],difficulty:"beginner",hide_table_of_contents:!1,displayed_sidebar:null}},s={},u=[{value:"Objectives",id:"objectives",level:2},{value:"Overview",id:"overview",level:2},{value:"Installing Foundry",id:"installing-foundry",level:2},{value:"My First Foundry Project",id:"my-first-foundry-project",level:2},{value:"Setting up Foundry with Base",id:"setting-up-foundry-with-base",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:u},c="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,o.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"In this tutorial, you'll learn how to set up ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/foundry-rs/foundry"},"Foundry"),", a toolchain for smart contract development. You'll also learn how to configure it to work with Base."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"objectives"},"Objectives"),(0,r.yg)("p",null,"By the end of this tutorial, you should be able to:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Install Foundry"),(0,r.yg)("li",{parentName:"ul"},"Create a Foundry project"),(0,r.yg)("li",{parentName:"ul"},"Compile a smart contract using Foundry"),(0,r.yg)("li",{parentName:"ul"},"Configure Foundry to work with Base")),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"Foundry is a smart contract development toolchain that is composed of multiple small command line tools:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("em",{parentName:"li"},(0,r.yg)("a",{parentName:"em",href:"https://book.getfoundry.sh/forge/"},"forge")),": Compile, test, and deploy your smart contracts"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("em",{parentName:"li"},(0,r.yg)("a",{parentName:"em",href:"https://book.getfoundry.sh/cast/"},"cast")),": Interact with the Blockchain over RPC. You can make smart contract calls, send transactions, or retrieve any type of chain data"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("em",{parentName:"li"},(0,r.yg)("a",{parentName:"em",href:"https://book.getfoundry.sh/chisel/"},"chisel")),": A Solidity REPL. You can write Solidity code directly"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("em",{parentName:"li"},(0,r.yg)("a",{parentName:"em",href:"https://book.getfoundry.sh/anvil/"},"anvil")),": A local Blockchain node for testing and development")),(0,r.yg)("p",null,"Using Foundry you can manage your dependencies, compile your project, run tests, deploy smart contracts and interact with the chain from the command-line and via Solidity scripts."),(0,r.yg)("p",null,"For a deep dive on the Foundry features and full capabilities, check out the ",(0,r.yg)("a",{parentName:"p",href:"https://book.getfoundry.sh/"},"Foundry Book"),"."),(0,r.yg)("h2",{id:"installing-foundry"},"Installing Foundry"),(0,r.yg)("p",null,"In order to install Foundry, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"Foundryup"),", the Foundry's toolchain installer."),(0,r.yg)("p",null,"To install ",(0,r.yg)("inlineCode",{parentName:"p"},"Foundryup")," you have to run in the terminal:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ curl -L https://foundry.paradigm.xyz | bash\n")),(0,r.yg)("p",null,"After ",(0,r.yg)("inlineCode",{parentName:"p"},"Foundryup")," is installed, you can install ",(0,r.yg)("inlineCode",{parentName:"p"},"Foundry")," by running:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ foundryup\n")),(0,r.yg)("p",null,"You can verify the installation by trying the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ forge --version\n$ cast --version\n$ chisel --version\n$ anvil --version\n")),(0,r.yg)("h2",{id:"my-first-foundry-project"},"My First Foundry Project"),(0,r.yg)("p",null,"To create a foundry project you can simply run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ forge init hello_foundry_in_base\n")),(0,r.yg)("p",null,"This will create a foundry project with the following structure:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500\u2500 lib          # all the libraries installed\n\u251c\u2500\u2500 script       # scripts folder, e.g., deploy scripts\n\u251c\u2500\u2500 src          # smart contracts folder\n\u251c\u2500\u2500 test         # tests folder\n\u2514\u2500\u2500 foundry.toml # foundry configuration file\n")),(0,r.yg)("p",null,"You will also notice a ",(0,r.yg)("inlineCode",{parentName:"p"},".gitsubmodules")," file -- this is because ",(0,r.yg)("inlineCode",{parentName:"p"},"Foundry")," handles dependencies using ",(0,r.yg)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Git-Tools-Submodules"},"Git submodules"),"."),(0,r.yg)("p",null,"By default the Foundry structure stores smart contracts in the ",(0,r.yg)("inlineCode",{parentName:"p"},"src")," folder. You can change this in the ",(0,r.yg)("inlineCode",{parentName:"p"},"foundry.toml")," configuration file."),(0,r.yg)("p",null,"For instance:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"[profile.default]\nsrc = 'contracts'\n")),(0,r.yg)("p",null,"In order to compile the project, simply run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"forge build:\n")),(0,r.yg)("h2",{id:"setting-up-foundry-with-base"},"Setting up Foundry with Base"),(0,r.yg)("p",null,"In order to work with Base, you need to configure a couple of settings in the configuration ",(0,r.yg)("inlineCode",{parentName:"p"},"foundry.toml")," file."),(0,r.yg)("p",null,"The first thing is the Solidity version."),(0,r.yg)("p",null,"You need to configure your config file as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"[profile.default]\nsrc = 'src'\nout = 'out'\nlibs = ['lib']\nsolc_version = \"0.8.23\"\n")),(0,r.yg)("p",null,"Be sure that you modify the pragma of your contracts and simply run ",(0,r.yg)("inlineCode",{parentName:"p"},"forge build")," to ensure everything works well."),(0,r.yg)("p",null,"We also recommend setting up JSON RPC endpoints for Base and the API key for ",(0,r.yg)("a",{parentName:"p",href:"https://basescan.org/"},"Basescan")," in the configuration file so that your environment is ready to deploy your smart contracts."),(0,r.yg)("p",null,"Your configuration file should look like the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'[profile.default]\nsrc = "src"\nout = "out"\nlibs = ["lib"]\nsolc_version = "0.8.23"\n\n[rpc_endpoints]\nbase = "https://mainnet.base.org"\nbaseSepolia = "https://sepolia.base.org"\n\n[etherscan]\nbaseSepolia = { key = "${BASESCAN_API_KEY}", url = "https://api-sepolia.basescan.org/api" }\nbase = { key = "${BASESCAN_API_KEY}", url = "https://api.basescan.org/api" }\n')),(0,r.yg)("p",null,"We included 2 JSON RPC endpoints for ",(0,r.yg)("inlineCode",{parentName:"p"},"Base")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Base Sepolia")," and similar for the Etherscan section, we included the configuration for ",(0,r.yg)("inlineCode",{parentName:"p"},"Basescan")," for Sepolia and Mainnet. Both rely on the same API Key, ",(0,r.yg)("inlineCode",{parentName:"p"},"BASESCAN_API_KEY"),"."),(0,r.yg)("h2",{id:"conclusion"},"Conclusion"),(0,r.yg)("p",null,"In this tutorial, you've embarked on the journey of smart contract development with Base and Foundry. You've learned the essential steps, from installing Foundry using the convenient ",(0,r.yg)("inlineCode",{parentName:"p"},"Foundryup")," toolchain installer to creating your first project and configuring Foundry to seamlessly integrate with Base."),(0,r.yg)("hr",null))}y.isMDXComponent=!0}}]);