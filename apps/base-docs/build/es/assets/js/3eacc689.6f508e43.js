"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[9144],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?a.createElement(y,r(r({ref:t},c),{},{components:n})):a.createElement(y,r({ref:t},c))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2798:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(7896),o=(n(2784),n(30876));const s={title:"Gasless Transactions on Base using a Paymaster",slug:"/gasless-transaction-on-base-using-a-paymaster",description:"Learn how to leverage the Base Paymaster for seamless, gasless transactions on the Coinbase Cloud Developer Platform.",author:"hughescoin",keywords:["Gas","Gasless","Transactions","Paymaster","Sponsor","Sponsored Transactions","Onchain","Coinbase","Base","Crypto","Cloud Platform"],tags:["Gasless","Crypto","Gas","Sponsor","Coinbase","Base"],difficulty:"easy",hide_table_of_contents:!1,displayed_sidebar:null},r="Gasless Transactions on Base using Base Paymaster",i={unversionedId:"docs/gassless-transactions-with-paymaster",id:"docs/gassless-transactions-with-paymaster",title:"Gasless Transactions on Base using a Paymaster",description:"Learn how to leverage the Base Paymaster for seamless, gasless transactions on the Coinbase Cloud Developer Platform.",source:"@site/tutorials/docs/0_gassless-transactions-with-paymaster.md",sourceDirName:"docs",slug:"/gasless-transaction-on-base-using-a-paymaster",permalink:"/es/tutorials/gasless-transaction-on-base-using-a-paymaster",draft:!1,tags:[{label:"Gasless",permalink:"/es/tutorials/tags/gasless"},{label:"Crypto",permalink:"/es/tutorials/tags/crypto"},{label:"Gas",permalink:"/es/tutorials/tags/gas"},{label:"Sponsor",permalink:"/es/tutorials/tags/sponsor"},{label:"Coinbase",permalink:"/es/tutorials/tags/coinbase"},{label:"Base",permalink:"/es/tutorials/tags/base"}],version:"current",sidebarPosition:0,frontMatter:{title:"Gasless Transactions on Base using a Paymaster",slug:"/gasless-transaction-on-base-using-a-paymaster",description:"Learn how to leverage the Base Paymaster for seamless, gasless transactions on the Coinbase Cloud Developer Platform.",author:"hughescoin",keywords:["Gas","Gasless","Transactions","Paymaster","Sponsor","Sponsored Transactions","Onchain","Coinbase","Base","Crypto","Cloud Platform"],tags:["Gasless","Crypto","Gas","Sponsor","Coinbase","Base"],difficulty:"easy",hide_table_of_contents:!1,displayed_sidebar:null}},l={},p=[{value:"Objectives",id:"objectives",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Coinbase CDP account",id:"coinbase-cdp-account",level:3},{value:"Familiarity with Smart Accounts and ERC 4337",id:"familiarity-with-smart-accounts-and-erc-4337",level:3},{value:"Foundry",id:"foundry",level:3},{value:"Set Up a Base Paymaster &amp; Bundler",id:"set-up-a-base-paymaster--bundler",level:2},{value:"Allowlist a Sponsorable Contract",id:"allowlist-a-sponsorable-contract",level:3},{value:"Global &amp; Per User Limits:",id:"global--per-user-limits",level:3},{value:"Test Your Paymaster policy",id:"test-your-paymaster-policy",level:2},{value:"Set Constants for Your Paymaster &amp; Bundler endpoint",id:"set-constants-for-your-paymaster--bundler-endpoint",level:3},{value:"Create Two Smart Accounts",id:"create-two-smart-accounts",level:3},{value:"Initialize Paymaster and Create Accounts",id:"initialize-paymaster-and-create-accounts",level:3},{value:"Encode the Function Call",id:"encode-the-function-call",level:3},{value:"Testing Global Limits",id:"testing-global-limits",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...s}=e;return(0,o.kt)(u,(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gasless-transactions-on-base-using-base-paymaster"},"Gasless Transactions on Base using Base Paymaster"),(0,o.kt)("p",null,"Still trying to onboard users to your app? Want to break free from the worries of gas transactions and sponsor them for your users on Base? Look no further!"),(0,o.kt)("p",null,"Base transaction fees are less than a penny, but the concept of gas can be confusing for new users. Abstract this away and improve your UX by using the Base Paymaster. The Base Paymaster allows you to batch multi-step transactions and create custom gasless experiences. Sponsor up to $10k monthly on mainnet (unlimited on testnet). To request an increase in limit, reach out in ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/AaAcm4UW"},"Discord"),"."),(0,o.kt)("h2",{id:"objectives"},"Objectives"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Configure security measures to ensure safe and reliable transactions"),(0,o.kt)("li",{parentName:"ul"},"Manage and allocate resources for sponsored transactions"),(0,o.kt)("li",{parentName:"ul"},"Subsidize transaction fees for users, enhancing the user experience by making transactions free for them"),(0,o.kt)("li",{parentName:"ul"},"Set up and manage sponsored transactions on various schedules, including weekly, monthly, and daily cadences")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"This tutorial assumes you have a Coinbase Cloud Developer Platform account. If not, sign up on the ",(0,o.kt)("a",{parentName:"p",href:"https://portal.cdp.coinbase.com/"},"CDP site"),"."),(0,o.kt)("h3",{id:"coinbase-cdp-account"},"Coinbase CDP account"),(0,o.kt)("p",null,"This is your access point to the Coinbase Cloud Developer Platform, where you can manage projects and utilize tools like the Paymaster."),(0,o.kt)("h3",{id:"familiarity-with-smart-accounts-and-erc-4337"},"Familiarity with Smart Accounts and ERC 4337"),(0,o.kt)("p",null,"Understanding Smart Accounts and the ERC 4337 standard is crucial as they are the backbone of executing advanced transaction patterns and account abstractions on the Ethereum network."),(0,o.kt)("h3",{id:"foundry"},"Foundry"),(0,o.kt)("p",null,"Foundry is a development environment, testing framework, and smart contract toolkit for Ethereum. It's essential for deploying and testing smart contracts."),(0,o.kt)("h2",{id:"set-up-a-base-paymaster--bundler"},"Set Up a Base Paymaster & Bundler"),(0,o.kt)("p",null,"In this section, you will configure a Paymaster to sponsor payments on behalf of a specific smart contract for a specified amount. First, navigate to the Coinbase Developer Platform, create or select your project, and click on the Paymaster tool from the left navigation. Then, go to the Configuration tab and save the RPC URL to your clipboard, which will be needed for later steps in your index.js file."),(0,o.kt)("p",null,"Navigate to the ",(0,o.kt)("a",{parentName:"p",href:"https://portal.cdp.coinbase.com/"},"Coinbase Developer Platform"),":"),(0,o.kt)("p",null,"Create or select your project of choice from the upper left corner of your screen."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cdp-home.png",src:n(21621).Z,width:"6014",height:"3204"})),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Paymaster")," tool on the left navigation:","*","*"," ",(0,o.kt)("a",{parentName:"p",href:"https://portal.cdp.coinbase.com/products/bundler-and-paymaster"},"Paymaster Tool")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cdp-paymaster-tool.png",src:n(81453).Z,width:"6014",height:"3204"})),(0,o.kt)("p",null,"Click on ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration")," at the top of the screen"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cdp-paymaster-tool.png",src:n(58769).Z,width:"6014",height:"3204"})),(0,o.kt)("p",null,"Save the RPC URL to your paymaster to your clipboard. You will need it in your ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file in a later step."),(0,o.kt)("h3",{id:"allowlist-a-sponsorable-contract"},"Allowlist a Sponsorable Contract"),(0,o.kt)("p",null,"Sponsoring transactions are beneficial to easing the onboarding and UX of a decentralized application. As a developer, you want to ensure this is done in the most secure and cost-effective manner. Start by allowlisting a contract of your choice."),(0,o.kt)("p",null,"Select ",(0,o.kt)("strong",{parentName:"p"},"Base Mainnet")),(0,o.kt)("p",null,"From the configuration page, select ",(0,o.kt)("inlineCode",{parentName:"p"},"Base Mainnet")," from the dropdown menu. Then, enable your paymaster by clicking on the toggle button to the right of the screen."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cdp-project-selection.png",src:n(21621).Z,width:"6014",height:"3204"})),(0,o.kt)("p",null,"Allowlist the NFT contract and the mintTo functions:"),(0,o.kt)("p",null,"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Add")," button to add a contract."),(0,o.kt)("p",null,"Add the following contract: ",(0,o.kt)("a",{parentName:"p",href:"https://basescan.org/token/0x83bd615eb93ee1336aca53e185b03b54ff4a17e8"},(0,o.kt)("inlineCode",{parentName:"a"},"0x83bd615eb93eE1336acA53e185b03B54fF4A17e8"))),(0,o.kt)("p",null,"Put ",(0,o.kt)("inlineCode",{parentName:"p"},"mintTo(address)")," as the function to allowlist then click ",(0,o.kt)("inlineCode",{parentName:"p"},"Save")," at the bottom of the page."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cdp-allowlist-contracts.png",src:n(58314).Z,width:"6014",height:"3204"})),(0,o.kt)("admonition",{title:"Use your own contract",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You will be using this ",(0,o.kt)("a",{parentName:"p",href:"https://basescan.org/token/0x83bd615eb93ee1336aca53e185b03b54ff4a17e8"},"simple NFT contract"),"deployed on Base mainnet for our example. Feel free to use a contract of your choice.")),(0,o.kt)("h3",{id:"global--per-user-limits"},"Global & Per User Limits:"),(0,o.kt)("p",null,"Scroll down to the \u201cPer User Limit\u201d section"),(0,o.kt)("p",null,"You can set a Paymaster policy that specifies either a specific dollar amount or a number of UserOperations. You can enable a 'limit cycle' that allows this policy to refresh every week. This feature enables applications to sponsor smart wallets on a weekly, daily, or monthly basis, either by amount or by number of UserOperations."),(0,o.kt)("p",null,"Set the max USD to $0.05 and the max UserOperation to 1 to create a policy with a maximum sponsorship limit of $0.05 and a maximum of 1 UserOperation per user."),(0,o.kt)("admonition",{title:"Limit Cycles",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Limit Cycles enables applications to sponsor smart wallets on a weekly, daily, or monthly basis, either by amount or by number of UserOperations. These limits reset based on the cadence selected in the dropdown menu.")),(0,o.kt)("p",null,"Set the Global limit:"),(0,o.kt)("p",null,"This setting allows you to define the maximum amount of gas or USD that can be sponsored globally across all users. It helps control the total expenditure on gas sponsorship, ensuring that the allocated budget is not exceeded. For example, setting a global limit of $1 means that the Paymaster will sponsor transactions until the total gas cost reaches $1."),(0,o.kt)("p",null,"Set your global policy to be ",(0,o.kt)("inlineCode",{parentName:"p"},"$.07")," by entering the amount in the text field and clicking the ",(0,o.kt)("inlineCode",{parentName:"p"},"Save")," button."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cdp-allowlist-contracts.png",src:n(4642).Z,width:"6014",height:"3204"})),(0,o.kt)("h2",{id:"test-your-paymaster-policy"},"Test Your Paymaster policy"),(0,o.kt)("p",null,"You will now test the policy that was created."),(0,o.kt)("admonition",{title:"The Use of Foundry",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In this tutorial, You use foundry to create two key pairs that will allow us to create Smart Accounts that you will sponsor transactions on behalf of. You will ",(0,o.kt)("strong",{parentName:"p"},"not")," need to send any funds (ETH) to these wallets. You may use private keys of wallets you own as an alternative."),(0,o.kt)("p",{parentName:"admonition"},"Foundry depends on Rust to work. If you do not have rust install:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n")),(0,o.kt)("p",{parentName:"admonition"},"For more information, see the ",(0,o.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/getting-started/installation"},"Foundry Book installation guide"),".")),(0,o.kt)("p",null,"Open a terminal and install Foundry by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -L https://foundry.paradigm.xyz | bash\n")),(0,o.kt)("p",null,"Install the Foundry toolchain installer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"foundryup\n")),(0,o.kt)("p",null,"Create a directory named ",(0,o.kt)("inlineCode",{parentName:"p"},"sponsored_transactions"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir sponsored_transactions\n")),(0,o.kt)("p",null,"Change into the new directory, initialize a node project, install two dependencies ",(0,o.kt)("inlineCode",{parentName:"p"},"viem")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"permissionless")," and create a file titled ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd sponsored_transactions\nnpm init es6\nnpm install permissionless\nnpm install viem\ntouch index.js\n")),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file, import the dependencies from viem and permissionless.\nThese dependencies will allow us to connect to Base, create our smart accounts, initialize a paymaster, and send our encoded data to the network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { http, createPublicClient, encodeFunctionData } from 'viem';\nimport { base } from 'viem/chains';\nimport { createSmartAccountClient } from 'permissionless';\nimport { privateKeyToSimpleSmartAccount } from 'permissionless/accounts';\nimport { createPimlicoPaymasterClient } from 'permissionless/clients/pimlico';\n")),(0,o.kt)("h3",{id:"set-constants-for-your-paymaster--bundler-endpoint"},"Set Constants for Your Paymaster & Bundler endpoint"),(0,o.kt)("admonition",{title:"Find your Paymaster & Bundler endpoint",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The Paymaster & Bundler endpoint is the URL for your Coinbase Developer Platform (CDP) Paymaster."),(0,o.kt)("p",{parentName:"admonition"},"This was saved in the previous section and follows this format: ",(0,o.kt)("inlineCode",{parentName:"p"},"https://api.developer.coinbase.com/rpc/v1/base/<SPECIAL-KEY>")),(0,o.kt)("p",{parentName:"admonition"},"Navigate to the ",(0,o.kt)("a",{parentName:"p",href:"https://portal.cdp.coinbase.com/products/bundler-and-paymaster"},"Paymaster Tool")," and select the ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration")," tab at the top of the screen to obtain your RPC URL.")),(0,o.kt)("admonition",{title:"Secure your endpoints",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"You will create a constant for our Paymaster & Bundler endpoint obtained from cdp.portal.coinbase.com. The most secure way to do this is by using a proxy. For the purposes of this demo, hardcode it into our ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file. For product, we highly recommend using a ",(0,o.kt)("a",{parentName:"p",href:"https://www.smartwallet.dev/guides/paymasters"},"proxy service"),".")),(0,o.kt)("p",null,"You will also need the address of the entrypoint contract for Base. A full list of entrypoint contracts and their addresses can be found ",(0,o.kt)("a",{parentName:"p",href:"https://docs.alchemy.com/reference/factory-addresses"},"here"),"."),(0,o.kt)("p",null,"Add the following to lines of code after your import statements:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const rpcUrl = https://api.developer.coinbase.com/rpc/v1/base/<SPECIAL-KEY> //Paymaster & Bundler endpoint\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const baseEntryPoint = '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const baseFactoryAddress = '0x15Ba39375ee2Ab563E8873C8390be6f2E2F50232';\n")),(0,o.kt)("p",null,"Now, create a public client. Public clients enable our application to interact with the Ethereum blockchain. They use JSON-RPC API methods to perform actions such as retrieving block numbers, transactions, and reading from smart contracts. Learn more about this on viem."),(0,o.kt)("p",null,"Initialize a public client named ",(0,o.kt)("inlineCode",{parentName:"p"},"publicClient")," and set the chain to ",(0,o.kt)("inlineCode",{parentName:"p"},"base")," and the transport to our ",(0,o.kt)("inlineCode",{parentName:"p"},"rpcURL")," variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const publicClient = createPublicClient({\n  chain: base,\n  transport: http(rpcUrl),\n});\n")),(0,o.kt)("h3",{id:"create-two-smart-accounts"},"Create Two Smart Accounts"),(0,o.kt)("p",null,"Now, you are going to create two ",(0,o.kt)("inlineCode",{parentName:"p"},"SimpleAccounts")," for this demonstration. Collectively, these two accounts will help us test the security policies you set at both the global level and the per-account user operation level."),(0,o.kt)("p",null,"To do so, you'll first need two private keys that will be used to create the Smart Accounts using Foundry. Open a terminal and run the following command ",(0,o.kt)("strong",{parentName:"p"},"twice"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cast wallet new\n")),(0,o.kt)("p",null,"You will see something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> cast wallet new\nSuccessfully created new keypair.\nAddress: 0xD440D74620542...D6F005cfD9\nPrivate key: 0x01c9720c1dfa3c9...634793138897\n\n\n> cast wallet new\nSuccessfully created new keypair.\nAddress: 0x5f8e5bC8620542...D6F005cfD9\nPrivate key: 0xbcd6fbc1dfa3c9...634793138897\n")),(0,o.kt)("p",null,"Use the newly generated private keys as the parameter to the ",(0,o.kt)("inlineCode",{parentName:"p"},"privateKeyToSimpleSmartAccount")," function and set the factory address to"),(0,o.kt)("admonition",{title:"Secure your private keys",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Be sure to store your private keys somewhere safe. Committing these to a public code repository will give anyone access to your smart accounts."),(0,o.kt)("p",{parentName:"admonition"},"Saving them to a ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file is safest.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const simpleAccount = await privateKeyToSimpleSmartAccount(publicClient, {\n  privateKey: '<Your first key>',\n  factoryAddress: baseFactoryAddress, //Base v0.6\n  entryPoint: baseEntryPoint,\n});\n\nconst simpleAccount2 = await privateKeyToSimpleSmartAccount(publicClient, {\n  privateKey: '<Your second key>',\n  factoryAddress: baseFactoryAddress, //Base v0.6\n  entryPoint: baseEntryPoint,\n});\n")),(0,o.kt)("p",null,"Let\u2019s break down what\u2019s happening here:\nPrivate key : the private key to the wallet that your created either using Foundry or a wallet that you own. Either is fine."),(0,o.kt)("p",null,"Factory address is the address to the smart account factory deployed on base. Account factories are smart contracts that facilitate the creation of new wallet contracts. You make view a more comprehensive ",(0,o.kt)("a",{parentName:"p",href:"https://docs.alchemy.com/reference/factory-addresses"},"list of factory addresses")," on Alchemy."),(0,o.kt)("p",null,"Entrypoint is the entrypoint contract for Base."),(0,o.kt)("admonition",{title:"Find the correct entrypoint address",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Make an JSON RPC request to a node using the `` method to get the correct entrpoint contract. Here's an example for Base using a Coinbase Base Node:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},'curl --request POST \\\n     --url https://api.developer.coinbase.com/rpc/v1/base/<Your-Key> \\\n     --header \'Accept: application/json\' \\\n     --header \'Content-Type: application/json\' \\\n     --data \'{"id": 1, "jsonrpc": "2.0", "method": "eth_supportedEntryPoints", "params": []}\'\n'))),(0,o.kt)("h3",{id:"initialize-paymaster-and-create-accounts"},"Initialize Paymaster and Create Accounts"),(0,o.kt)("p",null,"Initialize the paymaster and smart account client for both smart accounts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const cloudPaymaster = createPimlicoPaymasterClient({\n  chain: base,\n  transport: http(rpcUrl),\n  entryPoint: baseEntryPoint,\n});\n\nconst smartAccountClient = createSmartAccountClient({\n  account: simpleAccount,\n  chain: base,\n  bundlerTransport: http(rpcUrl),\n  middleware: {\n    sponsorUserOperation: cloudPaymaster.sponsorUserOperation,\n  },\n});\n\nconst smartAccountClient2 = createSmartAccountClient({\n  account: simpleAccount2,\n  chain: base,\n  bundlerTransport: http(rpcUrl),\n  middleware: {\n    sponsorUserOperation: cloudPaymaster.sponsorUserOperation,\n  },\n});\n")),(0,o.kt)("p",null,"To sponsor transactions you will need the ABI and the address of the contracts you want to support."),(0,o.kt)("admonition",{title:"Sponsor any contract",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Feel free to use your own contract to interact with the Paymaster. For learning purposes, you will interact with an ERC-721 contract deployed on the Base mainnet. You will call the mintTo function, which takes an address as its only parameter.")),(0,o.kt)("p",null,"You will be interacting with the NFT + ABI from a simple NFT contract deployed at: ",(0,o.kt)("inlineCode",{parentName:"p"},"0x83bd615eb93eE1336acA53e185b03B54fF4A17e8")),(0,o.kt)("p",null,"Copy and paste the NFT's abi into ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const abi = [\n  {\n    type: 'constructor',\n    inputs: [\n      { name: '_name', type: 'string', internalType: 'string' },\n      { name: '_symbol', type: 'string', internalType: 'string' },\n    ],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    inputs: [\n      { name: 'spender', type: 'address', internalType: 'address' },\n      { name: 'id', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    inputs: [{ name: 'owner', type: 'address', internalType: 'address' }],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'currentTokenId',\n    inputs: [],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getApproved',\n    inputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    outputs: [{ name: '', type: 'address', internalType: 'address' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isApprovedForAll',\n    inputs: [\n      { name: '', type: 'address', internalType: 'address' },\n      { name: '', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'mintTo',\n    inputs: [{ name: 'recipient', type: 'address', internalType: 'address' }],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'name',\n    inputs: [],\n    outputs: [{ name: '', type: 'string', internalType: 'string' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'ownerOf',\n    inputs: [{ name: 'id', type: 'uint256', internalType: 'uint256' }],\n    outputs: [{ name: 'owner', type: 'address', internalType: 'address' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'safeTransferFrom',\n    inputs: [\n      { name: 'from', type: 'address', internalType: 'address' },\n      { name: 'to', type: 'address', internalType: 'address' },\n      { name: 'id', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'safeTransferFrom',\n    inputs: [\n      { name: 'from', type: 'address', internalType: 'address' },\n      { name: 'to', type: 'address', internalType: 'address' },\n      { name: 'id', type: 'uint256', internalType: 'uint256' },\n      { name: 'data', type: 'bytes', internalType: 'bytes' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'setApprovalForAll',\n    inputs: [\n      { name: 'operator', type: 'address', internalType: 'address' },\n      { name: 'approved', type: 'bool', internalType: 'bool' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'supportsInterface',\n    inputs: [{ name: 'interfaceId', type: 'bytes4', internalType: 'bytes4' }],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'symbol',\n    inputs: [],\n    outputs: [{ name: '', type: 'string', internalType: 'string' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'tokenURI',\n    inputs: [{ name: 'id', type: 'uint256', internalType: 'uint256' }],\n    outputs: [{ name: '', type: 'string', internalType: 'string' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    inputs: [\n      { name: 'from', type: 'address', internalType: 'address' },\n      { name: 'to', type: 'address', internalType: 'address' },\n      { name: 'id', type: 'uint256', internalType: 'uint256' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      { name: 'id', type: 'uint256', indexed: true, internalType: 'uint256' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'ApprovalForAll',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'operator',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      { name: 'approved', type: 'bool', indexed: false, internalType: 'bool' },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      { name: 'from', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'to', type: 'address', indexed: true, internalType: 'address' },\n      { name: 'id', type: 'uint256', indexed: true, internalType: 'uint256' },\n    ],\n    anonymous: false,\n  },\n];\n")),(0,o.kt)("h3",{id:"encode-the-function-call"},"Encode the Function Call"),(0,o.kt)("p",null,"Encode the ",(0,o.kt)("inlineCode",{parentName:"p"},"mintTo")," function call with the parameter being the address of the first smart wallet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const callData = encodeFunctionData({\n  abi: abi,\n  functionName: 'mintTo',\n  args: [smartAccountClient.account.address],\n});\n")),(0,o.kt)("p",null,"Create a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"sendTransactionFromAccount1")," in order to send the transaction request and store the response in a variable named ",(0,o.kt)("inlineCode",{parentName:"p"},"txHash"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"async function sendTransactionFromAccount1() {\n  try {\n    const txHash = await smartAccountClient.sendTransaction({\n      account: smartAccountClient.account,\n      to: '0x83bd615eb93eE1336acA53e185b03B54fF4A17e8',\n      data: callData,\n      value: 0n,\n    });\n\n    console.log('\u2705 Transaction successfully sponsored for account 1!');\n    console.log(`\ud83d\udd0d View on Etherscan: https://basescan.org/tx/${txHash}`);\n  } catch (error) {\n    console.log('Transaction failed from account 1: ', error);\n  }\n}\n")),(0,o.kt)("p",null,"Call the function at the bottom of the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"async function sendTransactionFromAccount1() {\n  // previous lines of code ...\n}\n\nsendTransactionFromAccount1();\n")),(0,o.kt)("p",null,"Run the following line of code from your terminal, ensuring you are in the root folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node index.js\n")),(0,o.kt)("p",null,"The first attempt should be successful with the following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u2705 Transaction successfully sponsored!\n\ud83d\udd0d View on Etherscan: https://basescan.org/tx/0x1439431b0bf333f8106bc1815a532fdec18d62c3ee1c07a10d07711c6e5a2e56\n")),(0,o.kt)("p",null,"Run the script again but this time you should get an error that contains a ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," similar to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "code": -32001,\n  "message": "request denied - rejected due to maximum per address transaction count reached"\n}\n')),(0,o.kt)("p",null,"Awesome! Errors, in this case, are good. This means our Paymaster policy works and prevents unwanted sponsorship."),(0,o.kt)("p",null,"Navigate back to your CDP portal and update the number of UserOperations to ",(0,o.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,o.kt)("p",null,"Give it about 10-15 minutes for the changes to take affect then run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," again to send a new transaction."),(0,o.kt)("p",null,"It should return a successful prompt:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u2705 Transaction successfully sponsored for account 1!\n\ud83d\udd0d View on Etherscan: https://basescan.org/tx/0x1439431b0bf333f8106bc1815a532fdec18d62c3ee1c07a10d07711c6e5a2e56\n")),(0,o.kt)("p",null,"Looking back at our Paymaster configuration, you'll see that you've used about $0.03 of our $0.05 global limit, and for account 1, you've hit our UserOperation limit."),(0,o.kt)("p",null,"Now, let's send another transaction, this time using the second account."),(0,o.kt)("p",null,"Before you do that, let's update the per-wallet UserOperation limit to 10. Since gas is cheap on Base, you may need to do a few transactions before you hit our global limit of $0.07."),(0,o.kt)("admonition",{title:"Increase the global limit",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You may get a warning to increase the global limit and that is okay for now..."),(0,o.kt)("p",{parentName:"admonition"},"[Image-of-policy]")),(0,o.kt)("p",null,"Navigate back to the ",(0,o.kt)("a",{parentName:"p",href:"https://portal.cdp.coinbase.com/products/bundler-and-paymaster"},"UI")," and update the policy to 10 and hit the ",(0,o.kt)("inlineCode",{parentName:"p"},"Save")," button."),(0,o.kt)("p",null,"[image of updated policy]"),(0,o.kt)("h3",{id:"testing-global-limits"},"Testing Global Limits"),(0,o.kt)("p",null,"Back in your code editor, open the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file and create a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"sendTransactionFromAccount2")," and run place it at the bottom on the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// previous lines of code ...\n\nasync function sendTransactionFromAccount2() {\n  try {\n    const txHash2 = await smartAccountClient2.sendTransaction({\n      account: smartAccountClient2.account,\n      to: '0x83bd615eb93eE1336acA53e185b03B54fF4A17e8',\n      data: callData,\n      value: 0n,\n    });\n\n    console.log('\u2705 Transaction successfully sponsored for account 2!');\n    console.log(`\ud83d\udd0d View on Etherscan: https://basescan.org/tx/${txHash2}`);\n  } catch (error) {\n    console.log('Transaction failed from account 2: ', error);\n  }\n}\n\n// sendTransactionFromAccount1();\nsendTransactionFromAccount2();\n")),(0,o.kt)("p",null,"Run the ",(0,o.kt)("inlineCode",{parentName:"p"},"sendTransactionFromAccount2()")," function a few times to help reach your global limit."),(0,o.kt)("p",null,"You should eventually encounter an error similar to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "code": -32001,\n  "message": "request denied - rejected due to max global usd spend limit reached"\n}\n')),(0,o.kt)("p",null,"Congrats! Your global limit has been hit."),(0,o.kt)("p",null,"Navigate back to the cloud portal and increase the global policy to your choosing. Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," again and you should be able to successfully sponsor a transaction."),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"In this tutorial, you learned to set up and configure the Base Paymaster on the Coinbase Developer Platform, allowing you to sponsor gasless transactions for your users. This enhances the user experience by abstracting away gas fees and making transactions more accessible and cost-effective."),(0,o.kt)("hr",null))}d.isMDXComponent=!0},58314:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cdp-allowlist-contract-f483e8523ac032f0056dc399758348c3.png"},58769:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cdp-config-c7c0d0b4493aee33605afc6f676c8fae.png"},4642:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cdp-global-user-limits-0bf8e490a81d6dc489201441b2d29e27.png"},81453:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cdp-paymaster-c2114f710a2eba8c5118854f42c98024.png"},21621:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cdp-select-project-ae1271296b3bfac7749d9a0d10787d37.png"}}]);