{
  "address": "0x823E5E2E812e72D7392302E604CF4eE76e0d3e82",
  "abi": [
    {
      "inputs": [],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d389aa265d140272a9b2844992ce46b527bc5a5b073be3ecab2911ad42bfa44",
  "receipt": {
    "to": null,
    "from": "0x0919C594E549545374772246B0D433a4988A0eC9",
    "contractAddress": "0x823E5E2E812e72D7392302E604CF4eE76e0d3e82",
    "transactionIndex": 1,
    "gasUsed": "1166484",
    "logsBloom": "0x
    "blockHash": "0xe30f482d2eea8bb3f058f878d334719642a299388cc184d426b3c55ddba95d87",
    "transactionHash": "0x0d389aa265d140272a9b2844992ce46b527bc5a5b073be3ecab2911ad42bfa44",
    "logs": [],
    "blockNumber": 4578611,
    "cumulativeGasUsed": "1213385",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6a581879d712a9c25e4fb247f22274cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exemplars/New.sol\":\"AddressBookFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Exemplars/New.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\n// Imports formatted for Remix\\n// import \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\\";\\n// import \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract AddressBook is Ownable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Contact {\\n        uint id;\\n        string firstName;\\n        string lastName;\\n        uint[] phoneNumbers;\\n    }\\n\\n    mapping(uint => Contact) public contacts;\\n    EnumerableSet.UintSet private contactIds;\\n    uint currentId = 0;\\n\\n    error ContactNotFound(uint id);\\n\\n    constructor(address _owner) {\\n        transferOwnership(_owner);\\n    }\\n\\n    function addContact(\\n        string memory _firstName,\\n        string memory _lastName,\\n        uint[] memory _phoneNumbers\\n    ) public onlyOwner {\\n        contacts[currentId] = Contact(\\n            currentId,\\n            _firstName,\\n            _lastName,\\n            _phoneNumbers\\n        );\\n        contactIds.add(currentId);\\n        currentId++;\\n    }\\n\\n    function deleteContact(uint _id) public onlyOwner {\\n        if (!contactIds.contains(_id)) {\\n            revert ContactNotFound(_id);\\n        }\\n        delete contacts[_id];\\n        contactIds.remove(_id);\\n    }\\n\\n    function getContact(uint _id) public view returns (Contact memory) {\\n        return contacts[_id];\\n    }\\n\\n    function getAllContacts() public view returns (Contact[] memory) {\\n        uint[] memory contactIdList = contactIds.values();\\n        uint numContacts = contactIdList.length;\\n        Contact[] memory allContacts = new Contact[](numContacts);\\n\\n        for (uint i = 0; i < numContacts; i++) {\\n            allContacts[i] = contacts[contactIdList[i]];\\n        }\\n\\n        return allContacts;\\n    }\\n}\\n\\ncontract AddressBookFactory {\\n    function deploy() public returns (address) {\\n        AddressBook deployed = new AddressBook(msg.sender);\\n        return address(deployed);\\n    }\\n}\\n\",\"keccak256\":\"0x42bfc274b349d28cf209a9308525cd7e2fd0da0d3e3e6e8e8ab4fb3590c559a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061142a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063775c300c14610030575b600080fd5b610038610061565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008033604051610071906100b1565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103906000f0801580156100aa573d6000803e3d6000fd5b5092915050565b611336806100bf8339019056fe608060405260006004553480156200001657600080fd5b506040516200133638038062001336833981016040819052620000399162000187565b620000443362000056565b6200004f81620000a6565b50620001b9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000b062000129565b6001600160a01b0381166200011b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001268162000056565b50565b6000546001600160a01b03163314620001855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000112565b565b6000602082840312156200019a57600080fd5b81516001600160a01b0381168114620001b257600080fd5b9392505050565b61116d80620001c96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063e0f478cb1161005b578063e0f478cb146100dd578063e6505e1e146100ff578063ef1d6ddd1461011f578063f2fde38b1461013457600080fd5b80633f06f6e81461008d578063715018a6146100a25780638da5cb5b146100aa578063b9ed6fca146100ca575b600080fd5b6100a061009b366004610cd7565b610147565b005b6100a06101f8565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a06100d8366004610dc4565b61020c565b6100f06100eb366004610dc4565b6102ac565b6040516100c193929190610e23565b61011261010d366004610dc4565b6103de565b6040516100c19190610ede565b6101276105ad565b6040516100c19190610ef1565b6100a0610142366004610f55565b61082f565b61014f6108bf565b604080516080810182526004548082526020808301878152838501879052606084018690526000928352600191829052939091208251815592519192919082019061019a9082611009565b50604082015160028201906101af9082611009565b50606082015180516101cb916003840191602090910190610b6c565b50506004546101dd9150600290610919565b50600480549060006101ee836110df565b9190505550505050565b6102006108bf565b61020a600061092e565b565b6102146108bf565b61021f600282610996565b61025d576040517ff55dec00000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60008181526001602081905260408220828155919061027e90830182610bb7565b61028c600283016000610bb7565b61029a600383016000610bf1565b506102a890506002826109ae565b5050565b6001602081905260009182526040909120805491810180546102cd90610f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546102f990610f7e565b80156103465780601f1061031b57610100808354040283529160200191610346565b820191906000526020600020905b81548152906001019060200180831161032957829003601f168201915b50505050509080600201805461035b90610f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461038790610f7e565b80156103d45780601f106103a9576101008083540402835291602001916103d4565b820191906000526020600020905b8154815290600101906020018083116103b757829003601f168201915b5050505050905083565b6104096040518060800160405280600081526020016060815260200160608152602001606081525090565b6000828152600160208181526040928390208351608081019094528054845291820180549184019161043a90610f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461046690610f7e565b80156104b35780601f10610488576101008083540402835291602001916104b3565b820191906000526020600020905b81548152906001019060200180831161049657829003601f168201915b505050505081526020016002820180546104cc90610f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546104f890610f7e565b80156105455780601f1061051a57610100808354040283529160200191610545565b820191906000526020600020905b81548152906001019060200180831161052857829003601f168201915b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561059d57602002820191906000526020600020905b815481526020019060010190808311610589575b5050505050815250509050919050565b606060006105bb60026109ba565b805190915060008167ffffffffffffffff8111156105db576105db610c20565b60405190808252806020026020018201604052801561063757816020015b6106246040518060800160405280600081526020016060815260200160608152602001606081525090565b8152602001906001900390816105f95790505b50905060005b82811015610827576001600085838151811061065b5761065b6110f8565b602002602001015181526020019081526020016000206040518060800160405290816000820154815260200160018201805461069690610f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546106c290610f7e565b801561070f5780601f106106e45761010080835404028352916020019161070f565b820191906000526020600020905b8154815290600101906020018083116106f257829003601f168201915b5050505050815260200160028201805461072890610f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461075490610f7e565b80156107a15780601f10610776576101008083540402835291602001916107a1565b820191906000526020600020905b81548152906001019060200180831161078457829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156107f957602002820191906000526020600020905b8154815260200190600101908083116107e5575b505050505081525050828281518110610814576108146110f8565b602090810291909101015260010161063d565b509392505050565b6108376108bf565b6001600160a01b0381166108b35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610254565b6108bc8161092e565b50565b6000546001600160a01b0316331461020a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610254565b600061092583836109ce565b90505b92915050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008181526001830160205260408120541515610925565b60006109258383610a1d565b606060006109c783610b10565b9392505050565b6000818152600183016020526040812054610a1557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610928565b506000610928565b60008181526001830160205260408120548015610b06576000610a4160018361110e565b8554909150600090610a559060019061110e565b9050818114610aba576000866000018281548110610a7557610a756110f8565b9060005260206000200154905080876000018481548110610a9857610a986110f8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610acb57610acb611121565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610928565b6000915050610928565b606081600001805480602002602001604051908101604052809291908181526020018280548015610b6057602002820191906000526020600020905b815481526020019060010190808311610b4c575b50505050509050919050565b828054828255906000526020600020908101928215610ba7579160200282015b82811115610ba7578251825591602001919060010190610b8c565b50610bb3929150610c0b565b5090565b508054610bc390610f7e565b6000825580601f10610bd3575050565b601f0160209004906000526020600020908101906108bc9190610c0b565b50805460008255906000526020600020908101906108bc91905b5b80821115610bb35760008155600101610c0c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c5f57610c5f610c20565b604052919050565b600082601f830112610c7857600080fd5b813567ffffffffffffffff811115610c9257610c92610c20565b610ca5601f8201601f1916602001610c36565b818152846020838601011115610cba57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215610cec57600080fd5b833567ffffffffffffffff80821115610d0457600080fd5b610d1087838801610c67565b9450602091508186013581811115610d2757600080fd5b610d3388828901610c67565b945050604086013581811115610d4857600080fd5b8601601f81018813610d5957600080fd5b803582811115610d6b57610d6b610c20565b8060051b9250610d7c848401610c36565b818152928201840192848101908a851115610d9657600080fd5b928501925b84841015610db457833582529285019290850190610d9b565b8096505050505050509250925092565b600060208284031215610dd657600080fd5b5035919050565b6000815180845260005b81811015610e0357602081850181015186830182015201610de7565b506000602082860101526020601f19601f83011685010191505092915050565b838152606060208201526000610e3c6060830185610ddd565b8281036040840152610e4e8185610ddd565b9695505050505050565b805182526000602080830151608082860152610e776080860182610ddd565b905060408401518582036040870152610e908282610ddd565b606086810151888303918901919091528051808352908501935060009250908401905b80831015610ed35783518252928401926001929092019190840190610eb3565b509695505050505050565b6020815260006109256020830184610e58565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015610f4857603f19888603018452610f36858351610e58565b94509285019290850190600101610f1a565b5092979650505050505050565b600060208284031215610f6757600080fd5b81356001600160a01b03811681146109c757600080fd5b600181811c90821680610f9257607f821691505b602082108103610fb257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611004576000816000526020600020601f850160051c81016020861015610fe15750805b601f850160051c820191505b8181101561100057828155600101610fed565b5050505b505050565b815167ffffffffffffffff81111561102357611023610c20565b611037816110318454610f7e565b84610fb8565b602080601f83116001811461106c57600084156110545750858301515b600019600386901b1c1916600185901b178555611000565b600085815260208120601f198616915b8281101561109b5788860151825594840194600190910190840161107c565b50858210156110b95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6000600182016110f1576110f16110c9565b5060010190565b634e487b7160e01b600052603260045260246000fd5b81810381811115610928576109286110c9565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c1b93fbe88b774dd36253cffa3cbe74311f8ffbfe8b70926e82be907a110773664736f6c63430008170033a264697066735822122065eefaff6f9cf8a6885e85d01c29866c822723b1d843a707e4d5375d9e2ac27e64736f6c63430008170033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}