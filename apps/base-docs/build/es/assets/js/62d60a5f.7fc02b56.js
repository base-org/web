"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[9294],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7896),r=(n(2784),n(30876));const o={title:"ethers.js",slug:"/tools/ethers",description:"Documentation for using ethers.js, a JavaScript library for EVM-compatible blockchain interactions. This page covers installation, setup, connecting to the Base network, reading and writing blockchain data, and interacting with smart contracts.",keywords:["ethers.js","JavaScript library","Base network","Base mainnet","Base testnet","smart contracts","EVM-compatible","blockchain","JsonRpcProvider","Signer","ABI","interacting with smart contract"],hide_table_of_contents:!0},s="ethers.js",i={unversionedId:"tools/ethers",id:"tools/ethers",title:"ethers.js",description:"Documentation for using ethers.js, a JavaScript library for EVM-compatible blockchain interactions. This page covers installation, setup, connecting to the Base network, reading and writing blockchain data, and interacting with smart contracts.",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/tools/ethers.md",sourceDirName:"tools",slug:"/tools/ethers",permalink:"/es/docs/tools/ethers",draft:!1,tags:[],version:"current",frontMatter:{title:"ethers.js",slug:"/tools/ethers",description:"Documentation for using ethers.js, a JavaScript library for EVM-compatible blockchain interactions. This page covers installation, setup, connecting to the Base network, reading and writing blockchain data, and interacting with smart contracts.",keywords:["ethers.js","JavaScript library","Base network","Base mainnet","Base testnet","smart contracts","EVM-compatible","blockchain","JsonRpcProvider","Signer","ABI","interacting with smart contract"],hide_table_of_contents:!0},sidebar:"developers",previous:{title:"thirdweb CLI",permalink:"/es/docs/tools/thirdweb-cli"},next:{title:"thirdweb SDK",permalink:"/es/docs/tools/thirdweb-sdk"}},c={},l=[{value:"Instalar",id:"instalar",level:2},{value:"Configuraci\xf3n",id:"configuraci\xf3n",level:2},{value:"Conectarse a Base",id:"conectarse-a-base",level:2},{value:"Leer datos de la blockchain",id:"leer-datos-de-la-blockchain",level:2},{value:"Escribir datos en la blockchain",id:"escribir-datos-en-la-blockchain",level:2},{value:"Interactuar con contratos inteligentes",id:"interactuar-con-contratos-inteligentes",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ethersjs"},"ethers.js"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v5/"},"ethers.js")," es una biblioteca de JavaScript que permite a los desarrolladores interactuar con redes blockchain compatibles con EVM."),(0,r.kt)("p",null,"Puedes usar ethers.js para interactuar con contratos inteligentes desplegados en la red Base."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"instalar"},"Instalar"),(0,r.kt)("p",null,"Para instalar ethers.js ejecuta el siguiente comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save ethers\n")),(0,r.kt)("h2",{id:"configuraci\xf3n"},"Configuraci\xf3n"),(0,r.kt)("p",null,"Antes de que puedas empezar a usar ethers.js, necesitas importarlo en tu proyecto."),(0,r.kt)("p",null,"Agrega la siguiente l\xednea de c\xf3digo en la parte superior de tu archivo para importar ethers.js:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const ethers = require('ethers');\n")),(0,r.kt)("h2",{id:"conectarse-a-base"},"Conectarse a Base"),(0,r.kt)("p",null,"Puedes conectarte a Base instanciando un nuevo objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonRpcProvider")," de ethers.js con una URL RPC de la red Base:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const ethers = require('ethers');\n\nconst url = 'https://mainnet.base.org';\nconst provider = new ethers.providers.JsonRpcProvider(url);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Para conectarse alternativamente a Base Sepolia (testnet), cambia la URL anterior de ",(0,r.kt)("inlineCode",{parentName:"p"},"https://mainnet.base.org")," a ",(0,r.kt)("inlineCode",{parentName:"p"},"https://sepolia.base.org"),".")),(0,r.kt)("h2",{id:"leer-datos-de-la-blockchain"},"Leer datos de la blockchain"),(0,r.kt)("p",null,"Una vez que hayas creado un proveedor, puedes usarlo para leer datos de la red Base."),(0,r.kt)("p",null,"Por ejemplo, puedes usar el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"getBlockNumber")," para obtener el \xfaltimo bloque:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function getLatestBlock() {\n  const latestBlock = await provider.getBlockNumber();\n  console.log(latestBlock);\n}\n")),(0,r.kt)("h2",{id:"escribir-datos-en-la-blockchain"},"Escribir datos en la blockchain"),(0,r.kt)("p",null,"Para escribir datos en la red Base, necesitas crear un ",(0,r.kt)("inlineCode",{parentName:"p"},"Signer"),"."),(0,r.kt)("p",null,"Puedes crear un ",(0,r.kt)("inlineCode",{parentName:"p"},"Signer")," instanciando un nuevo objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Wallet")," de ethers.js, proporcion\xe1ndole una clave privada y un ",(0,r.kt)("inlineCode",{parentName:"p"},"Provider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const privateKey = 'PRIVATE_KEY';\nconst signer = new ethers.Wallet(privateKey, provider);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"PRIVATE_KEY")," es la clave privada de la billetera a usar al crear el firmante.")),(0,r.kt)("h2",{id:"interactuar-con-contratos-inteligentes"},"Interactuar con contratos inteligentes"),(0,r.kt)("p",null,"Puedes usar ethers.js para interactuar con un contrato inteligente en Base instanciando un objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract")," usando el ABI y la direcci\xf3n de un contrato desplegado:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const abi = [\n\u2026 // ABI of deployed contract\n];\n\nconst contractAddress = "CONTRACT_ADDRESS"\n\n// read only\nconst contract = new ethers.Contract(contractAddress, abi, provider);\n')),(0,r.kt)("p",null,"Para contratos de solo escritura, proporciona un objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Signer")," en lugar de un objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Provider"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// write only\nconst contract = new ethers.Contract(contractAddress, abi, signer);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"CONTRACT_ADDRESS")," es la direcci\xf3n del contrato desplegado.")),(0,r.kt)("p",null,"Una vez que hayas creado un objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract"),", puedes usarlo para llamar a los m\xe9todos deseados en el contrato inteligente:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function setValue(value) {\n  const tx = await contract.set(value);\n  console.log(tx.hash);\n}\n\nasync function getValue() {\n  const value = await contract.get();\n  console.log(value.toString());\n}\n")))}u.isMDXComponent=!0}}]);