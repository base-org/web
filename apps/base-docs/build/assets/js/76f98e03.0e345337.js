"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[1458],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=i,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},82064:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(7896),i=(t(2784),t(30876));const o={title:"Function Modifiers",description:"Build custom function modifiers to efficiently modify functionality.",hide_table_of_contents:!1},a=void 0,l={unversionedId:"docs/advanced-functions/function-modifiers",id:"docs/advanced-functions/function-modifiers",title:"Function Modifiers",description:"Build custom function modifiers to efficiently modify functionality.",source:"@site/base-camp/docs/advanced-functions/function-modifiers.md",sourceDirName:"docs/advanced-functions",slug:"/docs/advanced-functions/function-modifiers",permalink:"/base-camp/docs/advanced-functions/function-modifiers",draft:!1,tags:[],version:"current",frontMatter:{title:"Function Modifiers",description:"Build custom function modifiers to efficiently modify functionality.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Function Modifiers",permalink:"/base-camp/docs/advanced-functions/function-modifiers-vid"},next:{title:"Structs",permalink:"/base-camp/docs/structs/structs-vid"}},s={},d=[{value:"Objectives",id:"objectives",level:2},{value:"Adding a Simple OnlyOwner Modifier",id:"adding-a-simple-onlyowner-modifier",level:2},{value:"Adding an Owner",id:"adding-an-owner",level:3},{value:"Creating an <code>onlyOwner</code> Modifier",id:"creating-an-onlyowner-modifier",level:3},{value:"Modifiers and Variables",id:"modifiers-and-variables",level:2},{value:"Modifiers with Parameters",id:"modifiers-with-parameters",level:3},{value:"Independent Scope",id:"independent-scope",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Function modifiers allow you to efficiently change the behavior of functions. In some ways, it's similar to inheritance, but there are restrictions, particularly in variable scope."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"objectives"},"Objectives"),(0,i.kt)("p",null,"By the end of this lesson you should be able to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use modifiers to efficiently add functionality to multiple functions")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"adding-a-simple-onlyowner-modifier"},"Adding a Simple OnlyOwner Modifier"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"public")," functions can be called by ",(0,i.kt)("strong",{parentName:"p"},"anyone"),", without restriction. Often this is desirable. You want any user to be able to see what NFTs are for sale on your platform, sign up for a service, or read various items stored in state."),(0,i.kt)("p",null,"However, there will be many functions you ",(0,i.kt)("strong",{parentName:"p"},"don't")," want any user to be able to do, such as setting the fee for using the app, or withdrawing all of the funds in the contract! A common pattern to protect these functions is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"modifier"),"s to make sure that only the owner can call these functions."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"For a production app, you'll want to use a more robust implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"onlyOwner"),", such as the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol"},"one provided by OpenZeppelin"),".")),(0,i.kt)("h3",{id:"adding-an-owner"},"Adding an Owner"),(0,i.kt)("p",null,"The address of the deployer of a contract is ",(0,i.kt)("strong",{parentName:"p"},"not")," included as an accessible property. To make it available, add it as a state variable and assign ",(0,i.kt)("inlineCode",{parentName:"p"},"msg.sender")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"constructor"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Modifiers {\n    address owner;\n\n    constructor () {\n        owner = msg.sender;\n    }\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"creating-an-onlyowner-modifier"},"Creating an ",(0,i.kt)("inlineCode",{parentName:"h3"},"onlyOwner")," Modifier"),(0,i.kt)("p",null,"[Modifiers]"," are very similar to functions and are declared with the ",(0,i.kt)("inlineCode",{parentName:"p"},"modifier")," keyword. The modifier can run any Solidity code, including functions, and is allowed to modify state. Modifiers must have a special ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," character, which serves as a placeholder for where the code contained within the modified function will run."),(0,i.kt)("p",null,"Create a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"onlyOwner")," modifier, which returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"error")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"NotOwner")," with the sending address if the sender is not the owner."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error NotOwner(address _msgSender);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"modifier onlyOwner {\n    if (msg.sender != owner) {\n        revert NotOwner(msg.sender);\n    }\n    _;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"Test your ",(0,i.kt)("inlineCode",{parentName:"p"},"modifier")," by adding a function that uses it:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Reveal code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'function iOwnThis() public view onlyOwner returns (string memory) {\n    return "You own this!";\n}\n'))),(0,i.kt)("br",null),(0,i.kt)("p",null,"To test, deploy your contract and call the ",(0,i.kt)("inlineCode",{parentName:"p"},"iOwnThis"),' function. You should see the message "You own this!".'),(0,i.kt)("p",null,"Next, switch the ",(0,i.kt)("em",{parentName:"p"},"Account"),", and try the function again. You should see an error in the console:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'call to Modifiers.iOwnThis errored: VM error: revert.\n\nrevert\n    The transaction has been reverted to the initial state.\nError provided by the contract:\nNotOwner\nParameters:\n{\n "_msgSender": {\n  "value": "0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db"\n }\n}\nDebug the transaction to get more information.\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Always verify the output of a function call in the console. The result that appears under the button for the function is convenient, but it does ",(0,i.kt)("strong",{parentName:"p"},"not")," clear or change if a subsequent call reverts.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifiers-and-variables"},"Modifiers and Variables"),(0,i.kt)("p",null,"Modifiers can have parameters, which essentially work the same as in functions. These parameters can be independent values, or they can overlap with the arguments provided to a function call."),(0,i.kt)("h3",{id:"modifiers-with-parameters"},"Modifiers with Parameters"),(0,i.kt)("p",null,"Modifier parameters can be the arguments provided to the functions they modify. You can perform calculations and trigger errors based on these values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error NotEven(uint number);\n\nmodifier onlyEven(uint _number) {\n    if(_number % 2 != 0) {\n        revert NotEven(_number);\n    }\n    _;\n}\n\nfunction halver(uint _number) public pure onlyEven(_number) returns (uint) {\n    return _number / 2;\n}\n")),(0,i.kt)("h3",{id:"independent-scope"},"Independent Scope"),(0,i.kt)("p",null,"While ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiers")," are used to modify functions and can share inputs, they have separate scopes. The following example will ",(0,i.kt)("strong",{parentName:"p"},"not")," work:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// Bad code example, does not work\nmodifier doubler(uint _number) {\n    _number *= 2;\n    _;\n}\n\nfunction modifierDoubler(uint _number) public pure doubler(_number) returns (uint) {\n    return _number; // Returns the original number, NOT number * 2\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Function ",(0,i.kt)("inlineCode",{parentName:"p"},"modifier"),"s are an efficient and reusable way to add checks, trigger errors, and control function execution. In this lesson, you've seen examples of how they can be used to abort execution under certain conditions. You've also learned that they have separate scopes and cannot be used to modify variables within the function they modify."))}p.isMDXComponent=!0}}]);