"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[1058],{82247:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>g});var n=a(14041);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=s(a),p=r,g=h["".concat(c,".").concat(p)]||h[p]||u[p]||o;return a?n.createElement(g,l(l({ref:t},d),{},{components:a})):n.createElement(g,l({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[h]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},90510:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=a(89575),r=(a(14041),a(82247));const o={title:"Hardhat Forking",description:"Learn how to fork",hide_table_of_contents:!1},l=void 0,i={unversionedId:"docs/hardhat-forking/hardhat-forking",id:"docs/hardhat-forking/hardhat-forking",title:"Hardhat Forking",description:"Learn how to fork",source:"@site/base-camp/docs/hardhat-forking/hardhat-forking.md",sourceDirName:"docs/hardhat-forking",slug:"/docs/hardhat-forking/",permalink:"/base-camp/docs/hardhat-forking/",draft:!1,tags:[],version:"current",frontMatter:{title:"Hardhat Forking",description:"Learn how to fork",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Forking Mainnet",permalink:"/base-camp/docs/hardhat-forking/mainnet-forking-vid"},next:{title:"Overview",permalink:"/base-camp/docs/introduction-to-solidity/introduction-to-solidity-overview"}},c={},s=[{value:"Objectives",id:"objectives",level:2},{value:"Overview",id:"overview",level:2},{value:"Creating the Balance Reader contract",id:"creating-the-balance-reader-contract",level:2},{value:"Configuring Hardhat to support forking",id:"configuring-hardhat-to-support-forking",level:2},{value:"Creating a test for the BalanceReader.sol contract",id:"creating-a-test-for-the-balancereadersol-contract",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"See also",id:"see-also",level:2}],d={toc:s},h="wrapper";function u(e){let{components:t,...o}=e;return(0,r.yg)(h,(0,n.A)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"In this article, you'll learn how to fork smart contracts in Ethereum mainnet using Hardhat."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"objectives"},"Objectives"),(0,r.yg)("p",null,"By the end of this lesson, you should be able to:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Use Hardhat Network to create a local fork of mainnet and deploy a contract to it"),(0,r.yg)("li",{parentName:"ul"},"Utilize Hardhat forking features to configure the fork for several use cases")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"Hardhat forking is a powerful feature that allows developers to create a local replica or fork of the Ethereum network or any other EVM-compatible Blockchain. By using this feature, you can develop smart contracts that rely on smart contracts that are already deployed to a particular network."),(0,r.yg)("p",null,"You will create a BalanceReader.sol contract that reads the USDC balance of a particular holder."),(0,r.yg)("p",null,"In order to achieve that, you need to:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create the BalanceReader.sol contract"),(0,r.yg)("li",{parentName:"ul"},"Configure Hardhat to support forking"),(0,r.yg)("li",{parentName:"ul"},"Create a test for the BalanceReader.sol contract")),(0,r.yg)("p",null,"Hardhat forking also has other capabilities like:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"hardhat_impersonateAccount (useful to impersonate an account and others)"),(0,r.yg)("li",{parentName:"ul"},"hardhat_stopImpersonatingAccount"),(0,r.yg)("li",{parentName:"ul"},"hardhat_setNonce"),(0,r.yg)("li",{parentName:"ul"},"hardhat_setBalance"),(0,r.yg)("li",{parentName:"ul"},"hardhat_setCode"),(0,r.yg)("li",{parentName:"ul"},"hardhat_setStorageAt")),(0,r.yg)("p",null,"Those won't be covered in this guide, however it's recommended to explore them a bit more in the following link:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://hardhat.org/hardhat-network/guides/mainnet-forking.html"},"https://hardhat.org/hardhat-network/guides/mainnet-forking.html"))),(0,r.yg)("h2",{id:"creating-the-balance-reader-contract"},"Creating the Balance Reader contract"),(0,r.yg)("p",null,"The BalanceReader contract is created as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'pragma solidity 0.8.9;\n\nimport "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n\ncontract BalanceReader {\n    function getERC20BalanceOf(address _account, address _tokenAddress)\n        external\n        view\n        returns (uint256)\n    {\n        // we create an instance only using the interface and the address\n        return IERC20(_tokenAddress).balanceOf(_account);\n    }\n}\n')),(0,r.yg)("p",null,"You simply pass the address of an account and the address of a token, then you get and return the balance."),(0,r.yg)("p",null,"You will need to install @openzeppelin by running:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @openzeppelin/contracts\n")),(0,r.yg)("p",null,"Then, check that everything is working correctly by running:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npx hardhat compile\n")),(0,r.yg)("p",null,"You should get:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"Generating typings for: 2 artifacts in dir: typechain-types for target: ethers-v6\nSuccessfully generated 18 typings!\nCompiled 2 Solidity files successfully\n")),(0,r.yg)("h2",{id:"configuring-hardhat-to-support-forking"},"Configuring Hardhat to support forking"),(0,r.yg)("p",null,"By default, Hardhat uses a network called ",(0,r.yg)("inlineCode",{parentName:"p"},"hardhat"),". You must change its default configuration by going to the ",(0,r.yg)("inlineCode",{parentName:"p"},"hardhat.config.ts")," file and include the following in the network:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'hardhat: {\n    forking: {\n        url: `https://eth-mainnet.g.alchemy.com/v2/${process.env.ALCHEMY_MAINNET_KEY ?? ""}`,\n        enabled: true\n    }\n},\n')),(0,r.yg)("p",null,"Be aware that you need to have an ",(0,r.yg)("inlineCode",{parentName:"p"},"ALCHEMY_MAINNET_KEY")," in your .env file. You can get one directly from ",(0,r.yg)("a",{parentName:"p",href:"https://www.alchemy.com/"},"Alchemy"),"."),(0,r.yg)("p",null,"Also notice that forking is enabled by specifying ",(0,r.yg)("inlineCode",{parentName:"p"},"enabled: true"),", however this value can be changed via environment variables."),(0,r.yg)("h2",{id:"creating-a-test-for-the-balancereadersol-contract"},"Creating a test for the BalanceReader.sol contract"),(0,r.yg)("p",null,"Create a test file in the test folder called ",(0,r.yg)("inlineCode",{parentName:"p"},"BalanceReader.ts")," and include the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Signer } from 'ethers';\nimport { ethers } from 'hardhat';\n\nimport { BalanceReader, BalanceReader__factory } from '../typechain-types';\n\ndescribe('BalanceReader tests', () => {\n  let instance: BalanceReader;\n  let accounts: Signer[];\n\n  // Configure the addresses we can to check balances for\n  const USDC_MAINNET_ADDRESS = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'; // https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\n  const ARBITRUM_ONE_GATEWAY = '0xcEe284F754E854890e311e3280b767F80797180d';\n  const USDC_DECIMALS = 6;\n\n  it('gets arbitrum gateway balance', async () => {\n    // We get signers as in a normal test\n    accounts = await ethers.getSigners();\n    const factory = new BalanceReader__factory(accounts[0]);\n\n    // We deploy the contract to our local test environment\n    instance = await factory.deploy();\n\n    // Our contract will be able to check the balances of the mainnet deployed contracts and address\n    const balance = await instance.getERC20BalanceOf(ARBITRUM_ONE_GATEWAY, USDC_MAINNET_ADDRESS);\n    const balanceAsString = ethers.formatUnits(balance, USDC_DECIMALS);\n\n    console.log(\n      'The USDC Balance of Arbitrum Gateway is $',\n      Number(balanceAsString).toLocaleString(),\n    );\n  });\n});\n")),(0,r.yg)("p",null,"In this example, the ",(0,r.yg)("a",{parentName:"p",href:"https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"},"USDC address")," is used and since USDC is an ERC-20 token, you can explore the token holders of that particular token directly in Etherscan:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Hardhat forking",src:a(99526).A,width:"2186",height:"670"})),(0,r.yg)("p",null,"Or, visit ",(0,r.yg)("a",{parentName:"p",href:"https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48#balances"},"https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48#balances"),", where you can see, at the time or writing, Arbitrum ONE Gateway is the top token holder."),(0,r.yg)("p",null,"Then, run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npx hardhat test ./test/BalanceReader.ts\n")),(0,r.yg)("p",null,"You should get:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"BalanceReader tests\nThe USDC Balance of Arbitrum Gateway is $ 1,116,923,836.506\n    \u2714 gets arbitrum gateway balance (4345ms)\n\n  1 passing (4s)\n")),(0,r.yg)("h2",{id:"conclusion"},"Conclusion"),(0,r.yg)("p",null,"In this lesson, you've learned how to use hardhat forking capabilities to test smart contracts. You learned how contracts can interact with already-deployed contracts in an easy way."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"see-also"},"See also"))}u.isMDXComponent=!0},99526:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/hardhat-forking-10e2a5fb140ab7509a297b058b740f03.png"}}]);