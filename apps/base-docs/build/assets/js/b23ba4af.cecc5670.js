"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[1914],{82247:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var a=t(14041);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),y=i,m=u["".concat(c,".").concat(y)]||u[y]||p[y]||r;return t?a.createElement(m,o(o({ref:n},d),{},{components:t})):a.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=y;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},17351:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(89575),i=(t(14041),t(82247));const r={title:"Basic Functions Exercise",description:"Exercise - Create and deploy a contract with simple math functions.",hide_table_of_contents:!1},o=void 0,l={unversionedId:"docs/contracts-and-basic-functions/basic-functions-exercise",id:"docs/contracts-and-basic-functions/basic-functions-exercise",title:"Basic Functions Exercise",description:"Exercise - Create and deploy a contract with simple math functions.",source:"@site/base-camp/docs/contracts-and-basic-functions/basic-functions-exercise.md",sourceDirName:"docs/contracts-and-basic-functions",slug:"/docs/contracts-and-basic-functions/basic-functions-exercise",permalink:"/base-camp/docs/contracts-and-basic-functions/basic-functions-exercise",draft:!1,tags:[],version:"current",frontMatter:{title:"Basic Functions Exercise",description:"Exercise - Create and deploy a contract with simple math functions.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Basic Types",permalink:"/base-camp/docs/contracts-and-basic-functions/basic-types"},next:{title:"Overview of Test Networks",permalink:"/base-camp/docs/deployment-to-testnet/overview-of-test-networks-vid"}},c={},s=[{value:"Contract",id:"contract",level:2},{value:"Adder",id:"adder",level:3},{value:"Subtractor",id:"subtractor",level:3}],d={toc:s},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Each module in this course will contain exercises in which you are given a specification for a contract ",(0,i.yg)("strong",{parentName:"p"},"without")," being given specific instructions on how to build the contract. You must use what you've learned to figure out the best solution on your own!"),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"Once you've learned how to deploy your contracts to a test network, you'll be given the opportunity to submit your contract address for review by an onchain unit test. If it passes, you'll receive an NFT pin recognizing your accomplishment."),(0,i.yg)("p",{parentName:"admonition"},(0,i.yg)("strong",{parentName:"p"},"You'll deploy and submit this contract in the next module."))),(0,i.yg)("p",null,"The following exercise asks you to create a contract that adheres to the following stated specifications."),(0,i.yg)("h2",{id:"contract"},"Contract"),(0,i.yg)("p",null,"Create a contract called ",(0,i.yg)("inlineCode",{parentName:"p"},"BasicMath"),". It should not inherit from any other contracts and does not need a constructor. It should have the following two functions:"),(0,i.yg)("h3",{id:"adder"},"Adder"),(0,i.yg)("p",null,"A function called ",(0,i.yg)("inlineCode",{parentName:"p"},"adder"),". It must:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Accept two ",(0,i.yg)("inlineCode",{parentName:"li"},"uint")," arguments, called ",(0,i.yg)("inlineCode",{parentName:"li"},"_a")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"_b")),(0,i.yg)("li",{parentName:"ul"},"Return a ",(0,i.yg)("inlineCode",{parentName:"li"},"uint")," ",(0,i.yg)("inlineCode",{parentName:"li"},"sum")," and a ",(0,i.yg)("inlineCode",{parentName:"li"},"bool")," ",(0,i.yg)("inlineCode",{parentName:"li"},"error")),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"_a")," + ",(0,i.yg)("inlineCode",{parentName:"li"},"_b")," do not overflow, it should return the ",(0,i.yg)("inlineCode",{parentName:"li"},"sum")," and an ",(0,i.yg)("inlineCode",{parentName:"li"},"error")," of ",(0,i.yg)("inlineCode",{parentName:"li"},"false")),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"_a")," + ",(0,i.yg)("inlineCode",{parentName:"li"},"_b")," overflow, it should return ",(0,i.yg)("inlineCode",{parentName:"li"},"0")," as the ",(0,i.yg)("inlineCode",{parentName:"li"},"sum"),", and an ",(0,i.yg)("inlineCode",{parentName:"li"},"error")," of ",(0,i.yg)("inlineCode",{parentName:"li"},"true"))),(0,i.yg)("h3",{id:"subtractor"},"Subtractor"),(0,i.yg)("p",null,"A function called ",(0,i.yg)("inlineCode",{parentName:"p"},"subtractor"),". It must:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Accept two ",(0,i.yg)("inlineCode",{parentName:"li"},"uint")," arguments, called ",(0,i.yg)("inlineCode",{parentName:"li"},"_a")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"_b")),(0,i.yg)("li",{parentName:"ul"},"Return a ",(0,i.yg)("inlineCode",{parentName:"li"},"uint")," ",(0,i.yg)("inlineCode",{parentName:"li"},"difference")," and a ",(0,i.yg)("inlineCode",{parentName:"li"},"bool")," ",(0,i.yg)("inlineCode",{parentName:"li"},"error")),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"_a")," - ",(0,i.yg)("inlineCode",{parentName:"li"},"_b")," does not underflow, it should return the ",(0,i.yg)("inlineCode",{parentName:"li"},"difference")," and an ",(0,i.yg)("inlineCode",{parentName:"li"},"error")," of ",(0,i.yg)("inlineCode",{parentName:"li"},"false")),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"_a")," - ",(0,i.yg)("inlineCode",{parentName:"li"},"_b")," underflows, it should return ",(0,i.yg)("inlineCode",{parentName:"li"},"0")," as the ",(0,i.yg)("inlineCode",{parentName:"li"},"difference"),", and an ",(0,i.yg)("inlineCode",{parentName:"li"},"error")," of ",(0,i.yg)("inlineCode",{parentName:"li"},"true"))))}p.isMDXComponent=!0}}]);