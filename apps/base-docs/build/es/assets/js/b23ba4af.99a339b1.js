"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[537],{30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},45217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7896),i=(n(2784),n(30876));const r={title:"Basic Functions Exercise",description:"Exercise - Create and deploy a contract with simple math functions.",hide_table_of_contents:!1},o=void 0,l={unversionedId:"docs/contracts-and-basic-functions/basic-functions-exercise",id:"docs/contracts-and-basic-functions/basic-functions-exercise",title:"Basic Functions Exercise",description:"Exercise - Create and deploy a contract with simple math functions.",source:"@site/base-camp/docs/contracts-and-basic-functions/basic-functions-exercise.md",sourceDirName:"docs/contracts-and-basic-functions",slug:"/docs/contracts-and-basic-functions/basic-functions-exercise",permalink:"/es/base-camp/docs/contracts-and-basic-functions/basic-functions-exercise",draft:!1,tags:[],version:"current",frontMatter:{title:"Basic Functions Exercise",description:"Exercise - Create and deploy a contract with simple math functions.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Basic Types",permalink:"/es/base-camp/docs/contracts-and-basic-functions/basic-types"},next:{title:"Overview of Test Networks",permalink:"/es/base-camp/docs/deployment-to-testnet/overview-of-test-networks-vid"}},c={},s=[{value:"Contract",id:"contract",level:2},{value:"Adder",id:"adder",level:3},{value:"Subtractor",id:"subtractor",level:3}],d={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Each module in this course will contain exercises in which you are given a specification for a contract ",(0,i.kt)("strong",{parentName:"p"},"without")," being given specific instructions on how to build the contract. You must use what you've learned to figure out the best solution on your own!"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Once you've learned how to deploy your contracts to a test network, you'll be given the opportunity to submit your contract address for review by an onchain unit test. If it passes, you'll receive an NFT pin recognizing your accomplishment."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"You'll deploy and submit this contract in the next module."))),(0,i.kt)("p",null,"The following exercise asks you to create a contract that adheres to the following stated specifications."),(0,i.kt)("h2",{id:"contract"},"Contract"),(0,i.kt)("p",null,"Create a contract called ",(0,i.kt)("inlineCode",{parentName:"p"},"BasicMath"),". It should not inherit from any other contracts and does not need a constructor. It should have the following two functions:"),(0,i.kt)("h3",{id:"adder"},"Adder"),(0,i.kt)("p",null,"A function called ",(0,i.kt)("inlineCode",{parentName:"p"},"adder"),". It must:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Accept two ",(0,i.kt)("inlineCode",{parentName:"li"},"uint")," arguments, called ",(0,i.kt)("inlineCode",{parentName:"li"},"_a")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"_b")),(0,i.kt)("li",{parentName:"ul"},"Return a ",(0,i.kt)("inlineCode",{parentName:"li"},"uint")," ",(0,i.kt)("inlineCode",{parentName:"li"},"sum")," and a ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ",(0,i.kt)("inlineCode",{parentName:"li"},"error")),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"_a")," + ",(0,i.kt)("inlineCode",{parentName:"li"},"_b")," do not overflow, it should return the ",(0,i.kt)("inlineCode",{parentName:"li"},"sum")," and an ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"_a")," + ",(0,i.kt)("inlineCode",{parentName:"li"},"_b")," overflow, it should return ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," as the ",(0,i.kt)("inlineCode",{parentName:"li"},"sum"),", and an ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"true"))),(0,i.kt)("h3",{id:"subtractor"},"Subtractor"),(0,i.kt)("p",null,"A function called ",(0,i.kt)("inlineCode",{parentName:"p"},"subtractor"),". It must:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Accept two ",(0,i.kt)("inlineCode",{parentName:"li"},"uint")," arguments, called ",(0,i.kt)("inlineCode",{parentName:"li"},"_a")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"_b")),(0,i.kt)("li",{parentName:"ul"},"Return a ",(0,i.kt)("inlineCode",{parentName:"li"},"uint")," ",(0,i.kt)("inlineCode",{parentName:"li"},"difference")," and a ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ",(0,i.kt)("inlineCode",{parentName:"li"},"error")),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"_a")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"_b")," does not underflow, it should return the ",(0,i.kt)("inlineCode",{parentName:"li"},"difference")," and an ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"_a")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"_b")," underflows, it should return ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," as the ",(0,i.kt)("inlineCode",{parentName:"li"},"difference"),", and an ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"true"))))}p.isMDXComponent=!0}}]);