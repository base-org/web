{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/ArraysUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    function getNumbers() external view returns (uint[] memory);\n\n    function resetNumbers() external;\n\n    function appendToNumbers(uint[] calldata _toAppend) external;\n\n    function saveTimestamp(uint _unixTimestamp) external;\n\n    function afterY2K() external view returns (uint[] memory, address[] memory);\n\n    function resetSenders() external;\n\n    function resetTimestamps() external;\n}\n\nlibrary Caller {\n    function getNumbers(\n        ISubmission _submission\n    ) internal view returns (uint[] memory, bool) {\n        try _submission.getNumbers() returns (uint[] memory result) {\n            return (result, false);\n        } catch {\n            uint[] memory badResult;\n            return (badResult, true);\n        }\n    }\n\n    function appendToNumbers(\n        ISubmission _submission,\n        uint[] memory _toAppend\n    ) internal returns (bool) {\n        try _submission.appendToNumbers(_toAppend) {\n            return (false);\n        } catch {\n            return (true);\n        }\n    }\n\n    function saveTimestamp(\n        ISubmission _submission,\n        uint _unixTimestamp\n    ) internal returns (bool) {\n        try _submission.saveTimestamp(_unixTimestamp) {\n            return (false);\n        } catch {\n            return (true);\n        }\n    }\n\n    function afterY2K(\n        ISubmission _submission\n    ) internal view returns (uint[] memory, address[] memory, bool) {\n        try _submission.afterY2K() returns (\n            uint[] memory timestamps,\n            address[] memory addresses\n        ) {\n            return (timestamps, addresses, false);\n        } catch {\n            uint[] memory badResultUint;\n            address[] memory badResAddr;\n            return (badResultUint, badResAddr, true);\n        }\n    }\n}\n\ninterface ISecondCaller {\n    function secondSaveTimestamp(\n        ISubmission _submission,\n        uint _timestamp\n    ) external returns (bool);\n}\n\n// Create a second contract to have a second address to test afterY2K\ncontract SecondCaller {\n    function secondSaveTimestamp(\n        ISubmission _submission,\n        uint _timestamp\n    ) public returns (bool) {\n        return Caller.saveTimestamp(_submission, _timestamp);\n    }\n}\n\ncontract TestAppendToNumbers is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should reset numbers and append provided array\";\n\n        submission.resetNumbers();\n\n        uint[4] memory newNumbers = [uint(11), 12, 13, 14];\n        uint[] memory toAppend = new uint[](4);\n        for (uint i = 0; i < toAppend.length; i++) {\n            toAppend[i] = newNumbers[i];\n        }\n\n        bool callError = Caller.appendToNumbers(submission, toAppend);\n        testResult.assertResults.push(Assert.isFalse(callError));\n\n        uint[] memory result;\n        (result, callError) = Caller.getNumbers(submission);\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getNumbers failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            uint[14] memory expectedNumbers = [\n                uint(1),\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14\n            ];\n            uint[] memory expected = new uint[](14);\n            for (uint i = 0; i < expected.length; i++) {\n                expected[i] = expectedNumbers[i];\n            }\n            testResult.assertResults.push(Assert.equal(result, expected));\n        }\n        return testResult;\n    }\n}\n\ncontract TestAfterY2K is ITest, Assert {\n    ISecondCaller secondCaller;\n\n    constructor(address _secondCallerAddress) {\n        secondCaller = ISecondCaller(_secondCallerAddress);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult\n            .message = \"afterY2K should return timestamps and addresses > Y2k\";\n\n        submission.resetSenders();\n        submission.resetTimestamps();\n\n        bool callError = Caller.saveTimestamp(submission, 946702600);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to saveTimestamp failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        callError = Caller.saveTimestamp(submission, 946702700);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to saveTimestamp failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        callError = Caller.saveTimestamp(submission, 946702900);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to saveTimestamp failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        // Use secondCaller to get different msg.sender\n        callError = secondCaller.secondSaveTimestamp(submission, 946702650);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to secondSaveTimestamp failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        callError = secondCaller.secondSaveTimestamp(submission, 946702950);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to secondSaveTimestamp failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        (\n            uint[] memory timestamps,\n            address[] memory addresses,\n            bool err\n        ) = Caller.afterY2K(submission);\n\n        if (err) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to afterY2K failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            uint[] memory expectedTimestamps = new uint[](2);\n            expectedTimestamps[0] = 946702900;\n            expectedTimestamps[1] = 946702950;\n\n            address[] memory expectedAddresses = new address[](2);\n            expectedAddresses[0] = address(this);\n            expectedAddresses[1] = address(secondCaller);\n\n            testResult.assertResults.push(\n                Assert.equal(timestamps, expectedTimestamps)\n            );\n            testResult.assertResults.push(\n                Assert.equal(addresses, expectedAddresses)\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract ArraysUT is Cafe {\n    constructor(address _secondCallerAddress) ERC721(\"Arrays Pin\", \"SCDA\") {\n        tests.push(new TestAppendToNumbers());\n        tests.push(new TestAfterY2K(_secondCallerAddress));\n    }\n}\n"
    },
    "contracts/Assert.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * Dynamic memory array implementation for AssertResult to facilitate unit test\n * implementation.\n */\nlibrary List {\n    struct ARList {\n        Assert.AssertResult[] elements;\n        uint num;\n    }\n\n    function create(\n        ARList memory _aList\n    ) internal pure returns (ARList memory newList) {\n        _aList.elements = new Assert.AssertResult[](4);\n        _aList.num = 0;\n        return _aList;\n    }\n\n    function _resizeUp(\n        ARList memory _aList\n    ) internal pure returns (ARList memory) {\n        ARList memory newList;\n        newList.elements = new Assert.AssertResult[](\n            (_aList.elements.length * 3) / 2\n        );\n        for (uint i = 0; i < _aList.elements.length; i++) {\n            newList.elements[i] = _aList.elements[i];\n        }\n        newList.num = _aList.num;\n        return newList;\n    }\n\n    // Follow Solidity .pop() expectation to NOT return a value\n    function pop(ARList memory _aList) internal pure returns (ARList memory) {\n        _aList.num--;\n        delete _aList.elements[_aList.num];\n        return _aList;\n    }\n\n    function push(\n        ARList memory _aList,\n        Assert.AssertResult memory _result\n    ) internal pure returns (ARList memory) {\n        if (_aList.num == _aList.elements.length) {\n            _aList = _resizeUp(_aList);\n        }\n        _aList.elements[_aList.num] = _result;\n        _aList.num++;\n        return _aList;\n    }\n}\n\ncontract Assert {\n    struct AssertResult {\n        bool passed;\n        string assertionError;\n        string returnedAsString;\n        string expectedAsString;\n        string methodName;\n    }\n\n    function _arrToString(\n        uint[] memory arr\n    ) internal pure returns (string memory) {\n        string memory result = \"[\";\n\n        for (uint i = 0; i < arr.length; i++) {\n            if (i < arr.length - 1) {\n                result = string.concat(result, Strings.toString(arr[i]), \", \");\n            } else {\n                result = string.concat(result, Strings.toString(arr[i]), \"]\");\n            }\n        }\n\n        return result;\n    }\n\n    function _arrToString(\n        address[] memory arr\n    ) internal pure returns (string memory) {\n        string memory result = \"[\";\n\n        for (uint i = 0; i < arr.length; i++) {\n            if (i < arr.length - 1) {\n                result = string.concat(\n                    result,\n                    Strings.toHexString(uint160(arr[i]), 20),\n                    \", \"\n                );\n            } else {\n                result = string.concat(\n                    result,\n                    Strings.toHexString(uint160(arr[i]), 20),\n                    \"]\"\n                );\n            }\n        }\n\n        return result;\n    }\n\n    function _arrToString(\n        string[] memory arr\n    ) internal pure returns (string memory) {\n        string memory result = \"[\";\n\n        for (uint i = 0; i < arr.length; i++) {\n            if (i < arr.length - 1) {\n                result = string.concat(result, arr[i], \", \");\n            } else {\n                result = string.concat(result, arr[i], \"]\");\n            }\n        }\n\n        return result;\n    }\n\n    function isTrue(bool a) public pure returns (AssertResult memory result) {\n        result.passed = a;\n        if (!result.passed) {\n            result.assertionError = \"AssertionError: result is not true\";\n        }\n        result.returnedAsString = a == true ? \"true\" : \"false\";\n        result.expectedAsString = \"\";\n        result.methodName = \"isTrue\";\n    }\n\n    function isFalse(bool a) public pure returns (AssertResult memory result) {\n        result.passed = !a;\n        if (!result.passed) {\n            result.assertionError = \"AssertionError: result is not false\";\n        }\n        result.returnedAsString = a == true ? \"true\" : \"false\";\n        result.expectedAsString = \"\";\n        result.methodName = \"isFalse\";\n    }\n\n    function equal(\n        uint256 a,\n        uint256 b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = (a == b);\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                Strings.toString(a),\n                \" is not equal to \",\n                Strings.toString(b)\n            );\n        }\n        result.returnedAsString = Strings.toString(a);\n        result.expectedAsString = Strings.toString(b);\n        result.methodName = \"equal\";\n    }\n\n    // TODO\n\n    // function equal(int256 a, int256 b) public returns (AssertResult memory result) {\n\n    // }\n\n    // function equal(bool a, bool b) public returns (AssertResult memory result) {\n\n    // }\n\n    function equal(\n        address a,\n        address b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = (a == b);\n        string memory aString = Strings.toHexString(uint160(a), 20);\n        string memory bString = Strings.toHexString(uint160(b), 20);\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                aString,\n                \" is not equal to \",\n                bString\n            );\n        }\n        result.returnedAsString = aString;\n        result.expectedAsString = bString;\n        result.methodName = \"equal\";\n    }\n\n    // function equal(bytes32 a, bytes32 b) public returns (AssertResult memory result) {\n\n    // }\n\n    function equal(\n        bytes memory a,\n        bytes memory b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = keccak256(a) == keccak256(b);\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                string(a),\n                \" is not equal to \",\n                string(b)\n            );\n        }\n        result.returnedAsString = string(a);\n        result.expectedAsString = string(b);\n        result.methodName = \"equal\";\n    }\n\n    function equal(\n        string memory a,\n        string memory b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = keccak256(bytes(a)) == keccak256(bytes(b));\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                a,\n                \" is not equal to \",\n                b\n            );\n        }\n        result.returnedAsString = a;\n        result.expectedAsString = b;\n        result.methodName = \"equal\";\n    }\n\n    function equal(\n        uint[] memory a,\n        uint[] memory b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = keccak256(abi.encode(a)) == keccak256(abi.encode(b));\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                _arrToString(a),\n                \" is not equal to \",\n                _arrToString(b)\n            );\n        }\n        result.returnedAsString = _arrToString(a);\n        result.expectedAsString = _arrToString(b);\n        result.methodName = \"equal\";\n    }\n\n    function equal(\n        address[] memory a,\n        address[] memory b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = keccak256(abi.encode(a)) == keccak256(abi.encode(b));\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                _arrToString(a),\n                \" is not equal to \",\n                _arrToString(b)\n            );\n        }\n        result.returnedAsString = _arrToString(a);\n        result.expectedAsString = _arrToString(b);\n        result.methodName = \"equal\";\n    }\n\n    function equal(\n        string[] memory a,\n        string[] memory b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = keccak256(abi.encode(a)) == keccak256(abi.encode(b));\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                _arrToString(a),\n                \" is not equal to \",\n                _arrToString(b)\n            );\n        }\n        result.returnedAsString = _arrToString(a);\n        result.expectedAsString = _arrToString(b);\n        result.methodName = \"equal\";\n    }\n\n    // function notEqual(uint256 a, uint256 b) public returns (AssertResult memory result) {\n\n    // }\n\n    // function notEqual(int256 a, int256 b) public returns (AssertResult memory result) {\n\n    // }\n\n    // function notEqual(bool a, bool b) public returns (AssertResult memory result) {\n\n    // }\n\n    function notEqual(\n        address a,\n        address b\n    ) public pure returns (AssertResult memory result) {\n        result.passed = (a != b);\n        string memory aString = Strings.toHexString(uint160(a), 20);\n        if (!result.passed) {\n            result.assertionError = string.concat(\n                \"AssertionError: \",\n                \" Both values are\",\n                aString\n            );\n        }\n        result.returnedAsString = aString;\n        result.expectedAsString = \"\";\n        result.methodName = \"equal\";\n    }\n\n    // function notEqual(bytes32 a, bytes32 b) public returns (AssertResult memory result) {\n\n    // }\n\n    // function notEqual(string memory a, string memory b) public returns (AssertResult memory result) {\n\n    // }\n\n    // /*----------------- Greater than --------------------*/\n    // function greaterThan(uint256 a, uint256 b) public returns (AssertResult memory result) {\n\n    // }\n    // function greaterThan(int256 a, int256 b) public returns (AssertResult memory result) {\n\n    // }\n\n    // function greaterThan(uint256 a, int256 b) public returns (AssertResult memory result) {\n\n    //   }\n    // }\n    // function greaterThan(int256 a, uint256 b) public returns (AssertResult memory result) {\n\n    // }\n    // /*----------------- Less than --------------------*/\n    // function lessThan(uint256 a, uint256 b) public returns (AssertResult memory result) {\n\n    // }\n    // function lessThan(int256 a, int256 b) public returns (AssertResult memory result) {\n\n    // }\n\n    // function lessThan(uint256 a, int256 b) public returns (AssertResult memory result) {\n\n    // }\n    // function lessThan(int256 a, uint256 b) public returns (AssertResult memory result) {\n\n    // }\n}\n"
    },
    "contracts/BasicMathUnitTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface IBasicContractTest {\n    function adder(\n        uint _a,\n        uint _b\n    ) external returns (uint result, bool success);\n\n    function subtractor(\n        uint _a,\n        uint _b\n    ) external returns (uint result, bool success);\n}\n\nlibrary Caller {\n    function callRemoteAdder(\n        IBasicContractTest _submission,\n        uint _a,\n        uint _b\n    ) internal returns (uint, bool, bool) {\n        try _submission.adder(_a, _b) returns (uint result, bool success) {\n            return (result, success, false);\n        } catch {\n            return (0, false, true);\n        }\n    }\n\n    function callRemoteSubtractor(\n        IBasicContractTest _submission,\n        uint _a,\n        uint _b\n    ) internal returns (uint, bool, bool) {\n        try _submission.subtractor(_a, _b) returns (uint result, bool success) {\n            return (result, success, false);\n        } catch {\n            return (0, false, true);\n        }\n    }\n}\n\ncontract test1Plus2 is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IBasicContractTest submission = IBasicContractTest(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"1 + 2 should equal 3 and NOT return an error\";\n        (uint res, bool err, bool callError) = Caller.callRemoteAdder(\n            submission,\n            1,\n            2\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to adder failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 3));\n            testResult.assertResults.push(Assert.isFalse(err));\n        }\n        return testResult;\n    }\n}\n\ncontract test1PlusMaxInt is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IBasicContractTest submission = IBasicContractTest(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"1 + MAX_INT should equal 0 and return an error\";\n        (uint res, bool err, bool callError) = Caller.callRemoteAdder(\n            submission,\n            1,\n            type(uint).max\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to adder failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 0));\n            testResult.assertResults.push(Assert.isTrue(err));\n        }\n        return testResult;\n    }\n}\n\ncontract test2Minus1 is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IBasicContractTest submission = IBasicContractTest(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"2 - 1 should equal 1 and NOT return an error\";\n        (uint res, bool err, bool callError) = Caller.callRemoteSubtractor(\n            submission,\n            2,\n            1\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to subtractor failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 1));\n            testResult.assertResults.push(Assert.isFalse(err));\n        }\n        return testResult;\n    }\n}\n\ncontract test1Minus2 is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IBasicContractTest submission = IBasicContractTest(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"1 - 2 should equal 0 and return an error\";\n        (uint res, bool err, bool callError) = Caller.callRemoteSubtractor(\n            submission,\n            1,\n            2\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to subtractor failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 0));\n            testResult.assertResults.push(Assert.isTrue(err));\n        }\n        return testResult;\n    }\n}\n\n// NOTE: It might be better to centralize the token distributor\ncontract BasicMathUnitTest is Cafe {\n    constructor() ERC721(\"Basic Contracts Pin\", \"SCDBC\") {\n        tests.push(new test1Plus2());\n        tests.push(new test1PlusMaxInt());\n        tests.push(new test2Minus1());\n        tests.push(new test1Minus2());\n    }\n}\n"
    },
    "contracts/Cafe.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Cafe Version 0.2\n\n/**\n * Cafe is a unit test framework designed to facilitate testing of contracts\n * built against a defined specification.  It awards an NFT pin if the tests\n * are passed.\n *\n * It works with Assert.sol to create a reasonably familiar system for writing\n * tests.\n */\n\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Assert.sol\";\n\ninterface ITest {\n    function execute(\n        address _submissionAddress\n    ) external returns (Cafe.TestResult memory);\n}\n\ninterface IDeploy {\n    function deploy(\n        address _submissionAddress\n    ) external returns (Cafe.TestResult memory, address);\n}\n\nabstract contract Cafe is ERC721, Ownable, ReentrancyGuard, Assert {\n    error SoulboundToken();\n    error NotActive();\n\n    using Counters for Counters.Counter;\n    Counters.Counter public tokenIds;\n\n    mapping(address => bool) public owners;\n    mapping(address => bool) submittedContracts;\n\n    bool active = true;\n    string AllTokenURI = \"\";\n\n    event TestSuiteResult(\n        address submission,\n        bool passed,\n        TestResult[] testResults\n    );\n\n    struct TestResult {\n        string message;\n        List.ARList assertResults;\n    }\n\n    ITest[] tests;\n\n    /**\n     * Used by unit tests to indicate they contain a factory\n     * Returns the **address** of the contract deployed by the factory\n     * and the test result, to validate deployment or alert to failure\n     *\n     */\n\n    IDeploy deployer;\n\n    function testContract(address _submissionAddress) public testIsActive {\n        // Declare here to +1 length if there is a deployer\n        TestResult[] memory testResults;\n        uint i = 0;\n        address testAddress = _submissionAddress;\n\n        if (address(deployer) != address(0)) {\n            testResults = new TestResult[](tests.length + 1);\n            i++;\n            // Use the address returned by the deployment for remaining tests\n            (testResults[0], testAddress) = deployer.deploy(_submissionAddress);\n        } else {\n            testResults = new TestResult[](tests.length);\n        }\n\n        for (i; i < tests.length; i++) {\n            testResults[i] = tests[i].execute(testAddress);\n        }\n\n        processResults(_submissionAddress, testResults);\n    }\n\n    /**\n     * Check each assert in each test to see if any failed.\n     *\n     * Note:  The check is here instead of setting a `passed` bool in\n     * `TestResult` to reduce the amount of code in each unit test.\n     */\n    function checkIfAllPassed(\n        TestResult[] memory _testResults\n    ) public pure returns (bool) {\n        for (uint i = 0; i < _testResults.length; i++) {\n            for (uint k = 0; k < _testResults[i].assertResults.num; k++) {\n                if (!_testResults[i].assertResults.elements[k].passed) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    function processResults(\n        address _submissionAddress,\n        TestResult[] memory _testResults\n    ) internal nonReentrant {\n        bool passed = checkIfAllPassed(_testResults);\n\n        emit TestSuiteResult(_submissionAddress, passed, _testResults);\n\n        /**\n         * Grant a soulbound NFT pin if:\n         *  - This contract address has not been submitted before\n         *  - The sender does not already own one of these pins\n         *  - The contract submitted passes all unit tests\n         */\n        if (\n            !submittedContracts[_submissionAddress] &&\n            !owners[msg.sender] &&\n            passed\n        ) {\n            tokenIds.increment();\n            uint newId = tokenIds.current();\n            owners[msg.sender] = true;\n            _safeMint(msg.sender, newId);\n        }\n\n        submittedContracts[_submissionAddress] = true;\n    }\n\n    /**\n     * Disallow transfers (Soulbound NFT)\n     */\n    function _beforeTokenTransfer(\n        address _from,\n        address,\n        uint,\n        uint\n    ) internal pure override {\n        if (_from != address(0)) {\n            revert SoulboundToken();\n        }\n    }\n\n    function setActive(bool _setActiveTo) public onlyOwner {\n        active = _setActiveTo;\n    }\n\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\n        AllTokenURI = _tokenURI;\n    }\n\n    function tokenURI(uint256) public view override returns (string memory) {\n        return AllTokenURI;\n    }\n\n    modifier testIsActive() {\n        if (!active) {\n            revert NotActive();\n        }\n        _;\n    }\n}\n"
    },
    "contracts/ControlStructuresUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface IControlStructures {\n    function fizzBuzz(uint _number) external returns (string memory);\n\n    function doNotDisturb(uint _time) external returns (string memory);\n}\n\nlibrary Caller {\n    function callRemoteFizzBuzz(\n        IControlStructures _submission,\n        uint _number\n    ) internal returns (string memory, bool) {\n        try _submission.fizzBuzz(_number) returns (string memory result) {\n            return (result, false);\n        } catch {\n            return (\"\", true);\n        }\n    }\n\n    function callRemoteDoNotDisturb(\n        IControlStructures _submission,\n        uint _time\n    ) internal returns (string memory, bool) {\n        try _submission.doNotDisturb(_time) returns (string memory result) {\n            return (result, false);\n        } catch Error(string memory reason) {\n            return (reason, true);\n        } catch Panic(uint errorCode) {\n            return (Strings.toString(errorCode), true);\n        } catch (bytes memory lowLevelData) {\n            return (string(lowLevelData), true);\n        }\n    }\n}\n\ncontract testFizzBuzz is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IControlStructures submission = IControlStructures(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Fizzbuzz should work with tradtional rules\";\n        (string memory res, bool callError) = Caller.callRemoteFizzBuzz(\n            submission,\n            9\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to fizzBuzz failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, \"Fizz\"));\n        }\n\n        (res, callError) = Caller.callRemoteFizzBuzz(submission, 10);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to fizzBuzz failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, \"Buzz\"));\n        }\n\n        (res, callError) = Caller.callRemoteFizzBuzz(submission, 15);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to fizzBuzz failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, \"FizzBuzz\"));\n        }\n\n        (res, callError) = Caller.callRemoteFizzBuzz(submission, 11);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to fizzBuzz failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, \"Splat\"));\n        }\n        return testResult;\n    }\n}\n\ncontract testAfterHours is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IControlStructures submission = IControlStructures(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"AfterHours should revert and assert as described\";\n        (string memory res, bool callError) = Caller.callRemoteDoNotDisturb(\n            submission,\n            2401\n        );\n        if (callError) {\n            testResult.assertResults.push(Assert.equal(res, \"1\"));\n        } else {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Transaction failed to panic\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        (res, callError) = Caller.callRemoteDoNotDisturb(submission, 2201);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.equal(\n                    res,\n                    string(abi.encodeWithSignature(\"AfterHours(uint256)\", 2201))\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Transaction failed to revert\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        (res, callError) = Caller.callRemoteDoNotDisturb(submission, 801);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to doNotDisturb failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, \"Morning!\"));\n        }\n\n        (res, callError) = Caller.callRemoteDoNotDisturb(submission, 1450);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to doNotDisturb failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, \"Afternoon!\"));\n        }\n\n        (res, callError) = Caller.callRemoteDoNotDisturb(submission, 1830);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to doNotDisturb failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, \"Evening!\"));\n        }\n\n        return testResult;\n    }\n}\n\ncontract ControlStructuresUT is Cafe {\n    constructor() ERC721(\"Control Structures Pin\", \"SCDCS\") {\n        tests.push(new testFizzBuzz());\n        tests.push(new testAfterHours());\n    }\n}\n"
    },
    "contracts/ERC20UT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    struct Issue {\n        EnumerableSet.AddressSet voters;\n        string issueDesc;\n        uint votesFor;\n        uint votesAgainst;\n        uint votesAbstain;\n        uint totalVotes;\n        uint quorum;\n        bool passed;\n        bool closed;\n    }\n\n    struct ReturnableIssue {\n        address[] voters;\n        string issueDesc;\n        uint votesFor;\n        uint votesAgainst;\n        uint votesAbstain;\n        uint totalVotes;\n        uint quorum;\n        bool passed;\n        bool closed;\n    }\n\n    enum Vote {\n        AGAINST,\n        FOR,\n        ABSTAIN\n    }\n\n    function claim() external;\n\n    function createIssue(\n        string memory _issueDesc,\n        uint _quorum\n    ) external returns (uint);\n\n    function getIssue(\n        uint _id\n    ) external view returns (ISubmission.ReturnableIssue memory);\n\n    function vote(uint _issueId, Vote _vote) external;\n\n    function totalSupply() external returns (uint);\n\n    function balanceOf(address _account) external view returns (uint);\n\n    function transfer(address to, uint256 amount) external;\n}\n\nlibrary Caller {\n    function claim(\n        ISubmission _submission\n    ) internal returns (string memory, bool) {\n        try _submission.claim() {\n            return (\"\", false);\n        } catch (bytes memory lowLevelData) {\n            return (string(lowLevelData), true);\n        }\n    }\n\n    function createIssue(\n        ISubmission _submission,\n        string memory _issueDesc,\n        uint _quorum\n    ) internal returns (string memory, bool, uint) {\n        try _submission.createIssue(_issueDesc, _quorum) returns (uint index) {\n            return (\"\", false, index);\n        } catch (bytes memory lowLevelData) {\n            return (string(lowLevelData), true, 0);\n        }\n    }\n\n    function vote(\n        ISubmission _submission,\n        uint _issueId,\n        ISubmission.Vote _vote\n    ) internal returns (string memory, bool) {\n        try _submission.vote(_issueId, _vote) {\n            return (\"\", false);\n        } catch (bytes memory lowLevelData) {\n            return (string(lowLevelData), true);\n        }\n    }\n\n    function getIssue(\n        ISubmission _submission,\n        uint _id\n    )\n        internal\n        view\n        returns (string memory, bool, ISubmission.ReturnableIssue memory)\n    {\n        try _submission.getIssue(_id) returns (\n            ISubmission.ReturnableIssue memory issue\n        ) {\n            return (\"\", false, issue);\n        } catch (bytes memory lowLevelData) {\n            ISubmission.ReturnableIssue memory empty;\n            return (string(lowLevelData), true, empty);\n        }\n    }\n}\n\ncontract ERC20SecondCaller {\n    function claim(\n        ISubmission _submission\n    ) public returns (string memory, bool) {\n        return Caller.claim(_submission);\n    }\n\n    function vote(\n        ISubmission _submission,\n        uint _id,\n        ISubmission.Vote _vote\n    ) public returns (string memory, bool) {\n        return Caller.vote(_submission, _id, _vote);\n    }\n}\n\ncontract TestTokenClaim is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"User should be able to claim exactly once\";\n\n        uint amountClaimed = submission.totalSupply();\n\n        (string memory message, bool callError) = Caller.claim(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(submission.balanceOf(address(this)), 100)\n            );\n        }\n\n        (message, callError) = Caller.claim(submission);\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Expected revert with TokensClaimed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"TokensClaimed()\"))\n                )\n            );\n        }\n\n        uint amountClaimedAfter = submission.totalSupply();\n\n        testResult.assertResults.push(\n            Assert.equal(amountClaimedAfter, amountClaimed + 100)\n        );\n\n        return testResult;\n    }\n}\n\ncontract TestSecondClaimer is ITest, Assert {\n    ERC20SecondCaller secondCaller;\n\n    constructor(address _secondCaller) {\n        secondCaller = ERC20SecondCaller(_secondCaller);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Second user should be able to claim exactly once\";\n\n        uint amountClaimed = submission.totalSupply();\n\n        (string memory message, bool callError) = secondCaller.claim(\n            submission\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(submission.balanceOf(address(secondCaller)), 100)\n            );\n        }\n\n        (message, callError) = secondCaller.claim(submission);\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Expected revert with TokensClaimed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"TokensClaimed()\"))\n                )\n            );\n        }\n\n        uint amountClaimedAfter = submission.totalSupply();\n\n        testResult.assertResults.push(\n            Assert.equal(amountClaimedAfter, amountClaimed + 100)\n        );\n\n        return testResult;\n    }\n}\n\ncontract TestVoting is ITest, Assert {\n    ERC20SecondCaller secondCaller;\n    ERC20SecondCaller thirdCaller;\n    ERC20SecondCaller fourthCaller;\n\n    constructor(\n        address _secondCaller,\n        address _thirdCaller,\n        address _fourthCaller\n    ) {\n        secondCaller = ERC20SecondCaller(_secondCaller);\n        thirdCaller = ERC20SecondCaller(_thirdCaller);\n        fourthCaller = ERC20SecondCaller(_fourthCaller);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should create and allow voting on issues\";\n\n        (string memory message, bool callError, uint issueIndex) = Caller\n            .createIssue(submission, \"We should all learn Fortran!\", 300);\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"createIssue did not revert with NoTokensHeld()\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"NoTokensHeld()\"))\n                )\n            );\n        }\n\n        uint amountClaimed = submission.totalSupply();\n\n        // Prior tests have claimed for secondCaller, but Caller is tied to this new test contract\n        (message, callError) = Caller.claim(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        }\n\n        (message, callError) = thirdCaller.claim(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        }\n\n        (message, callError) = fourthCaller.claim(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        }\n\n        submission.transfer(address(fourthCaller), 50);\n\n        uint amountClaimedAfter = submission.totalSupply();\n\n        testResult.assertResults.push(\n            Assert.equal(amountClaimedAfter, amountClaimed + 300)\n        );\n\n        (message, callError, issueIndex) = Caller.createIssue(\n            submission,\n            \"We should all learn Solidity!\",\n            400\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to createIssue failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        (message, callError) = Caller.vote(\n            submission,\n            issueIndex,\n            ISubmission.Vote.FOR\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to vote failed\", \"\", \"\", \"\")\n            );\n        }\n\n        // 50 votes FOR\n        (message, callError) = Caller.vote(\n            submission,\n            issueIndex,\n            ISubmission.Vote.FOR\n        );\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"vote did not revert with AlreadyVoted()\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"AlreadyVoted()\"))\n                )\n            );\n        }\n\n        // 100 votes AGAINST\n        (message, callError) = secondCaller.vote(\n            submission,\n            issueIndex,\n            ISubmission.Vote.AGAINST\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to vote failed\", \"\", \"\", \"\")\n            );\n        }\n\n        // 100 votes FOR\n        (message, callError) = thirdCaller.vote(\n            submission,\n            issueIndex,\n            ISubmission.Vote.FOR\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to vote failed\", \"\", \"\", \"\")\n            );\n        }\n\n        // 150 votes ABSTAIN\n        (message, callError) = fourthCaller.vote(\n            submission,\n            issueIndex,\n            ISubmission.Vote.ABSTAIN\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to vote failed\", \"\", \"\", \"\")\n            );\n        }\n\n        ISubmission.ReturnableIssue memory issue;\n\n        (message, callError, issue) = Caller.getIssue(submission, issueIndex);\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to vote failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                // Don't check array equality because order cannot be guaranteed\n                Assert.equal(issue.voters.length, 4)\n            );\n            testResult.assertResults.push(\n                Assert.equal(issue.issueDesc, \"We should all learn Solidity!\")\n            );\n            testResult.assertResults.push(Assert.equal(issue.votesFor, 150));\n            testResult.assertResults.push(\n                Assert.equal(issue.votesAgainst, 100)\n            );\n            testResult.assertResults.push(\n                Assert.equal(issue.votesAbstain, 150)\n            );\n            testResult.assertResults.push(Assert.equal(issue.totalVotes, 400));\n            testResult.assertResults.push(Assert.equal(issue.quorum, 400));\n            testResult.assertResults.push(Assert.isTrue(issue.closed));\n            testResult.assertResults.push(Assert.isTrue(issue.passed));\n        }\n\n        return testResult;\n    }\n}\n\ncontract ERC20UT is Cafe {\n    constructor(\n        address _secondCallerAddress,\n        address _thirdCallerAddress,\n        address _fourthCallerAddress\n    ) ERC721(\"ERC20 Pin\", \"SCDERC20\") {\n        tests.push(new TestTokenClaim());\n        tests.push(new TestSecondClaimer(_secondCallerAddress));\n        tests.push(\n            new TestVoting(\n                _secondCallerAddress,\n                _thirdCallerAddress,\n                _fourthCallerAddress\n            )\n        );\n    }\n}\n"
    },
    "contracts/ERC721UT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    struct Haiku {\n        address author;\n        string line1;\n        string line2;\n        string line3;\n    }\n\n    function mintHaiku(\n        string memory _line1,\n        string memory _line2,\n        string memory _line3\n    ) external;\n\n    function ownerOf(uint _id) external view returns (address);\n\n    function counter() external view returns (uint);\n\n    function shareHaiku(uint _id, address _to) external;\n\n    function getMySharedHaikus() external view returns (Haiku[] memory);\n}\n\nlibrary Caller {\n    function counter(\n        ISubmission _submission\n    ) internal view returns (string memory, bool, uint) {\n        try _submission.counter() returns (uint res) {\n            return (\"\", false, res);\n        } catch {\n            return (\"Call failed\", true, 0);\n        }\n    }\n\n    function mintHaiku(\n        ISubmission _submission,\n        string memory _line1,\n        string memory _line2,\n        string memory _line3\n    ) internal returns (string memory, bool) {\n        try _submission.mintHaiku(_line1, _line2, _line3) {\n            return (\"\", false);\n        } catch (bytes memory lowLevelData) {\n            return (string(lowLevelData), true);\n        }\n    }\n\n    function shareHaiku(\n        ISubmission _submission,\n        uint _id,\n        address _to\n    ) internal returns (string memory, bool) {\n        try _submission.shareHaiku(_id, _to) {\n            return (\"\", false);\n        } catch (bytes memory lowLevelData) {\n            // if (\n            //     keccak256(abi.encodeWithSignature(\"AlreadyVoted()\")) == keccak256(lowLevelData)\n            // ) {\n            //     console.log(\"Custom Error: AlreadyVoted()\");\n            // }\n            return (string(lowLevelData), true);\n        }\n    }\n\n    function getMySharedHaikus(\n        ISubmission _submission\n    ) internal view returns (string memory, bool, ISubmission.Haiku[] memory) {\n        try _submission.getMySharedHaikus() returns (\n            ISubmission.Haiku[] memory result\n        ) {\n            return (\"\", false, result);\n        } catch (bytes memory lowLevelData) {\n            ISubmission.Haiku[] memory empty;\n            return (string(lowLevelData), true, empty);\n        }\n    }\n}\n\ncontract ERC721SecondCaller {\n    function mintHaiku(\n        ISubmission _submission,\n        string memory _line1,\n        string memory _line2,\n        string memory _line3\n    ) public returns (string memory, bool) {\n        return Caller.mintHaiku(_submission, _line1, _line2, _line3);\n    }\n\n    function shareHaiku(\n        ISubmission _submission,\n        uint _id,\n        address _to\n    ) public returns (string memory, bool) {\n        return Caller.shareHaiku(_submission, _id, _to);\n    }\n\n    function getMySharedHaikus(\n        ISubmission _submission\n    ) public view returns (string memory, bool, ISubmission.Haiku[] memory) {\n        return Caller.getMySharedHaikus(_submission);\n    }\n\n    // solhint-disable\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n    // solhint-enable\n}\n\ncontract TestMintHaiku is ITest, Assert, IERC721Receiver {\n    // solhint-disable\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    // solhint-enable\n\n    ERC721SecondCaller secondCaller;\n\n    constructor(address _secondCaller) {\n        secondCaller = ERC721SecondCaller(_secondCaller);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult\n            .message = \"Should be able to mint unique haikus but block copies\";\n\n        (string memory message, bool callError) = Caller.mintHaiku(\n            submission,\n            \"This is an attempt\",\n            \"To create a unique poem\",\n            \"It should pass this time\"\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to mintHaiku failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        uint counter;\n        (message, callError, counter) = Caller.counter(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to counter failed.  Is it public?\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            address ownerOfHaiku = submission.ownerOf(counter - 1);\n            testResult.assertResults.push(\n                Assert.equal(ownerOfHaiku, address(this))\n            );\n        }\n\n        (message, callError) = secondCaller.mintHaiku(\n            submission,\n            \"This is an attempt\",\n            \"To copy anothers work\",\n            \"It should fail this time\"\n        );\n\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to mintHaiku did not revert\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"HaikuNotUnique()\"))\n                )\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract TestSharing is ITest, Assert, IERC721Receiver {\n    // solhint-disable\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    // solhint-enable\n\n    ERC721SecondCaller secondCaller;\n    ERC721SecondCaller thirdCaller;\n    ERC721SecondCaller fourthCaller;\n\n    constructor(\n        address _secondCaller,\n        address _thirdCaller,\n        address _fourthCaller\n    ) {\n        secondCaller = ERC721SecondCaller(_secondCaller);\n        thirdCaller = ERC721SecondCaller(_thirdCaller);\n        fourthCaller = ERC721SecondCaller(_fourthCaller);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should create and share access to haikus\";\n\n        (string memory message, bool callError) = Caller.mintHaiku(\n            submission,\n            \"Another address mints\",\n            \"More bad poetry now\",\n            \"Will anyone care?\"\n        );\n\n        uint counter;\n        (message, callError, counter) = Caller.counter(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to counter failed.  Is it public?\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            address ownerOfHaiku = submission.ownerOf(counter - 1);\n            testResult.assertResults.push(\n                Assert.equal(ownerOfHaiku, address(this))\n            );\n        }\n\n        (message, callError) = secondCaller.mintHaiku(\n            submission,\n            \"Original work\",\n            \"Now it mints an NFT\",\n            \"Who to give it to?\"\n        );\n        (message, callError, counter) = Caller.counter(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to counter failed.  Is it public?\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            address ownerOfHaiku = submission.ownerOf(counter - 1);\n            testResult.assertResults.push(\n                Assert.equal(ownerOfHaiku, address(secondCaller))\n            );\n        }\n\n        (message, callError) = thirdCaller.mintHaiku(\n            submission,\n            \"Copy/paste errors\",\n            \"Make hard to debug problems\",\n            \"Will we ever learn?\"\n        );\n\n        (message, callError, counter) = Caller.counter(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to counter failed.  Is it public?\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            address ownerOfHaiku = submission.ownerOf(counter - 1);\n            testResult.assertResults.push(\n                Assert.equal(ownerOfHaiku, address(thirdCaller))\n            );\n        }\n\n        ISubmission.Haiku[] memory sharedHaikus;\n        (message, callError, sharedHaikus) = fourthCaller.getMySharedHaikus(\n            submission\n        );\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getMySharedHaikus did not revert\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"NoHaikusShared()\"))\n                )\n            );\n        }\n\n        (message, callError, counter) = Caller.counter(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to counter failed.  Is it public?\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            (message, callError) = Caller.shareHaiku(\n                submission,\n                counter - 1,\n                address(fourthCaller)\n            );\n            if (!callError) {\n                testResult.assertResults.push(\n                    Assert.AssertResult(\n                        false,\n                        \"Call to shareHaiku should revert with NotYourHaiku\",\n                        \"\",\n                        \"\",\n                        \"\"\n                    )\n                );\n            } else {\n                testResult.assertResults.push(\n                    Assert.equal(\n                        message,\n                        string(\n                            abi.encodeWithSignature(\n                                \"NotYourHaiku(uint256)\",\n                                counter - 1\n                            )\n                        )\n                    )\n                );\n            }\n\n            (message, callError) = Caller.shareHaiku(\n                submission,\n                counter - 3,\n                address(fourthCaller)\n            );\n            if (callError) {\n                testResult.assertResults.push(\n                    Assert.AssertResult(\n                        false,\n                        \"Call to shareHaiku failed\",\n                        \"\",\n                        \"\",\n                        \"\"\n                    )\n                );\n            }\n\n            (message, callError) = secondCaller.shareHaiku(\n                submission,\n                counter - 2,\n                address(fourthCaller)\n            );\n            if (callError) {\n                testResult.assertResults.push(\n                    Assert.AssertResult(\n                        false,\n                        \"Call to shareHaiku failed\",\n                        \"\",\n                        \"\",\n                        \"\"\n                    )\n                );\n            }\n\n            (message, callError) = thirdCaller.shareHaiku(\n                submission,\n                counter - 1,\n                address(fourthCaller)\n            );\n            if (callError) {\n                testResult.assertResults.push(\n                    Assert.AssertResult(\n                        false,\n                        \"Call to shareHaiku failed\",\n                        \"\",\n                        \"\",\n                        \"\"\n                    )\n                );\n            }\n        }\n\n        (message, callError, sharedHaikus) = fourthCaller.getMySharedHaikus(\n            submission\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getMySharedHaikus failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(sharedHaikus.length, 3));\n            testResult.assertResults.push(\n                Assert.equal(sharedHaikus[0].line1, \"Another address mints\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(sharedHaikus[1].line2, \"Now it mints an NFT\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(sharedHaikus[1].line2, \"Will we ever learn?\")\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract ERC721UT is Cafe {\n    constructor(\n        address _secondCallerAddress,\n        address _thirdCallerAddress,\n        address _fourthCallerAddress\n    ) ERC721(\"SCD ERC721 Pin\", \"SCDERC721\") {\n        tests.push(new TestMintHaiku(_secondCallerAddress));\n        tests.push(\n            new TestSharing(\n                _secondCallerAddress,\n                _thirdCallerAddress,\n                _fourthCallerAddress\n            )\n        );\n    }\n}\n"
    },
    "contracts/ErrorTriageUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    function diffWithNeighbor(\n        uint _a,\n        uint _b,\n        uint _c,\n        uint _d\n    ) external pure returns (uint[] memory);\n\n    function applyModifier(\n        uint _base,\n        int _modifier\n    ) external pure returns (uint);\n\n    function popWithReturn() external returns (uint);\n\n    function addToArr(uint _num) external;\n\n    function getArr() external view returns (uint[] memory);\n\n    function resetArr() external;\n}\n\nlibrary Caller {\n    function diffWithNeighbor(\n        ISubmission _submission,\n        uint _a,\n        uint _b,\n        uint _c,\n        uint _d\n    ) internal pure returns (uint[] memory, bool) {\n        try _submission.diffWithNeighbor(_a, _b, _c, _d) returns (\n            uint[] memory result\n        ) {\n            return (result, false);\n        } catch {\n            uint[] memory result;\n            return (result, true);\n        }\n    }\n\n    function applyModifier(\n        ISubmission _submission,\n        uint _base,\n        int _modifier\n    ) internal pure returns (uint, bool) {\n        try _submission.applyModifier(_base, _modifier) returns (uint result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n\n    function popWithReturn(\n        ISubmission _submission\n    ) internal returns (uint, bool) {\n        try _submission.popWithReturn() returns (uint result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n}\n\ncontract TestDiffWithNeighbor is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external pure override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Diff with neighbor should handle many values\";\n\n        (uint[] memory res, bool callError) = Caller.diffWithNeighbor(\n            submission,\n            1,\n            2,\n            3,\n            4\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to diffWithNeighbor failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res[0], 1));\n            testResult.assertResults.push(Assert.equal(res[1], 1));\n            testResult.assertResults.push(Assert.equal(res[2], 1));\n        }\n\n        (res, callError) = Caller.diffWithNeighbor(submission, 9, 8, 6, 3);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to diffWithNeighbor failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res[0], 1));\n            testResult.assertResults.push(Assert.equal(res[1], 2));\n            testResult.assertResults.push(Assert.equal(res[2], 3));\n        }\n\n        (res, callError) = Caller.diffWithNeighbor(\n            submission,\n            1000,\n            1,\n            20000,\n            50000\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to diffWithNeighbor failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res[0], 999));\n            testResult.assertResults.push(Assert.equal(res[1], 19999));\n            testResult.assertResults.push(Assert.equal(res[2], 30000));\n        }\n\n        return testResult;\n    }\n}\n\ncontract TestApplyModifier is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external pure override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should handle positive and negative modifiers\";\n\n        (uint res, bool callError) = Caller.applyModifier(\n            submission,\n            230604,\n            -10\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to applyModifier failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 230594));\n        }\n\n        (res, callError) = Caller.applyModifier(submission, 1000, -99);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to applyModifier failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 901));\n        }\n\n        (res, callError) = Caller.applyModifier(submission, 150000, 99);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to applyModifier failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 150099));\n        }\n\n        return testResult;\n    }\n}\n\ncontract TestPopWithReturn is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should add and pop values from array\";\n\n        submission.resetArr();\n        submission.addToArr(8);\n        submission.addToArr(10);\n        submission.addToArr(55);\n\n        (uint res, bool callError) = Caller.popWithReturn(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to popWithReturn failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 55));\n        }\n\n        uint[] memory currentArr = submission.getArr();\n\n        testResult.assertResults.push(Assert.equal(currentArr.length, 2));\n\n        (res, callError) = Caller.popWithReturn(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to popWithReturn failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 10));\n        }\n\n        currentArr = submission.getArr();\n\n        testResult.assertResults.push(Assert.equal(currentArr.length, 1));\n\n        submission.addToArr(9);\n        submission.addToArr(10);\n        submission.addToArr(11);\n        submission.addToArr(20);\n        submission.addToArr(30);\n\n        (res, callError) = Caller.popWithReturn(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to popWithReturn failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 30));\n        }\n\n        (res, callError) = Caller.popWithReturn(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to popWithReturn failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 20));\n        }\n\n        currentArr = submission.getArr();\n\n        uint[4] memory expectedRaw = [uint(8), 9, 10, 11];\n        uint[] memory expectedArr = new uint[](4);\n        for (uint i = 0; i < 4; i++) {\n            expectedArr[i] = expectedRaw[i];\n        }\n\n        testResult.assertResults.push(Assert.equal(currentArr, expectedArr));\n\n        return testResult;\n    }\n}\n\ncontract ErrorTriageUT is Cafe {\n    constructor() ERC721(\"Error Triage Pin\", \"SCDET\") {\n        tests.push(new TestDiffWithNeighbor());\n        tests.push(new TestApplyModifier());\n        tests.push(new TestPopWithReturn());\n    }\n}\n"
    },
    "contracts/Exemplars/ArraysExercise.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"hardhat/console.sol\";\n\ncontract ArraysExercise {\n    uint[] public numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n    function getNumbers() public view returns (uint[] memory) {\n        return numbers;\n    }\n\n    function resetNumbers() public {\n        numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    }\n\n    // More efficient\n    function appendToNumbers(uint[] calldata _toAppend) public {\n        uint[] memory concated = new uint[](numbers.length + _toAppend.length);\n\n        for (uint i = 0; i < concated.length; i++) {\n            if (i < numbers.length) {\n                concated[i] = numbers[i];\n            } else {\n                concated[i] = _toAppend[i - numbers.length];\n            }\n        }\n\n        numbers = concated;\n    }\n\n    // Valid, but less efficient\n    // function appendToNumbers(uint[] calldata _toAppend) public {\n    //     for(uint i = 0; i < _toAppend.length; i++) {\n    //         numbers.push(_toAppend[i]);\n    //     }\n    // }\n\n    uint constant Y2K = 946702800;\n    address[] public senders;\n    uint[] public timestamps;\n\n    function resetSenders() public {\n        delete senders;\n    }\n\n    function resetTimestamps() public {\n        delete timestamps;\n    }\n\n    function saveTimestamp(uint _unixTimestamp) public {\n        senders.push(msg.sender);\n        timestamps.push(_unixTimestamp);\n    }\n\n    function afterY2K() public view returns (uint[] memory, address[] memory) {\n        uint count = _countAfterY2K();\n        uint[] memory timestampsAfter = new uint[](count);\n        address[] memory addressesAfter = new address[](count);\n        uint cursor = 0;\n\n        for (uint i = 0; i < timestamps.length; i++) {\n            if (timestamps[i] > Y2K) {\n                timestampsAfter[cursor] = timestamps[i];\n                addressesAfter[cursor] = senders[i];\n                cursor++;\n            }\n        }\n\n        return (timestampsAfter, addressesAfter);\n    }\n\n    function _countAfterY2K() private view returns (uint) {\n        uint count = 0;\n\n        for (uint i = 0; i < timestamps.length; i++) {\n            if (timestamps[i] > Y2K) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"
    },
    "contracts/Exemplars/BadSimpleMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\ncontract BadSimpleMath {\n\n    uint constant MAX_INT = 2**256-1;\n    \n    // This function does not add correctly, and will thus fail the tests.\n    function adder(uint _a, uint _b) public pure returns (uint, bool) {\n        \n        uint result;\n\n        unchecked {\n            result = _a + _b + 1; // Deliberate error to demonstrate a failing submission.\n        }\n\n        // Check for overflow\n        if (result > _a && result > _b) {\n            return (result, false);\n        } else {\n            return (0, true);\n        }\n    }\n\n    function subtractor(uint _a, uint _b) public pure returns (uint, bool){\n        if (_a >= _b) {\n            return (_a - _b, false);\n        } else {\n            return (0, true);\n        }\n    }\n}\n"
    },
    "contracts/Exemplars/ControlStructures.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\ncontract ControlStructures {\n    function fizzBuzz(uint _number) public pure returns (string memory) {\n        if (_number % 3 == 0 && _number % 5 == 0) {\n            return \"FizzBuzz\";\n        } else if (_number % 3 == 0) {\n            return \"Fizz\";\n        } else if (_number % 5 == 0) {\n            return \"Buzz\";\n        } else {\n            return \"Splat\";\n        }\n    }\n\n    error AfterHours(uint _time);\n\n    function doNotDisturb(uint _time) public pure returns (string memory) {\n        assert(_time < 2400);\n        if (_time > 2200 || _time < 800) {\n            revert AfterHours(_time);\n        }\n        require(_time < 1200 || _time > 1259, \"At lunch!\");\n\n        if (_time >= 800 && _time <= 1199) {\n            return \"Morning!\";\n        } else if (_time >= 1300 && _time <= 1799) {\n            return \"Afternoon!\";\n        } else {\n            return \"Evening!\";\n        }\n    }\n}\n"
    },
    "contracts/Exemplars/EmployeeStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.23;\n\ncontract EmployeeStorage {\n    // uint16 shares; // <- Fails if not using packing\n    string public name;\n    uint public idNumber;\n    uint16 shares;\n    uint24 salary;\n\n    error TooManyShares(uint _totalShares);\n\n    constructor(\n        uint16 _shares,\n        string memory _name,\n        uint24 _salary,\n        uint _idNumber\n    ) {\n        name = _name;\n        shares = _shares;\n        idNumber = _idNumber;\n        salary = _salary;\n    }\n\n    function viewSalary() public view returns (uint24) {\n        return salary;\n    }\n\n    function viewShares() public view returns (uint16) {\n        return shares;\n    }\n\n    function grantShares(uint16 _newShares) public {\n        uint16 newTotalShares = _newShares + shares;\n        require(_newShares <= 5000, \"Too many shares\");\n        if (newTotalShares > 5000) {\n            revert TooManyShares(newTotalShares);\n        }\n\n        shares = newTotalShares;\n    }\n\n    // The `checkForPacking` function will be included in the starter and used by the\n    // unit test with the verbatim comments below.\n\n    // DELETE THIS IN STARTER: Calling `checkForPacking` for `_slot` 3 should return 0 if passing\n\n    /**\n     * Do not modify this function.  It is used to enable the unit test for this pin\n     * to check whether or not you have configured your storage variables to make\n     * use of packing.\n     *\n     * If you wish to cheat, simply modify this function to always return `0`\n     * I'm not your boss ¯\\_(ツ)_/¯\n     *\n     * Fair warning though, if you do cheat, it will be on the blockchain having been\n     * deployed by you wallet....FOREVER!\n     */\n    function checkForPacking(uint _slot) public view returns (uint r) {\n        assembly {\n            r := sload(_slot)\n        }\n    }\n\n    function debugResetShares() public {\n        shares = 1000;\n    }\n}\n"
    },
    "contracts/Exemplars/ErrorTriageExercise.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\ncontract ErrorTriageExercise {\n    /**\n     * Finds the difference between each uint with it's neighbor (a to b, b to c, etc.)\n     * and returns a uint array with the absolute integer difference of each pairing.\n     */\n    function diffWithNeighbor(\n        uint _a,\n        uint _b,\n        uint _c,\n        uint _d\n    ) public pure returns (uint[] memory) {\n        int[] memory intResults = new int[](3);\n        uint[] memory results = new uint[](3);\n\n        intResults[0] = int(_a) - int(_b);\n        intResults[1] = int(_b) - int(_c);\n        intResults[2] = int(_c) - int(_d);\n\n        for (uint i = 0; i < 3; i++) {\n            intResults[i] = intResults[i] < 0\n                ? intResults[i] * -1\n                : intResults[i];\n            results[i] = uint(intResults[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Changes the _base by the value of _modifier.  Base is always > 1000.  Modifiers can be\n     * between positive and negative 100;\n     */\n    function applyModifier(\n        uint _base,\n        int _modifier\n    ) public pure returns (uint) {\n        return uint(int(_base) + _modifier);\n    }\n\n    /**\n     * Pop the last element from the supplied array, and return the modified array and the popped\n     * value (unlike the built-in function)\n     */\n    uint[] arr;\n\n    function popWithReturn() public returns (uint) {\n        uint index = arr.length - 1;\n        uint value = arr[index];\n        arr.pop();\n        return value;\n    }\n\n    function addToArr(uint _num) public {\n        arr.push(_num);\n    }\n\n    function getArr() public view returns (uint[] memory) {\n        return arr;\n    }\n\n    function resetArr() public {\n        delete arr;\n    }\n}\n"
    },
    "contracts/Exemplars/FEWeightedVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract FEWeightedVoting is ERC20 {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(address => bool) claimed;\n    uint public maxSupply = 1000000;\n    uint totalClaimed;\n\n    uint constant claimAmount = 100;\n\n    error TokensClaimed();\n    error AllTokensClaimed();\n    error NoTokensHeld();\n    error QuorumTooHigh(uint);\n    error AlreadyVoted();\n    error VotingClosed();\n\n    enum Vote {\n        AGAINST,\n        FOR,\n        ABSTAIN\n    }\n\n    struct Issue {\n        EnumerableSet.AddressSet voters;\n        string issueDesc;\n        uint votesFor;\n        uint votesAgainst;\n        uint votesAbstain;\n        uint totalVotes;\n        uint quorum;\n        bool passed;\n        bool closed;\n    }\n\n    // EnumerableSets are mappings and cannot be returned outside a contract\n    struct ReturnableIssue {\n        address[] voters;\n        string issueDesc;\n        uint votesFor;\n        uint votesAgainst;\n        uint votesAbstain;\n        uint totalVotes;\n        uint quorum;\n        bool passed;\n        bool closed;\n    }\n\n    Issue[] issues;\n\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        // Burn Issue 0\n        issues.push();\n    }\n\n    function claim() public {\n        if (claimed[msg.sender] == true) {\n            revert TokensClaimed();\n        }\n\n        if (totalSupply() >= maxSupply) {\n            revert AllTokensClaimed();\n        }\n\n        _mint(msg.sender, claimAmount);\n        claimed[msg.sender] = true;\n    }\n\n    function createIssue(\n        string memory _issueDesc,\n        uint _quorum\n    ) public returns (uint) {\n        if (balanceOf(msg.sender) == 0) {\n            revert NoTokensHeld();\n        }\n\n        if (_quorum > totalSupply()) {\n            revert QuorumTooHigh(_quorum);\n        }\n\n        Issue storage newIssue = issues.push();\n        newIssue.issueDesc = _issueDesc;\n        newIssue.quorum = _quorum;\n        return issues.length - 1;\n    }\n\n    function getIssue(uint _id) public view returns (ReturnableIssue memory) {\n        Issue storage issue = issues[_id];\n        return\n            ReturnableIssue(\n                issue.voters.values(),\n                issue.issueDesc,\n                issue.votesFor,\n                issue.votesAgainst,\n                issue.votesAbstain,\n                issue.totalVotes,\n                issue.quorum,\n                issue.closed,\n                issue.passed\n            );\n    }\n\n    function vote(uint _issueId, Vote _vote) public {\n        Issue storage issue = issues[_issueId];\n        if (issue.voters.contains(msg.sender)) {\n            revert AlreadyVoted();\n        }\n        if (issue.closed) {\n            revert VotingClosed();\n        }\n        issue.voters.add(msg.sender);\n\n        if (_vote == Vote.FOR) {\n            issue.votesFor += balanceOf(msg.sender);\n        } else if (_vote == Vote.AGAINST) {\n            issue.votesAgainst += balanceOf(msg.sender);\n        } else if (_vote == Vote.ABSTAIN) {\n            issue.votesAbstain += balanceOf(msg.sender);\n        } else {\n            revert(\"Error...\");\n        }\n\n        issue.totalVotes += balanceOf(msg.sender);\n\n        if (issue.totalVotes >= issue.quorum) {\n            issue.closed = true;\n            if (issue.votesFor > issue.votesAgainst) {\n                issue.passed = true;\n            }\n        }\n    }\n\n    function numberOfIssues() public view returns(uint) {\n        return issues.length;\n    }\n\n    function getAllIssues() public view returns(ReturnableIssue[] memory) {\n        ReturnableIssue[] memory allIssues = new ReturnableIssue[](issues.length);\n\n        for(uint i = 0; i < issues.length; i++) {\n            allIssues[i] = getIssue(i);\n        }\n\n        return allIssues;\n    }\n}\n"
    },
    "contracts/Exemplars/HaikuNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract HaikuNFT is ERC721 {\n    uint public counter = 1;\n\n    struct Haiku {\n        address author;\n        string line1;\n        string line2;\n        string line3;\n    }\n\n    Haiku[] public haikus;\n    mapping(address => uint[]) public sharedHaikus;\n    mapping(string => bool) public lineUsed;\n\n    error NotYourHaiku(uint);\n    error NoHaikusShared();\n    error HaikuNotUnique();\n\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC721(_name, _symbol) {\n        haikus.push();\n    }\n\n    function mintHaiku(\n        string memory _line1,\n        string memory _line2,\n        string memory _line3\n    ) external {\n        if (lineUsed[_line1] || lineUsed[_line2] || lineUsed[_line3]) {\n            revert HaikuNotUnique();\n        }\n\n        lineUsed[_line1] = true;\n        lineUsed[_line2] = true;\n        lineUsed[_line3] = true;\n\n        haikus.push(Haiku(msg.sender, _line1, _line2, _line3));\n        _safeMint(msg.sender, counter);\n        counter++;\n    }\n\n    function shareHaiku(uint _id, address _to) public {\n        if (msg.sender != ownerOf(_id)) {\n            revert NotYourHaiku(_id);\n        }\n\n        sharedHaikus[_to].push(_id);\n    }\n\n    function getMySharedHaikus() public view returns (Haiku[] memory) {\n        uint[] storage ids = sharedHaikus[msg.sender];\n\n        if (ids.length == 0) {\n            revert NoHaikusShared();\n        }\n\n        Haiku[] memory myHaikus = new Haiku[](ids.length);\n\n        for (uint i = 0; i < myHaikus.length; i++) {\n            myHaikus[i] = haikus[ids[i]];\n        }\n\n        return myHaikus;\n    }\n}\n"
    },
    "contracts/Exemplars/ImportsExercise.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\n// import \"./SillyString.sol\"; // Import is formatted for Remix\nimport \"./SillyStringUtils.sol\";\n\ncontract ImportsExercise {\n    using SillyStringUtils for string;\n\n    SillyStringUtils.Haiku haiku;\n\n    function saveHaiku(\n        string memory _line1,\n        string memory _line2,\n        string memory _line3\n    ) public {\n        haiku.line1 = _line1;\n        haiku.line2 = _line2;\n        haiku.line3 = _line3;\n    }\n\n    function getHaiku() public view returns (SillyStringUtils.Haiku memory) {\n        return haiku;\n    }\n\n    function shruggieHaiku()\n        public\n        view\n        returns (SillyStringUtils.Haiku memory)\n    {\n        SillyStringUtils.Haiku memory haikuWithShruggie = haiku;\n        haikuWithShruggie.line3 = haiku.line3.shruggie();\n        return haikuWithShruggie;\n    }\n}\n"
    },
    "contracts/Exemplars/InheritanceExercise.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\nabstract contract Employee {\n    uint public idNumber;\n    uint public managerId;\n\n    constructor(uint _idNumber, uint _managerId) {\n        idNumber = _idNumber;\n        managerId = _managerId;\n    }\n\n    function getAnnualCost() public view virtual returns (uint);\n}\n\ncontract Salaried is Employee {\n    uint public annualSalary;\n\n    constructor(\n        uint _annualSalary,\n        uint _idNumber,\n        uint _managerId\n    ) Employee(_idNumber, _managerId) {\n        annualSalary = _annualSalary;\n    }\n\n    function getAnnualCost() public view override returns (uint) {\n        return annualSalary;\n    }\n}\n\ncontract Hourly is Employee {\n    uint public hourlyRate;\n\n    constructor(\n        uint _hourlyRate,\n        uint _idNumber,\n        uint _managerId\n    ) Employee(_idNumber, _managerId) {\n        hourlyRate = _hourlyRate;\n    }\n\n    function getAnnualCost() public view override returns (uint) {\n        return hourlyRate * 2080;\n    }\n}\n\ncontract Manager {\n    uint[] public reportIds;\n\n    function addReport(uint _id) public {\n        reportIds.push(_id);\n    }\n\n    function resetReports() public {\n        delete reportIds;\n    }\n}\n\ncontract SalesPerson is Hourly {\n    constructor(\n        uint _hourlyRate,\n        uint _idNumber,\n        uint _managerId\n    ) Hourly(_hourlyRate, _idNumber, _managerId) {}\n}\n\ncontract EngineeringManager is Salaried, Manager {\n    constructor(\n        uint _annualSalary,\n        uint _idNumber,\n        uint _managerId\n    ) Salaried(_annualSalary, _idNumber, _managerId) {}\n}\n\ncontract InheritanceSubmission {\n    address public salesPerson;\n    address public engineeringManager;\n\n    constructor(address _salesPerson, address _engineeringManager) {\n        salesPerson = _salesPerson;\n        engineeringManager = _engineeringManager;\n    }\n}\n"
    },
    "contracts/Exemplars/MappingsExercise.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.23;\n\ncontract FavoriteRecords {\n    mapping(string => bool) public approvedRecords;\n    string[] listOfApproved;\n    uint numApprovedRecords;\n\n    mapping(address => string[]) public userFavorites;\n\n    error NotApproved(string recordName);\n\n    constructor() {\n        _addApprovedRecord(\"Thriller\");\n        _addApprovedRecord(\"Back in Black\");\n        _addApprovedRecord(\"The Bodyguard\");\n        _addApprovedRecord(\"The Dark Side of the Moon\");\n        _addApprovedRecord(\"Their Greatest Hits (1971-1975)\");\n        _addApprovedRecord(\"Hotel California\");\n        _addApprovedRecord(\"Come On Over\");\n        _addApprovedRecord(\"Rumours\");\n        _addApprovedRecord(\"Saturday Night Fever\");\n    }\n\n    function _addApprovedRecord(string memory _name) private {\n        approvedRecords[_name] = true;\n        listOfApproved.push(_name);\n        numApprovedRecords++;\n    }\n\n    function getApprovedRecords() public view returns (string[] memory) {\n        return listOfApproved;\n    }\n\n    function addRecord(string memory _albumName) public {\n        if (!approvedRecords[_albumName]) {\n            revert NotApproved(_albumName);\n        }\n\n        userFavorites[msg.sender].push(_albumName);\n    }\n\n    function getUserFavorites(\n        address _address\n    ) public view returns (string[] memory) {\n        return userFavorites[_address];\n    }\n\n    function resetUserFavorites() public {\n        delete userFavorites[msg.sender];\n    }\n}\n"
    },
    "contracts/Exemplars/New.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\n// Imports formatted for Remix\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract AddressBook is Ownable {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    struct Contact {\n        uint id;\n        string firstName;\n        string lastName;\n        uint[] phoneNumbers;\n    }\n\n    mapping(uint => Contact) public contacts;\n    EnumerableSet.UintSet private contactIds;\n    uint currentId = 0;\n\n    error ContactNotFound(uint id);\n\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function addContact(\n        string memory _firstName,\n        string memory _lastName,\n        uint[] memory _phoneNumbers\n    ) public onlyOwner {\n        contacts[currentId] = Contact(\n            currentId,\n            _firstName,\n            _lastName,\n            _phoneNumbers\n        );\n        contactIds.add(currentId);\n        currentId++;\n    }\n\n    function deleteContact(uint _id) public onlyOwner {\n        if (!contactIds.contains(_id)) {\n            revert ContactNotFound(_id);\n        }\n        delete contacts[_id];\n        contactIds.remove(_id);\n    }\n\n    function getContact(uint _id) public view returns (Contact memory) {\n        return contacts[_id];\n    }\n\n    function getAllContacts() public view returns (Contact[] memory) {\n        uint[] memory contactIdList = contactIds.values();\n        uint numContacts = contactIdList.length;\n        Contact[] memory allContacts = new Contact[](numContacts);\n\n        for (uint i = 0; i < numContacts; i++) {\n            allContacts[i] = contacts[contactIdList[i]];\n        }\n\n        return allContacts;\n    }\n}\n\ncontract AddressBookFactory {\n    function deploy() public returns (address) {\n        AddressBook deployed = new AddressBook(msg.sender);\n        return address(deployed);\n    }\n}\n"
    },
    "contracts/Exemplars/SafeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\nimport \"hardhat/console.sol\";\n\ncontract SafeToken {\n    mapping(address => uint) public balances;\n    mapping(address => bool) claimed;\n    uint public totalSupply;\n    uint public totalClaimed;\n\n    uint claimAmount = 1000;\n\n    error InsufficientTokens(int amount);\n    error TokensClaimed();\n    error AllTokensClaimed();\n    error UnsafeTransfer(address _to);\n\n    constructor() {\n        totalSupply = 100000000;\n    }\n\n    function claim() public {\n        if (claimed[msg.sender] == true) {\n            revert TokensClaimed();\n        }\n\n        if (totalClaimed >= totalSupply) {\n            revert AllTokensClaimed();\n        }\n\n        totalClaimed += claimAmount;\n        balances[msg.sender] = claimAmount;\n        claimed[msg.sender] = true;\n    }\n\n    function safeTransfer(address _to, uint _amount) public {\n        if (_to.balance == 0 || _to == address(0)) {\n            revert UnsafeTransfer(_to);\n        }\n\n        int newSenderBalance = int(balances[msg.sender] - _amount);\n        if (newSenderBalance < 0) {\n            revert InsufficientTokens(newSenderBalance);\n        }\n\n        balances[msg.sender] = uint(newSenderBalance);\n        balances[_to] += _amount;\n    }\n}\n"
    },
    "contracts/Exemplars/SillyStringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\nlibrary SillyStringUtils {\n    struct Haiku {\n        string line1;\n        string line2;\n        string line3;\n    }\n\n    function shruggie(\n        string memory _input\n    ) internal pure returns (string memory) {\n        return string.concat(_input, unicode\" 🤷\");\n    }\n}\n"
    },
    "contracts/Exemplars/SimpleMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\ncontract SimpleMath {\n    \n    uint constant MAX_INT = 2**256-1;\n\n    function adder(uint _a, uint _b) public pure returns (uint, bool) {\n        \n        uint result;\n\n        unchecked {\n            result = _a + _b;\n        }\n\n        // Check for overflow\n        if (result > _a && result > _b) {\n            return (result, false);\n        } else {\n            return (0, true);\n        }\n    }\n\n    function subtractor(uint _a, uint _b) public pure returns (uint, bool){\n        if (_a >= _b) {\n            return (_a - _b, false);\n        } else {\n            return (0, true);\n        }\n    }\n}\n"
    },
    "contracts/Exemplars/StructsExercise.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.23;\n\ncontract GarageManager {\n    struct Car {\n        string make;\n        string model;\n        string color;\n        uint numberOfDoors;\n    }\n\n    mapping(address => Car[]) public garage;\n\n    error BadCarIndex(uint);\n\n    function addCar(\n        string memory _make,\n        string memory _model,\n        string memory _color,\n        uint _numberOfDoors\n    ) public {\n        garage[msg.sender].push(Car(_make, _model, _color, _numberOfDoors));\n    }\n\n    function updateCar(\n        uint _index,\n        string memory _make,\n        string memory _model,\n        string memory _color,\n        uint _numberOfDoors\n    ) public {\n        if (_index >= garage[msg.sender].length) {\n            revert BadCarIndex(_index);\n        }\n\n        garage[msg.sender][_index] = Car(_make, _model, _color, _numberOfDoors);\n    }\n\n    function getUserCars(address _user) public view returns (Car[] memory) {\n        return garage[_user];\n    }\n\n    function getMyCars() external view returns (Car[] memory) {\n        return getUserCars(msg.sender);\n    }\n\n    function resetMyGarage() public {\n        delete garage[msg.sender];\n    }\n}\n"
    },
    "contracts/Exemplars/WeightedVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\";\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract WeightedVoting is ERC20 {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(address => bool) claimed;\n    uint public maxSupply = 1000000;\n    uint totalClaimed;\n\n    uint constant claimAmount = 100;\n\n    error TokensClaimed();\n    error AllTokensClaimed();\n    error NoTokensHeld();\n    error QuorumTooHigh(uint);\n    error AlreadyVoted();\n    error VotingClosed();\n\n    enum Vote {\n        AGAINST,\n        FOR,\n        ABSTAIN\n    }\n\n    struct Issue {\n        EnumerableSet.AddressSet voters;\n        string issueDesc;\n        uint votesFor;\n        uint votesAgainst;\n        uint votesAbstain;\n        uint totalVotes;\n        uint quorum;\n        bool passed;\n        bool closed;\n    }\n\n    // EnumerableSets are mappings and cannot be returned outside a contract\n    struct ReturnableIssue {\n        address[] voters;\n        string issueDesc;\n        uint votesFor;\n        uint votesAgainst;\n        uint votesAbstain;\n        uint totalVotes;\n        uint quorum;\n        bool passed;\n        bool closed;\n    }\n\n    Issue[] issues;\n\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        // Burn Issue 0\n        issues.push();\n    }\n\n    function claim() public {\n        if (claimed[msg.sender] == true) {\n            revert TokensClaimed();\n        }\n\n        if (totalSupply() >= maxSupply) {\n            // Note totalSupply is built into ERC20 and works a little differently\n            revert AllTokensClaimed();\n        }\n\n        _mint(msg.sender, claimAmount);\n        claimed[msg.sender] = true;\n    }\n\n    function createIssue(\n        string memory _issueDesc,\n        uint _quorum\n    ) public returns (uint) {\n        if (balanceOf(msg.sender) == 0) {\n            revert NoTokensHeld();\n        }\n\n        if (_quorum > totalSupply()) {\n            revert QuorumTooHigh(_quorum);\n        }\n\n        Issue storage newIssue = issues.push();\n        newIssue.issueDesc = _issueDesc;\n        newIssue.quorum = _quorum;\n        return issues.length - 1;\n    }\n\n    function getIssue(uint _id) external view returns (ReturnableIssue memory) {\n        Issue storage issue = issues[_id];\n        return\n            ReturnableIssue(\n                issue.voters.values(),\n                issue.issueDesc,\n                issue.votesFor,\n                issue.votesAgainst,\n                issue.votesAbstain,\n                issue.totalVotes,\n                issue.quorum,\n                issue.closed,\n                issue.passed\n            );\n    }\n\n    function vote(uint _issueId, Vote _vote) public {\n        Issue storage issue = issues[_issueId];\n        if (issue.voters.contains(msg.sender)) {\n            revert AlreadyVoted();\n        }\n        if (issue.closed) {\n            revert VotingClosed();\n        }\n        issue.voters.add(msg.sender);\n\n        if (_vote == Vote.FOR) {\n            issue.votesFor += balanceOf(msg.sender);\n        } else if (_vote == Vote.AGAINST) {\n            issue.votesAgainst += balanceOf(msg.sender);\n        } else if (_vote == Vote.ABSTAIN) {\n            issue.votesAbstain += balanceOf(msg.sender);\n        } else {\n            revert(\"Error...\");\n        }\n\n        issue.totalVotes += balanceOf(msg.sender);\n\n        if (issue.totalVotes >= issue.quorum) {\n            issue.closed = true;\n            if (issue.votesFor > issue.votesAgainst) {\n                issue.passed = true;\n            }\n        }\n    }\n}\n"
    },
    "contracts/ImportsUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    struct Haiku {\n        string line1;\n        string line2;\n        string line3;\n    }\n\n    function getHaiku() external view returns (Haiku memory);\n\n    function saveHaiku(\n        string memory _line1,\n        string memory _line2,\n        string memory _line3\n    ) external;\n\n    function shruggieHaiku() external view returns (Haiku memory);\n}\n\nlibrary Caller {\n    function saveHaiku(\n        ISubmission _submission,\n        string memory _line1,\n        string memory _line2,\n        string memory _line3\n    ) internal returns (bool) {\n        try _submission.saveHaiku(_line1, _line2, _line3) {\n            return false;\n        } catch {\n            return true;\n        }\n    }\n\n    function getHaiku(\n        ISubmission _submission\n    ) internal view returns (ISubmission.Haiku memory, bool) {\n        try _submission.getHaiku() returns (ISubmission.Haiku memory result) {\n            return (result, false);\n        } catch {\n            ISubmission.Haiku memory result;\n            return (result, true);\n        }\n    }\n\n    function shruggieHaiku(\n        ISubmission _submission\n    ) internal view returns (ISubmission.Haiku memory, bool) {\n        try _submission.shruggieHaiku() returns (\n            ISubmission.Haiku memory result\n        ) {\n            return (result, false);\n        } catch {\n            ISubmission.Haiku memory result;\n            return (result, true);\n        }\n    }\n}\n\ncontract TestShruggieHaiku is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should be able to save haiku and get shruggie\";\n\n        bool callError = Caller.saveHaiku(\n            submission,\n            \"I don't have the time\",\n            \"To write a good haiku here\",\n            \"So much more to teach!\"\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to saveHaiku failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        ISubmission.Haiku memory res;\n        (res, callError) = Caller.shruggieHaiku(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to haiku failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(res.line1, \"I don't have the time\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(res.line2, \"To write a good haiku here\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(res.line3, unicode\"So much more to teach! 🤷\")\n            );\n        }\n\n        // Validate that original haiku is correct and unchanged\n        (res, callError) = Caller.getHaiku(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to haiku failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(res.line1, \"I don't have the time\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(res.line2, \"To write a good haiku here\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(res.line3, \"So much more to teach!\")\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract ImportsUT is Cafe {\n    constructor() ERC721(\"Imports Pin\", \"SCDI\") {\n        tests.push(new TestShruggieHaiku());\n    }\n}\n"
    },
    "contracts/InheritanceUnitTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface IEmployee {\n    function idNumber() external returns (uint);\n\n    function managerId() external returns (uint);\n}\n\ninterface ISalaried is IEmployee {\n    function annualSalary() external returns (uint);\n}\n\ninterface IHourly is IEmployee {\n    function hourlyRate() external returns (uint);\n}\n\ninterface ISalesPerson is IHourly {}\n\ninterface IEngineeringManager is ISalaried {}\n\ninterface IInheritanceSubmission {\n    function salesPerson() external returns (address);\n\n    function engineeringManager() external returns (address);\n}\n\nlibrary Caller {\n    // @dev return result and call error bool flag\n    function callHourlyRate(IHourly _submission) internal returns (uint, bool) {\n        try _submission.hourlyRate() returns (uint result) {\n            return (result, false);\n        } catch {\n            console.log(\"Problema\");\n            return (0, true);\n        }\n    }\n\n    // @dev return result and call error bool flag\n    function callIdNumber(IEmployee _submission) internal returns (uint, bool) {\n        try _submission.idNumber() returns (uint result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n\n    // @dev return result and call error bool flag\n    function callManagerId(\n        IEmployee _submission\n    ) internal returns (uint, bool) {\n        try _submission.managerId() returns (uint result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n\n    // @dev return result and call error bool flag\n    function callSalary(ISalaried _submission) internal returns (uint, bool) {\n        try _submission.annualSalary() returns (uint result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n}\n\ncontract TestSalesPersonHourlyRate is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory testResult) {\n        address salesPersonAddress = IInheritanceSubmission(_submissionAddress)\n            .salesPerson();\n\n        ISalesPerson submission = ISalesPerson(salesPersonAddress);\n        testResult.assertResults.create();\n        testResult.message = \"Should have correct hourly rate for sales person\";\n\n        uint expectedHourlyRate = 20;\n\n        (uint resHourlyRate, bool callErrorHourlyRate) = Caller.callHourlyRate(\n            submission\n        );\n\n        if (callErrorHourlyRate) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to inheritance failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(resHourlyRate, expectedHourlyRate)\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract TestSalesPersonIdNumber is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory testResult) {\n        address salesPersonAddress = IInheritanceSubmission(_submissionAddress)\n            .salesPerson();\n        ISalesPerson submission = ISalesPerson(salesPersonAddress);\n\n        testResult.assertResults.create();\n        testResult.message = \"Sales person should have correct id number\";\n\n        uint expectedIdNumber = 55555;\n\n        (uint resIdNumber, bool callErrorIdNumber) = Caller.callIdNumber(\n            submission\n        );\n\n        if (callErrorIdNumber) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to inheritance failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(resIdNumber, expectedIdNumber)\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract TestEngineeringManagerAnnualSalary is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory testResult) {\n        address engineeringManagerAddress = IInheritanceSubmission(\n            _submissionAddress\n        ).engineeringManager();\n\n        IEngineeringManager submission = IEngineeringManager(\n            engineeringManagerAddress\n        );\n        testResult.assertResults.create();\n        testResult\n            .message = \"Engineering manager should have correct annual salary\";\n\n        uint expectedAnnualSalary = 200_000;\n\n        (uint resAnnualSalary, bool callErrorSalary) = Caller.callSalary(\n            submission\n        );\n\n        if (callErrorSalary) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to inheritance failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(resAnnualSalary, expectedAnnualSalary)\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract TestEngineeringManagerManagerId is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory testResult) {\n        address engineeringManagerAddress = IInheritanceSubmission(\n            _submissionAddress\n        ).engineeringManager();\n\n        IEngineeringManager submission = IEngineeringManager(\n            engineeringManagerAddress\n        );\n        testResult.assertResults.create();\n        testResult\n            .message = \"Engineering manager should have correct manager id\";\n\n        uint expectedManagerId = 11111;\n\n        (uint resManagedId, bool callErrorManagedId) = Caller.callManagerId(\n            submission\n        );\n\n        if (callErrorManagedId) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to inheritance failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(resManagedId, expectedManagerId)\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract InheritanceUnitTest is Cafe {\n    constructor() ERC721(\"Inheritance\", \"SCDI\") {\n        tests.push(new TestSalesPersonHourlyRate());\n        tests.push(new TestSalesPersonIdNumber());\n        tests.push(new TestEngineeringManagerAnnualSalary());\n        tests.push(new TestEngineeringManagerManagerId());\n    }\n}\n"
    },
    "contracts/MappingsUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    function getApprovedRecords() external view returns (string[] memory);\n\n    function addRecord(string memory _albumName) external;\n\n    function getUserFavorites(\n        address _address\n    ) external view returns (string[] memory);\n\n    function resetUserFavorites() external;\n}\n\nlibrary Caller {\n    function getApprovedRecords(\n        ISubmission _submission\n    ) internal view returns (string[] memory, bool) {\n        try _submission.getApprovedRecords() returns (string[] memory result) {\n            return (result, false);\n        } catch {\n            string[] memory badResult;\n            return (badResult, true);\n        }\n    }\n\n    function addRecord(\n        ISubmission _submission,\n        string memory _name\n    ) internal returns (bool) {\n        try _submission.addRecord(_name) {\n            return (false);\n        } catch {\n            return (true);\n        }\n    }\n\n    function getUserFavorites(\n        ISubmission _submission,\n        address _address\n    ) internal view returns (string[] memory, bool) {\n        try _submission.getUserFavorites(_address) returns (\n            string[] memory result\n        ) {\n            return (result, false);\n        } catch {\n            string[] memory badResult;\n            return (badResult, true);\n        }\n    }\n\n    function resetUserFavorites(\n        ISubmission _submission\n    ) internal returns (bool) {\n        try _submission.resetUserFavorites() {\n            return (false);\n        } catch {\n            return (true);\n        }\n    }\n}\n\n// Create a second contract to have a second address to test with\ncontract MappingsSecondCaller {\n    function secondAddRecord(\n        ISubmission _submission,\n        string memory _albumName\n    ) public returns (bool) {\n        return Caller.addRecord(_submission, _albumName);\n    }\n\n    function secondResetUserFavorites(ISubmission _submission) public {\n        Caller.resetUserFavorites(_submission);\n    }\n}\n\ncontract TestGetApprovedRecords is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external view override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should return the correct list\";\n\n        (string[] memory result, bool callError) = Caller.getApprovedRecords(\n            submission\n        );\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getApprovedRecords failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            string[9] memory expectedAlbums = [\n                \"Thriller\",\n                \"Back in Black\",\n                \"The Bodyguard\",\n                \"The Dark Side of the Moon\",\n                \"Their Greatest Hits (1971-1975)\",\n                \"Hotel California\",\n                \"Come On Over\",\n                \"Rumours\",\n                \"Saturday Night Fever\"\n            ];\n            string[] memory expected = new string[](9);\n            for (uint i = 0; i < expected.length; i++) {\n                expected[i] = expectedAlbums[i];\n            }\n            testResult.assertResults.push(Assert.equal(result, expected));\n        }\n        return testResult;\n    }\n}\n\ncontract TestGetUserFavorites is ITest, Assert {\n    MappingsSecondCaller secondCaller;\n\n    constructor(address _secondCallerAddress) {\n        secondCaller = MappingsSecondCaller(_secondCallerAddress);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should save and be able to get favorites\";\n\n        submission.resetUserFavorites();\n        secondCaller.secondResetUserFavorites(submission);\n\n        bool callError = Caller.addRecord(submission, \"Thriller\");\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to addRecord failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        callError = Caller.addRecord(submission, \"Back in Black\");\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to addRecord failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        (string[] memory albums, bool err) = Caller.getUserFavorites(\n            submission,\n            address(this)\n        );\n\n        if (err) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getUserFavorites failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            string[] memory expectedAlbums = new string[](2);\n            expectedAlbums[0] = \"Thriller\";\n            expectedAlbums[1] = \"Back in Black\";\n\n            testResult.assertResults.push(Assert.equal(albums, expectedAlbums));\n        }\n\n        // Use secondCaller to get different msg.sender\n        callError = secondCaller.secondAddRecord(submission, \"Rumours\");\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to addRecord failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        callError = secondCaller.secondAddRecord(\n            submission,\n            \"Saturday Night Fever\"\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to addRecord failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        (albums, err) = Caller.getUserFavorites(\n            submission,\n            address(secondCaller)\n        );\n\n        if (err) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getUserFavorites failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            string[] memory expectedAlbums = new string[](2);\n            expectedAlbums[0] = \"Rumours\";\n            expectedAlbums[1] = \"Saturday Night Fever\";\n\n            testResult.assertResults.push(Assert.equal(albums, expectedAlbums));\n        }\n\n        return testResult;\n    }\n}\n\ncontract MappingsUT is Cafe {\n    constructor(address _secondCallerAddress) ERC721(\"Mappings Pin\", \"SCDM\") {\n        tests.push(new TestGetApprovedRecords());\n        tests.push(new TestGetUserFavorites(_secondCallerAddress));\n    }\n}\n"
    },
    "contracts/MinimalTokenUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\naddress constant CAN_RECEIVE = 0x83c4aFD6E1400B78c9ac9b9dc9a5ceeD726A6D36;\n\ncontract ZeroBalance {}\n\ninterface ISubmission {\n    function claim() external;\n\n    function safeTransfer(address _to, uint _amount) external;\n\n    function balances(address _address) external returns (uint);\n\n    function totalSupply() external returns (uint);\n\n    function totalClaimed() external returns (uint);\n}\n\nlibrary Caller {\n    function claim(\n        ISubmission _submission\n    ) internal returns (string memory, bool) {\n        try _submission.claim() {\n            return (\"\", false);\n        } catch (bytes memory lowLevelData) {\n            return (string(lowLevelData), true);\n        }\n    }\n\n    function safeTransfer(\n        ISubmission _submission,\n        address _to,\n        uint _amount\n    ) internal returns (string memory, bool) {\n        try _submission.safeTransfer(_to, _amount) {\n            return (\"\", false);\n        } catch (bytes memory lowLevelData) {\n            return (string(lowLevelData), true);\n        }\n    }\n}\n\ncontract MinimalTokenSecondCaller {\n    function claim(\n        ISubmission submission\n    ) public returns (string memory, bool) {\n        return Caller.claim(submission);\n    }\n}\n\ncontract TestTokenClaim is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"User should be able to claim exactly once\";\n\n        uint amountClaimed = submission.totalClaimed();\n\n        (string memory message, bool callError) = Caller.claim(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(submission.balances(address(this)), 1000)\n            );\n        }\n\n        (message, callError) = Caller.claim(submission);\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Expected revert with TokensClaimed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"TokensClaimed()\"))\n                )\n            );\n        }\n\n        uint amountClaimedAfter = submission.totalClaimed();\n\n        testResult.assertResults.push(\n            Assert.equal(amountClaimedAfter, amountClaimed + 1000)\n        );\n\n        return testResult;\n    }\n}\n\ncontract TestSecondClaimer is ITest, Assert {\n    MinimalTokenSecondCaller secondCaller;\n\n    constructor(address _secondCaller) {\n        secondCaller = MinimalTokenSecondCaller(_secondCaller);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Second user should be able to claim exactly once\";\n\n        uint amountClaimed = submission.totalClaimed();\n\n        (string memory message, bool callError) = secondCaller.claim(\n            submission\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(submission.balances(address(secondCaller)), 1000)\n            );\n        }\n\n        (message, callError) = secondCaller.claim(submission);\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Expected revert with TokensClaimed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(abi.encodeWithSignature(\"TokensClaimed()\"))\n                )\n            );\n        }\n\n        uint amountClaimedAfter = submission.totalClaimed();\n\n        testResult.assertResults.push(\n            Assert.equal(amountClaimedAfter, amountClaimed + 1000)\n        );\n\n        return testResult;\n    }\n}\n\ncontract TestSafeTransfer is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should only transfer to funded addresses\";\n\n        // Claim tokens to use for trading\n        (string memory message, bool callError) = Caller.claim(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to claim failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(submission.balances(address(this)), 1000)\n            );\n        }\n\n        // Deploy an empty contract to have a guaranteed zero balance\n        ZeroBalance zeroBalance = new ZeroBalance();\n\n        (message, callError) = Caller.safeTransfer(\n            submission,\n            CAN_RECEIVE,\n            100\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to safeTransfer failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(submission.balances(CAN_RECEIVE), 100)\n            );\n        }\n\n        (message, callError) = Caller.safeTransfer(\n            submission,\n            address(zeroBalance),\n            100\n        );\n        if (!callError) {\n            console.log(\"didn't revert\");\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Expected UnsafeTransfer revert\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(\n                        abi.encodeWithSignature(\n                            \"UnsafeTransfer(address)\",\n                            address(zeroBalance)\n                        )\n                    )\n                )\n            );\n        }\n\n        (message, callError) = Caller.safeTransfer(submission, address(0), 100);\n        if (!callError) {\n            console.log(\"didn't revert\");\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Expected UnsafeTransfer revert\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(\n                    message,\n                    string(\n                        abi.encodeWithSignature(\n                            \"UnsafeTransfer(address)\",\n                            address(0)\n                        )\n                    )\n                )\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract MinimalTokenUT is Cafe {\n    constructor(\n        address _secondCallerAddress\n    ) ERC721(\"Minimal Token Pin\", \"SCDMT\") {\n        tests.push(new TestTokenClaim());\n        tests.push(new TestSecondClaimer(_secondCallerAddress));\n        tests.push(new TestSafeTransfer());\n    }\n}\n"
    },
    "contracts/NewUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    function deploy() external returns (address);\n}\n\ninterface IAddressBook {\n    struct Contact {\n        uint id;\n        string firstName;\n        string lastName;\n        uint[] phoneNumbers;\n    }\n\n    function addContact(\n        string memory _firstName,\n        string memory _lastName,\n        uint[] memory _phoneNumbers\n    ) external;\n\n    function deleteContact(uint _id) external;\n\n    function getContact(uint _id) external view returns (Contact memory);\n\n    function getAllContacts() external view returns (Contact[] memory);\n}\n\nlibrary Caller {\n    function deploy(ISubmission _submission) internal returns (address, bool) {\n        try _submission.deploy() returns (address result) {\n            return (result, false);\n        } catch {\n            return (address(0), true);\n        }\n    }\n\n    function addContact(\n        IAddressBook _addressBook,\n        string memory _firstName,\n        string memory _lastName,\n        uint[] memory _phoneNumbers\n    ) internal returns (string memory, bool) {\n        try _addressBook.addContact(_firstName, _lastName, _phoneNumbers) {\n            return (\"\", false);\n        } catch Error(string memory reason) {\n            return (reason, true);\n        } catch {\n            return (\"\", true);\n        }\n    }\n\n    function deleteContact(\n        IAddressBook _addressBook,\n        uint _id\n    ) internal returns (string memory, bool) {\n        try _addressBook.deleteContact(_id) {\n            return (\"\", false);\n        } catch Error(string memory reason) {\n            return (reason, true);\n        } catch {\n            return (\"\", true);\n        }\n    }\n\n    function getContact(\n        IAddressBook _addressBook,\n        uint _id\n    ) internal view returns (IAddressBook.Contact memory, bool) {\n        try _addressBook.getContact(_id) returns (\n            IAddressBook.Contact memory result\n        ) {\n            return (result, false);\n        } catch {\n            IAddressBook.Contact memory result;\n            return (result, true);\n        }\n    }\n\n    function getAllContacts(\n        IAddressBook _addressBook\n    ) internal view returns (IAddressBook.Contact[] memory, bool) {\n        try _addressBook.getAllContacts() returns (\n            IAddressBook.Contact[] memory result\n        ) {\n            return (result, false);\n        } catch {\n            IAddressBook.Contact[] memory result;\n            return (result, true);\n        }\n    }\n}\n\ncontract NewSecondCaller {\n    function addContact(\n        IAddressBook _addressBook,\n        string memory _firstName,\n        string memory _lastName,\n        uint[] memory _phoneNumbers\n    ) public returns (string memory, bool) {\n        return\n            Caller.addContact(\n                _addressBook,\n                _firstName,\n                _lastName,\n                _phoneNumbers\n            );\n    }\n\n    function deleteContact(\n        IAddressBook _addressBook,\n        uint _id\n    ) public returns (string memory, bool) {\n        return Caller.deleteContact(_addressBook, _id);\n    }\n}\n\ncontract TestDeployment is IDeploy, Assert {\n    function deploy(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory, address) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Factory can deploy contract and return address\";\n\n        // Use the factory to deploy an instance of addressbook owned by\n        // the UT contract\n        (address deployedAddress, bool callError) = Caller.deploy(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to deploy failed\", \"\", \"\", \"\")\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.notEqual(deployedAddress, address(0))\n            );\n        }\n\n        return (testResult, deployedAddress);\n    }\n}\n\ncontract TestAddDelete is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IAddressBook deployed = IAddressBook(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Owner should be able to add and delete\";\n\n        uint[] memory phoneNumbers = new uint[](1);\n        phoneNumbers[0] = 2021234567;\n        (string memory message, bool callError) = Caller.addContact(\n            deployed,\n            \"Brian\",\n            \"Doyle\",\n            phoneNumbers\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to addContact failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        phoneNumbers[0] = 2021234555;\n        (message, callError) = Caller.addContact(\n            deployed,\n            \"Joe\",\n            \"Smith\",\n            phoneNumbers\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to addContact failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        phoneNumbers[0] = 2021234571;\n        (message, callError) = Caller.addContact(\n            deployed,\n            \"Jane\",\n            \"Doe\",\n            phoneNumbers\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to addContact failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        IAddressBook.Contact memory contact;\n        (contact, callError) = Caller.getContact(deployed, 0);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getContact failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(contact.id, 0));\n            testResult.assertResults.push(\n                Assert.equal(contact.lastName, \"Doyle\")\n            );\n        }\n\n        (contact, callError) = Caller.getContact(deployed, 2);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getContact failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(contact.firstName, \"Jane\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(contact.phoneNumbers[0], 2021234571)\n            );\n        }\n\n        (message, callError) = Caller.deleteContact(deployed, 1);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to deleteContact failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        IAddressBook.Contact[] memory contacts;\n        (contacts, callError) = Caller.getAllContacts(deployed);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getAllContacts failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(contacts.length, 2));\n            testResult.assertResults.push(Assert.equal(contacts[0].id, 0));\n            testResult.assertResults.push(\n                Assert.equal(contacts[0].firstName, \"Brian\")\n            );\n            testResult.assertResults.push(Assert.equal(contacts[1].id, 2));\n            testResult.assertResults.push(\n                Assert.equal(contacts[1].lastName, \"Doe\")\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract TestOnlyOwner is ITest, Assert {\n    NewSecondCaller secondCaller;\n\n    constructor(address _secondCallerAddress) {\n        secondCaller = NewSecondCaller(_secondCallerAddress);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IAddressBook deployed = IAddressBook(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Non-owner should revert on add/delete\";\n\n        uint[] memory phoneNumbers = new uint[](1);\n        phoneNumbers[0] = 2021234567;\n        (string memory message, bool callError) = secondCaller.addContact(\n            deployed,\n            \"Brian\",\n            \"Doyle\",\n            phoneNumbers\n        );\n        if (!callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Transaction failed to revert\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(\n                Assert.equal(message, \"Ownable: caller is not the owner\")\n            );\n        }\n\n        return testResult;\n    }\n}\n\ncontract NewUT is Cafe {\n    constructor(\n        address _secondCallerAddress\n    ) ERC721(\"New Keyword Pin\", \"SCDN\") {\n        deployer = new TestDeployment();\n        tests.push(new TestOnlyOwner(_secondCallerAddress));\n    }\n}\n"
    },
    "contracts/StorageUnitTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface IEmployeeStorage {\n    function grantShares(uint16 _newShares) external;\n\n    function checkForPacking(uint _slot) external returns (uint result);\n\n    function name() external view returns (string memory);\n\n    function idNumber() external view returns (uint);\n\n    function salary() external view returns (uint24);\n\n    function shares() external view returns (uint16);\n\n    function viewShares() external view returns (uint16);\n\n    function viewSalary() external view returns (uint24);\n\n    function debugResetShares() external;\n}\n\nlibrary Caller {\n    function callRemoteGrantShares(\n        IEmployeeStorage _submission,\n        uint16 _newShares\n    ) internal returns (string memory, bool) {\n        try _submission.grantShares(_newShares) {\n            return (\"\", false);\n        } catch Error(string memory reason) {\n            return (reason, true);\n        } catch {\n            return (\"\", true);\n        }\n    }\n\n    function callRemoteCheckForPacking(\n        IEmployeeStorage _submission,\n        uint _slot\n    ) internal returns (uint, bool) {\n        try _submission.checkForPacking(_slot) returns (uint result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n\n    function callRemoteSalary(\n        IEmployeeStorage _submission\n    ) internal view returns (uint24, bool) {\n        try _submission.salary() returns (uint24 result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n\n    function callRemoteShares(\n        IEmployeeStorage _submission\n    ) internal view returns (uint16, bool) {\n        try _submission.shares() returns (uint16 result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n\n    function callRemoteViewSalary(\n        IEmployeeStorage _submission\n    ) internal view returns (uint24, bool) {\n        try _submission.viewSalary() returns (uint24 result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n\n    function callRemoteViewShares(\n        IEmployeeStorage _submission\n    ) internal view returns (uint16, bool) {\n        try _submission.viewShares() returns (uint16 result) {\n            return (result, false);\n        } catch {\n            return (0, true);\n        }\n    }\n}\n\ncontract testPublicStorage is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external view override returns (Cafe.TestResult memory) {\n        IEmployeeStorage submission = IEmployeeStorage(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Constructor should initialize data correctly\";\n\n        // Shouldn't need to check for call failure for public automatic getters\n        testResult.assertResults.push(Assert.equal(submission.name(), \"Pat\"));\n        testResult.assertResults.push(\n            Assert.equal(submission.idNumber(), 112358132134)\n        );\n\n        return testResult;\n    }\n}\n\ncontract testPrivateStorage is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IEmployeeStorage submission = IEmployeeStorage(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult\n            .message = \"Private vars should revert, have public accessors\";\n\n        // Reset share numbers for test\n        submission.debugResetShares();\n\n        (uint16 shares, bool callError) = Caller.callRemoteShares(submission);\n        testResult.assertResults.push(Assert.isTrue(callError));\n\n        (shares, callError) = Caller.callRemoteViewShares(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to remoteViewShares failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(shares, 1000));\n        }\n\n        uint24 salary;\n        (salary, callError) = Caller.callRemoteSalary(submission);\n        testResult.assertResults.push(Assert.isTrue(callError));\n\n        (salary, callError) = Caller.callRemoteViewSalary(submission);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to remoteViewSalary failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(salary, 50000));\n        }\n        return testResult;\n    }\n}\n\ncontract testPacking is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IEmployeeStorage submission = IEmployeeStorage(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Variables should pack appropriately\";\n        (uint res, bool callError) = Caller.callRemoteCheckForPacking(\n            submission,\n            3\n        );\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to checkForPacking failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(res, 0));\n        }\n        return testResult;\n    }\n}\n\ncontract testGrantShares is ITest, Assert {\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        IEmployeeStorage submission = IEmployeeStorage(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Can grant shares, revert >= 5000\";\n\n        // Reset share numbers for test\n        submission.debugResetShares();\n\n        (string memory reason, bool callError) = Caller.callRemoteGrantShares(\n            submission,\n            5001\n        );\n\n        testResult.assertResults.push(Assert.isTrue(callError));\n        testResult.assertResults.push(Assert.equal(reason, \"Too many shares\"));\n\n        (reason, callError) = Caller.callRemoteGrantShares(submission, 1000);\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to grantShares failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            uint16 shares;\n            (shares, callError) = Caller.callRemoteViewShares(submission);\n            testResult.assertResults.push(Assert.equal(shares, 2000));\n        }\n        return testResult;\n    }\n}\n\ncontract StorageUT is Cafe {\n    constructor() ERC721(\"Storage Pin\", \"SCDS\") {\n        tests.push(new testPublicStorage());\n        tests.push(new testPrivateStorage());\n        tests.push(new testPacking());\n        tests.push(new testGrantShares());\n    }\n}\n"
    },
    "contracts/StructsUT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./Cafe.sol\";\nimport \"./Assert.sol\";\n\nusing List for List.ARList;\n\ninterface ISubmission {\n    struct Car {\n        string make;\n        string model;\n        string color;\n        uint numberOfDoors;\n    }\n\n    function addCar(\n        string calldata _make,\n        string calldata _model,\n        string calldata _color,\n        uint _numberOfDoors\n    ) external;\n\n    function updateCar(\n        uint _index,\n        string calldata _make,\n        string calldata _model,\n        string calldata _color,\n        uint _numberOfDoors\n    ) external;\n\n    function getUserCars(address _user) external view returns (Car[] memory);\n\n    function getMyCars() external view returns (Car[] memory);\n\n    function resetMyGarage() external;\n}\n\nlibrary Caller {\n    function addCar(\n        ISubmission _submission,\n        string memory _make,\n        string memory _model,\n        string memory _color,\n        uint _numberOfDoors\n    ) internal returns (bool) {\n        try _submission.addCar(_make, _model, _color, _numberOfDoors) {\n            return false;\n        } catch {\n            return true;\n        }\n    }\n\n    function updateCar(\n        ISubmission _submission,\n        uint _index,\n        string memory _make,\n        string memory _model,\n        string memory _color,\n        uint _numberOfDoors\n    ) internal returns (bool) {\n        try\n            _submission.updateCar(_index, _make, _model, _color, _numberOfDoors)\n        {\n            return false;\n        } catch {\n            return true;\n        }\n    }\n\n    function getUserCars(\n        ISubmission _submission,\n        address _user\n    ) internal view returns (ISubmission.Car[] memory, bool) {\n        try _submission.getUserCars(_user) returns (\n            ISubmission.Car[] memory result\n        ) {\n            return (result, false);\n        } catch {\n            ISubmission.Car[] memory badResult;\n            return (badResult, true);\n        }\n    }\n\n    function getMyCars(\n        ISubmission _submission\n    ) internal view returns (ISubmission.Car[] memory, bool) {\n        try _submission.getMyCars() returns (ISubmission.Car[] memory result) {\n            return (result, false);\n        } catch {\n            ISubmission.Car[] memory badResult;\n            return (badResult, true);\n        }\n    }\n\n    function resetMyGarage(ISubmission _submission) internal returns (bool) {\n        try _submission.resetMyGarage() {\n            return false;\n        } catch {\n            return true;\n        }\n    }\n}\n\ninterface IStructsSecondCaller {\n    function addCar(\n        ISubmission _submission,\n        string calldata _make,\n        string calldata _model,\n        string calldata _color,\n        uint _numberOfDoors\n    ) external;\n\n    function secondUpdateCar(\n        ISubmission _submission,\n        uint _index,\n        string calldata _make,\n        string calldata _model,\n        string calldata _color,\n        uint _numberOfDoors\n    ) external;\n\n    function resetMyGarage(ISubmission _submission) external;\n}\n\n// Create a second contract to have a second address to test with\ncontract StructsSecondCaller {\n    function addCar(\n        ISubmission _submission,\n        string calldata _make,\n        string calldata _model,\n        string calldata _color,\n        uint _numberOfDoors\n    ) public returns (bool) {\n        return\n            Caller.addCar(_submission, _make, _model, _color, _numberOfDoors);\n    }\n\n    function updateCar(\n        ISubmission _submission,\n        uint _index,\n        string calldata _make,\n        string calldata _model,\n        string calldata _color,\n        uint _numberOfDoors\n    ) public returns (bool) {\n        return\n            Caller.updateCar(\n                _submission,\n                _index,\n                _make,\n                _model,\n                _color,\n                _numberOfDoors\n            );\n    }\n\n    function resetMyGarage(ISubmission _submission) public returns (bool) {\n        return Caller.resetMyGarage(_submission);\n    }\n}\n\ncontract TestAddAndUpdateCar is ITest, Assert {\n    StructsSecondCaller secondCaller;\n\n    constructor(address _secondCallerAddress) {\n        secondCaller = StructsSecondCaller(_secondCallerAddress);\n    }\n\n    function execute(\n        address _submissionAddress\n    ) external override returns (Cafe.TestResult memory) {\n        ISubmission submission = ISubmission(_submissionAddress);\n        Cafe.TestResult memory testResult;\n        testResult.assertResults.create();\n        testResult.message = \"Should allow saving cars for two users\";\n\n        // Reset garages for testing\n        bool callError = Caller.resetMyGarage(submission);\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to resetMyGarage failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        callError = secondCaller.resetMyGarage(submission);\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to resetMyGarage failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        callError = Caller.addCar(submission, \"Mazda\", \"Miata\", \"Silver\", 2);\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to addCar failed\", \"\", \"\", \"\")\n            );\n        }\n\n        callError = Caller.addCar(submission, \"Volkswagen\", \"GTI\", \"Red\", 4);\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to addCar failed\", \"\", \"\", \"\")\n            );\n        }\n\n        callError = secondCaller.addCar(\n            submission,\n            \"Ford\",\n            \"Mustang\",\n            \"Blue\",\n            2\n        );\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to addCar failed\", \"\", \"\", \"\")\n            );\n        }\n\n        callError = secondCaller.addCar(\n            submission,\n            \"Ford\",\n            \"Focus\",\n            \"Silver\",\n            4\n        );\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(false, \"Call to addCar failed\", \"\", \"\", \"\")\n            );\n        }\n\n        ISubmission.Car[] memory cars;\n        (cars, callError) = Caller.getUserCars(submission, address(this));\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getUserCars failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(cars[0].make, \"Mazda\"));\n            testResult.assertResults.push(Assert.equal(cars[0].model, \"Miata\"));\n            testResult.assertResults.push(\n                Assert.equal(cars[0].color, \"Silver\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(cars[0].numberOfDoors, 2)\n            );\n\n            testResult.assertResults.push(\n                Assert.equal(cars[1].make, \"Volkswagen\")\n            );\n            testResult.assertResults.push(Assert.equal(cars[1].model, \"GTI\"));\n            testResult.assertResults.push(Assert.equal(cars[1].color, \"Red\"));\n            testResult.assertResults.push(\n                Assert.equal(cars[1].numberOfDoors, 4)\n            );\n        }\n\n        (cars, callError) = Caller.getUserCars(\n            submission,\n            address(secondCaller)\n        );\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getUserCars failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(cars[0].make, \"Ford\"));\n            testResult.assertResults.push(\n                Assert.equal(cars[0].model, \"Mustang\")\n            );\n            testResult.assertResults.push(Assert.equal(cars[0].color, \"Blue\"));\n            testResult.assertResults.push(\n                Assert.equal(cars[0].numberOfDoors, 2)\n            );\n\n            testResult.assertResults.push(Assert.equal(cars[1].make, \"Ford\"));\n            testResult.assertResults.push(Assert.equal(cars[1].model, \"Focus\"));\n            testResult.assertResults.push(\n                Assert.equal(cars[1].color, \"Silver\")\n            );\n            testResult.assertResults.push(\n                Assert.equal(cars[1].numberOfDoors, 4)\n            );\n        }\n\n        callError = Caller.updateCar(submission, 0, \"Mazda\", \"Miata\", \"Red\", 2);\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to updateCar failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        }\n\n        (cars, callError) = Caller.getUserCars(submission, address(this));\n\n        if (callError) {\n            testResult.assertResults.push(\n                Assert.AssertResult(\n                    false,\n                    \"Call to getUserCars failed\",\n                    \"\",\n                    \"\",\n                    \"\"\n                )\n            );\n        } else {\n            testResult.assertResults.push(Assert.equal(cars[0].color, \"Red\"));\n        }\n\n        return testResult;\n    }\n}\n\ncontract StructsUT is Cafe {\n    constructor(address _secondCallerAddress) ERC721(\"Structs Pin\", \"SCDS\") {\n        tests.push(new TestAddAndUpdateCar(_secondCallerAddress));\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}