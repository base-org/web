"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[6950],{82247:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(14041);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),y=o,g=d["".concat(s,".").concat(y)]||d[y]||u[y]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},41765:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(89575),o=(n(14041),n(82247));const r={title:"Deploying a smart contract using Foundry",slug:"/deploy-with-foundry",description:"A tutorial that teaches how to deploy a smart contract on the Base test network using Foundry. Includes instructions for setting up the environment, compiling, and deploying the smart contract.",author:"neodaoist",keywords:["Foundry","smart contract","ERC-721","Base","Base test network","Base testnet","Rust","Solidity","smart contract deployment","deploy a smart contract","build on base","write smart contract","smart contract development"],tags:["smart contracts"],difficulty:"beginner",displayed_sidebar:null},i=void 0,l={unversionedId:"docs/deploy-with-foundry",id:"docs/deploy-with-foundry",title:"Deploying a smart contract using Foundry",description:"A tutorial that teaches how to deploy a smart contract on the Base test network using Foundry. Includes instructions for setting up the environment, compiling, and deploying the smart contract.",source:"@site/tutorials/docs/0_deploy-with-foundry.md",sourceDirName:"docs",slug:"/deploy-with-foundry",permalink:"/tutorials/deploy-with-foundry",draft:!1,tags:[{label:"smart contracts",permalink:"/tutorials/tags/smart-contracts"}],version:"current",sidebarPosition:0,frontMatter:{title:"Deploying a smart contract using Foundry",slug:"/deploy-with-foundry",description:"A tutorial that teaches how to deploy a smart contract on the Base test network using Foundry. Includes instructions for setting up the environment, compiling, and deploying the smart contract.",author:"neodaoist",keywords:["Foundry","smart contract","ERC-721","Base","Base test network","Base testnet","Rust","Solidity","smart contract deployment","deploy a smart contract","build on base","write smart contract","smart contract development"],tags:["smart contracts"],difficulty:"beginner",displayed_sidebar:null}},s={},c=[{value:"Objectives",id:"objectives",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Foundry",id:"foundry",level:3},{value:"Coinbase Wallet",id:"coinbase-wallet",level:3},{value:"Wallet funds",id:"wallet-funds",level:3},{value:"Creating a project",id:"creating-a-project",level:2},{value:"Compiling the smart contract",id:"compiling-the-smart-contract",level:2},{value:"Configuring Foundry with Base",id:"configuring-foundry-with-base",level:2},{value:"Storing your private key",id:"storing-your-private-key",level:3},{value:"Adding Base as a network",id:"adding-base-as-a-network",level:3},{value:"Loading environment variables",id:"loading-environment-variables",level:3},{value:"Deploying the smart contract",id:"deploying-the-smart-contract",level:2},{value:"Verifying the Smart Contract",id:"verifying-the-smart-contract",level:2},{value:"Interacting with the Smart Contract",id:"interacting-with-the-smart-contract",level:2},{value:"Performing a call",id:"performing-a-call",level:3},{value:"Signing and publishing a transaction",id:"signing-and-publishing-a-transaction",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"This article will provide an overview of the ",(0,o.yg)("a",{parentName:"p",href:"https://book.getfoundry.sh/"},"Foundry")," development toolchain, and show you how to deploy a contract to ",(0,o.yg)("strong",{parentName:"p"},"Base Sepolia")," testnet."),(0,o.yg)("p",null,"Foundry is a powerful suite of tools to develop, test, and debug your smart contracts. It comprises several individual tools:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"forge"),": the main workhorse of Foundry \u2014 for developing, testing, compiling, and deploying smart contracts"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"cast"),": a command-line tool for performing Ethereum RPC calls (e.g., interacting with contracts, sending transactions, and getting onchain data)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"anvil"),": a local testnet node, for testing contract behavior from a frontend or over RPC"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"chisel"),": a Solidity ",(0,o.yg)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"},"REPL"),", for trying out Solidity snippets on a local or forked network")),(0,o.yg)("p",null,"Foundry offers extremely fast feedback loops (due to the under-the-hood Rust implementation) and less context switching \u2014 because we'll be writing our contracts, tests, and deployment scripts ",(0,o.yg)("strong",{parentName:"p"},"All")," in Solidity!"),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"For production / mainnet deployments the steps below in this tutorial will be almost identical, however, you'll want to ensure that you've configured ",(0,o.yg)("inlineCode",{parentName:"p"},"Base")," (mainnet) as the network rather than ",(0,o.yg)("inlineCode",{parentName:"p"},"Base Sepolia")," (testnet).")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"objectives"},"Objectives"),(0,o.yg)("p",null,"By the end of this tutorial, you should be able to do the following:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Setup Foundry for Base"),(0,o.yg)("li",{parentName:"ul"},"Create an NFT smart contract for Base"),(0,o.yg)("li",{parentName:"ul"},"Compile a smart contract for Base (using ",(0,o.yg)("inlineCode",{parentName:"li"},"forge"),")"),(0,o.yg)("li",{parentName:"ul"},"Deploy a smart contract to Base (also with ",(0,o.yg)("inlineCode",{parentName:"li"},"forge"),")"),(0,o.yg)("li",{parentName:"ul"},"Interact with a smart contract deployed on Base (using ",(0,o.yg)("inlineCode",{parentName:"li"},"cast"),")")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.yg)("h3",{id:"foundry"},"Foundry"),(0,o.yg)("p",null,"This tutorial requires you have Foundry installed."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"From the command-line (terminal), run: ",(0,o.yg)("inlineCode",{parentName:"li"},"curl -L https://foundry.paradigm.xyz | bash")),(0,o.yg)("li",{parentName:"ul"},"Then run ",(0,o.yg)("inlineCode",{parentName:"li"},"foundryup"),", to install the latest (nightly) build of Foundry")),(0,o.yg)("p",null,"For more information, see the Foundry Book ",(0,o.yg)("a",{parentName:"p",href:"https://book.getfoundry.sh/getting-started/installation"},"installation guide"),"."),(0,o.yg)("h3",{id:"coinbase-wallet"},"Coinbase Wallet"),(0,o.yg)("p",null,"In order to deploy a smart contract, you will first need a web3 wallet. You can create a wallet by downloading the Coinbase Wallet browser extension."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Download ",(0,o.yg)("a",{parentName:"li",href:"https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad?hl=en"},"Coinbase Wallet"))),(0,o.yg)("h3",{id:"wallet-funds"},"Wallet funds"),(0,o.yg)("p",null,"Deploying contracts to the blockchain requires a gas fee. Therefore, you will need to fund your wallet with ETH to cover those gas fees."),(0,o.yg)("p",null,"For this tutorial, you will be deploying a contract to the Base Sepolia test network. You can fund your wallet with Base Sepolia ETH using one of the faucets listed on the Base ",(0,o.yg)("a",{parentName:"p",href:"https://docs.base.org/tools/network-faucets"},"Network Faucets")," page."),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"creating-a-project"},"Creating a project"),(0,o.yg)("p",null,"Before you can begin deploying smart contracts to Base, you need to set up your development environment by creating a Foundry project."),(0,o.yg)("p",null,"To create a new Foundry project, first create a new directory:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"mkdir myproject\n")),(0,o.yg)("p",null,"Then run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"cd myproject\nforge init\n")),(0,o.yg)("p",null,"This will create a Foundry project, which has the following basic layout:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},".\n\u251c\u2500\u2500 foundry.toml\n\u251c\u2500\u2500 script\n \u2502\xa0\xa0 \u2514\u2500\u2500 Counter.s.sol\n\u251c\u2500\u2500 src\n \u2502\xa0\xa0 \u2514\u2500\u2500 Counter.sol\n\u2514\u2500\u2500 test\n    \u2514\u2500\u2500 Counter.t.sol\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"compiling-the-smart-contract"},"Compiling the smart contract"),(0,o.yg)("p",null,"Below is a simple NFT smart contract (",(0,o.yg)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-721"},"ERC-721"),") written in the Solidity programming language:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";\n\ncontract NFT is ERC721 {\n    uint256 public currentTokenId;\n\n    constructor() ERC721("NFT Name", "NFT") {}\n\n    function mint(address recipient) public payable returns (uint256) {\n        uint256 newItemId = ++currentTokenId;\n        _safeMint(recipient, newItemId);\n        return newItemId;\n    }\n}\n')),(0,o.yg)("p",null,"The Solidity code above defines a smart contract named ",(0,o.yg)("inlineCode",{parentName:"p"},"NFT"),". The code uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"ERC721")," interface provided by the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/5.x/"},"OpenZeppelin Contracts library")," to create an NFT smart contract. OpenZeppelin allows developers to leverage battle-tested smart contract implementations that adhere to official ERC standards."),(0,o.yg)("p",null,"To add the OpenZeppelin Contracts library to your project, run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"forge install openzeppelin/openzeppelin-contracts\n")),(0,o.yg)("p",null,"In your project, delete the ",(0,o.yg)("inlineCode",{parentName:"p"},"src/Counter.sol")," contract that was generated with the project and add the above code in a new file called ",(0,o.yg)("inlineCode",{parentName:"p"},"contracts/NFT.sol"),". (You can also delete the ",(0,o.yg)("inlineCode",{parentName:"p"},"test/Counter.t.sol")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"script/Counter.s.sol")," files, but you should add your own tests ASAP!)."),(0,o.yg)("p",null,"To compile our basic NFT contract using Foundry, run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"forge build\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"configuring-foundry-with-base"},"Configuring Foundry with Base"),(0,o.yg)("p",null,"Next we will configure your Foundry project to deploy smart contracts to the Base network. First we'll store your private key in an encrypted keystore, then we'll add Base as a network."),(0,o.yg)("h3",{id:"storing-your-private-key"},"Storing your private key"),(0,o.yg)("p",null,"The following command will import your private key to Foundry's secure keystore. You will be prompted to enter your private key, as well as a password for signing transactions:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"cast wallet import deployer --interactive\n")),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"For instructions on how to get your private key from Coinbase Wallet, visit the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.cloud.coinbase.com/wallet-sdk/docs/developer-settings#show-private-key"},"Coinbase Wallet documentation"),". ",(0,o.yg)("strong",{parentName:"p"},"It is critical that you do NOT commit this to a public repo"),".")),(0,o.yg)("p",null,"Run this command to confirm that the 'deployer' account is setup in Foundry:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"cast wallet list\n")),(0,o.yg)("h3",{id:"adding-base-as-a-network"},"Adding Base as a network"),(0,o.yg)("p",null,"Now create a ",(0,o.yg)("inlineCode",{parentName:"p"},".env")," file in the home directory of your project to add the Base network and an API key for verifying your contract on Basescan:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'BASE_MAINNET_RPC="https://mainnet.base.org"\nBASE_SEPOLIA_RPC="https://sepolia.base.org"\nETHERSCAN_API_KEY="PLACEHOLDER_STRING"\n')),(0,o.yg)("p",null,"Note that even though we're using Basescan as our block explorer, Foundry expects the API key to be defined as ",(0,o.yg)("inlineCode",{parentName:"p"},"ETHERSCAN_API_KEY"),"."),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"When verifying a contract with Basescan on testnet (Sepolia), an API key is not required. You can leave the value as ",(0,o.yg)("inlineCode",{parentName:"p"},"PLACEHOLDER_STRING"),". On mainnet, you can get your Basescan API key from ",(0,o.yg)("a",{parentName:"p",href:"https://basescan.org/myapikey"},"here")," after you sign up for an account.")),(0,o.yg)("h3",{id:"loading-environment-variables"},"Loading environment variables"),(0,o.yg)("p",null,"Now that you've created the above ",(0,o.yg)("inlineCode",{parentName:"p"},".env")," file, run the following command to load the environment variables in the current command line session:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"source .env\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"deploying-the-smart-contract"},"Deploying the smart contract"),(0,o.yg)("p",null,"With your contract compiled and your environment configured, you are ready to deploy to the Base Sepolia test network!"),(0,o.yg)("p",null,"Today we'll use the ",(0,o.yg)("inlineCode",{parentName:"p"},"forge create")," command, which is a straightforward way to deploy a single contract at a time. In the future, you may want to look into ",(0,o.yg)("a",{parentName:"p",href:"https://book.getfoundry.sh/tutorials/solidity-scripting"},(0,o.yg)("inlineCode",{parentName:"a"},"forge script")),", which enables scripting onchain transactions and deploying more complex smart contract projects."),(0,o.yg)("p",null,"You'll need testnet ETH in your wallet. See the ",(0,o.yg)("a",{parentName:"p",href:"#prerequisites"},"prerequisites")," if you haven't done that yet. Otherwise, the deployment attempt will fail."),(0,o.yg)("p",null,"To deploy the contract to the Base Sepolia test network, run the following command. You will be prompted to enter the password that you set earlier, when you imported your private key:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"forge create ./src/NFT.sol:NFT --rpc-url $BASE_SEPOLIA_RPC --account deployer\n")),(0,o.yg)("p",null,"The contract will be deployed on the Base Sepolia test network. You can view the deployment status and contract by using a ",(0,o.yg)("a",{parentName:"p",href:"/docs/tools/block-explorers"},"block explorer")," and searching for the address returned by your deploy script. If you've deployed an exact copy of the NFT contract above, it will already be verified and you'll be able to read and write to the contract using the web interface."),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"If you'd like to deploy to mainnet, you'll modify the command like so:"),(0,o.yg)("pre",{parentName:"admonition"},(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"forge create ./src/NFT.sol:NFT --rpc-url $BASE_MAINNET_RPC --account deployer\n"))),(0,o.yg)("p",null,"Regardless of the network you're deploying to, if you're deploying a new or modified contract, you'll need to verify it."),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"verifying-the-smart-contract"},"Verifying the Smart Contract"),(0,o.yg)("p",null,"In web3, it's considered best practice to verify your contracts so that users and other developers can inspect the source code, and be sure that it matches the deployed bytecode on the blockchain."),(0,o.yg)("p",null,"Further, if you want to allow others to interact with your contract using the block explorer, it first needs to be verified. The above contract has already been verified, so you should be able to view your version on a block explorer already, but we'll still walk through how to verify a contract on Base Sepolia testnet."),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"When verifying a contract with Basescan on testnet (Sepolia), an API key is not required. You can leave the value as ",(0,o.yg)("inlineCode",{parentName:"p"},"PLACEHOLDER_STRING"),". On mainnet, you can get your Basescan API key from ",(0,o.yg)("a",{parentName:"p",href:"https://basescan.org/myapikey"},"here")," after you sign up for an account.")),(0,o.yg)("p",null,"Grab the deployed address and run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"forge verify-contract <DEPLOYED_ADDRESS> ./src/NFT.sol:NFT --chain 84532 --watch\n")),(0,o.yg)("p",null,"You should see an output similar to:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"Start verifying contract `0x71bfCe1172A66c1c25A50b49156FAe45EB56E009` deployed on base-sepolia\n\nSubmitting verification for [src/NFT.sol:NFT] 0x71bfCe1172A66c1c25A50b49156FAe45EB56E009.\nSubmitted contract for verification:\n        Response: `OK`\n        GUID: `3i9rmtmtyyzkqpfvy7pcxj1wtgqyuybvscnq8d7ywfuskss1s7`\n        URL:\n        https://sepolia.basescan.org/address/0x71bfce1172a66c1c25a50b49156fae45eb56e009\nContract verification status:\nResponse: `NOTOK`\nDetails: `Pending in queue`\nContract verification status:\nResponse: `OK`\nDetails: `Pass - Verified`\nContract successfully verified\n")),(0,o.yg)("p",null,"Search for your contract on ",(0,o.yg)("a",{parentName:"p",href:"https://sepolia.basescan.org/"},"Basescan")," to confirm it is verified."),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"You can't re-verify a contract identical to one that has already been verified. If you attempt to do so, such as verifying the above contract, you'll get an error similar to:"),(0,o.yg)("pre",{parentName:"admonition"},(0,o.yg)("code",{parentName:"pre",className:"language-text"},'Start verifying contract `0x71bfCe1172A66c1c25A50b49156FAe45EB56E009` deployed on base-sepolia\n\nContract [src/NFT.sol:NFT] "0x71bfCe1172A66c1c25A50b49156FAe45EB56E009" is already verified. Skipping verification.\n'))),(0,o.yg)("h2",{id:"interacting-with-the-smart-contract"},"Interacting with the Smart Contract"),(0,o.yg)("p",null,"If you verified on Basescan, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"Read Contract")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Write Contract")," sections under the ",(0,o.yg)("inlineCode",{parentName:"p"},"Contract")," tab to interact with the deployed contract. To use ",(0,o.yg)("inlineCode",{parentName:"p"},"Write Contract"),", you'll need to connect your wallet first, by clicking the ",(0,o.yg)("inlineCode",{parentName:"p"},"Connect to Web3")," button (sometimes this can be a little finicky, and you'll need to click ",(0,o.yg)("inlineCode",{parentName:"p"},"Connect")," twice before it shows your wallet is successfully connected)."),(0,o.yg)("p",null,"To practice using the ",(0,o.yg)("inlineCode",{parentName:"p"},"cast")," command-line tool which Foundry provides, we'll perform a call without publishing a transaction (a read), then sign and publish a transaction (a write)."),(0,o.yg)("h3",{id:"performing-a-call"},"Performing a call"),(0,o.yg)("p",null,"A key component of the Foundry toolkit, ",(0,o.yg)("inlineCode",{parentName:"p"},"cast")," enables us to interact with contracts, send transactions, and get onchain data using Ethereum RPC calls. First we will perform a call from your account, without publishing a transaction."),(0,o.yg)("p",null,"From the command-line, run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},'cast call <DEPLOYED_ADDRESS> --rpc-url $BASE_SEPOLIA_RPC "balanceOf(address)" <YOUR_ADDRESS_HERE>\n')),(0,o.yg)("p",null,"You should receive ",(0,o.yg)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000000000000000000000000000")," in response, which equals ",(0,o.yg)("inlineCode",{parentName:"p"},"0")," in hexadecimal. And that makes sense \u2014\xa0while you've deployed the NFT contract, no NFTs have been minted yet and therefore your account's balance is zero."),(0,o.yg)("h3",{id:"signing-and-publishing-a-transaction"},"Signing and publishing a transaction"),(0,o.yg)("p",null,"Now let's sign and publish a transaction, calling the ",(0,o.yg)("inlineCode",{parentName:"p"},"mint(address)")," function on the NFT contract we just deployed."),(0,o.yg)("p",null,"Run the following command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},'cast send <DEPLOYED_ADDRESS> --rpc-url=$BASE_SEPOLIA_RPC "mint(address)" <YOUR_ADDRESS_HERE> --account deployer\n')),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"Note that in this ",(0,o.yg)("inlineCode",{parentName:"p"},"cast send")," command, we had to include our private key, but\xa0this is not required for ",(0,o.yg)("inlineCode",{parentName:"p"},"cast call"),", because that's for calling view-only contract functions and therefore we don't need to sign anything.")),(0,o.yg)("p",null,"If successful, Foundry will respond with information about the transaction, including the ",(0,o.yg)("inlineCode",{parentName:"p"},"blockNumber"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"gasUsed"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"transactionHash"),"."),(0,o.yg)("p",null,"Finally, let's confirm that we did indeed mint ourselves one NFT. If we run the first ",(0,o.yg)("inlineCode",{parentName:"p"},"cast call")," command again, we should see that our balance increased from 0 to 1:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},'cast call <DEPLOYED_ADDRESS> --rpc-url $BASE_SEPOLIA_RPC "balanceOf(address)" <YOUR_ADDRESS_HERE>\n')),(0,o.yg)("p",null,"And the response: ",(0,o.yg)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000000000000000000000000001")," (",(0,o.yg)("inlineCode",{parentName:"p"},"1")," in hex) \u2014\xa0congratulations, you deployed a contract and minted an NFT with Foundry!"),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"conclusion"},"Conclusion"),(0,o.yg)("p",null,"Phew, that was a lot! We learned how to setup a project, deploy to Base, and interact with our smart contract using Foundry. The process is the same for real networks, just more expensive \u2014 and of course, you'll want to invest time and effort testing your contracts, to reduce the likelihood of user-impacting bugs before deploying."),(0,o.yg)("p",null,"For all things Foundry, check out the ",(0,o.yg)("a",{parentName:"p",href:"https://book.getfoundry.sh/"},"Foundry book"),", or head to the official Telegram ",(0,o.yg)("a",{parentName:"p",href:"https://t.me/foundry_rs"},"dev chat")," or ",(0,o.yg)("a",{parentName:"p",href:"https://t.me/foundry_support"},"support chat"),"."),(0,o.yg)("hr",null))}u.isMDXComponent=!0}}]);