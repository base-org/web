"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[2456],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7896),o=(n(2784),n(30876));const i={title:"Error Triage",description:"Learn how to identify and resolve common errors in Solidity.",hide_table_of_contents:!1},a=void 0,l={unversionedId:"docs/error-triage/error-triage",id:"docs/error-triage/error-triage",title:"Error Triage",description:"Learn how to identify and resolve common errors in Solidity.",source:"@site/base-camp/docs/error-triage/error-triage.md",sourceDirName:"docs/error-triage",slug:"/docs/error-triage/",permalink:"/es/base-camp/docs/error-triage/",draft:!1,tags:[],version:"current",frontMatter:{title:"Error Triage",description:"Learn how to identify and resolve common errors in Solidity.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Error Triage",permalink:"/es/base-camp/docs/error-triage/error-triage-vid"},next:{title:"Error Triage Exercise",permalink:"/es/base-camp/docs/error-triage/error-triage-exercise"}},s={},u=[{value:"Objectives",id:"objectives",level:2},{value:"Compiler Errors",id:"compiler-errors",level:2},{value:"Type Errors",id:"type-errors",level:3},{value:"Conversion Errors",id:"conversion-errors",level:3},{value:"Operator Errors",id:"operator-errors",level:3},{value:"Stack Depth Limit",id:"stack-depth-limit",level:3},{value:"Logical Errors",id:"logical-errors",level:2},{value:"Array Index Out-of-Bounds",id:"array-index-out-of-bounds",level:3},{value:"Out of Gas",id:"out-of-gas",level:3},{value:"Overflow or Underflow",id:"overflow-or-underflow",level:3},{value:"Divide by Zero",id:"divide-by-zero",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...i}=e;return(0,o.kt)(p,(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Debugging is a part of every language, platform, and framework. The EVM is a unique and relatively constrained computer, so you'll encounter some types of errors that may be unfamiliar. In this article, we'll explore some of the more common ones and share methods for resolving them."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"objectives"},"Objectives"),(0,o.kt)("p",null,"By the end of this lesson you should be able to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Debug common solidity errors including transaction reverted, out of gas, stack overflow, value overflow/underflow, index out of range, etc.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"compiler-errors"},"Compiler Errors"),(0,o.kt)("p",null,"Compiler errors are manifold but almost always very easy to debug, since the error message usually tells you what is wrong and how to fix it."),(0,o.kt)("h3",{id:"type-errors"},"Type Errors"),(0,o.kt)("p",null,"You will get a compiler error if you try to assign a literal to the wrong type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// Bad code example, do not use\nfunction compilerTypeError() public pure returns (uint) {\n    uint myNumber = "One";\n    return myNumber;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'from solidity:\nTypeError: Type literal_string "One" is not implicitly convertible to expected type uint256.\n --\x3e contracts/ErrorTriage.sol:8:9:\n  |\n8 |         uint myNumber = "One";\n  |         ^^^^^^^^^^^^^^^^^^^^^\n')),(0,o.kt)("p",null,"Fix by correcting the type or value, as appropriate for your needs:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Reveal code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'function compilerTypeErrorFixed() public pure returns (string) {\n    string myNumber = "One";\n    return myNumber;\n}\n'))),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"conversion-errors"},"Conversion Errors"),(0,o.kt)("p",null,"Conversion errors occur when you attempt to ",(0,o.kt)("em",{parentName:"p"},"implicitly")," convert one type to another. Solidity only allows this under very narrow circumstances where there is no possibility of ambiguous interpretation of the data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// Bad code example, do not use\nfunction compilerConversionError() public pure returns (uint) {\n    int8 first = 1;\n\n    return first;\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"from solidity:\nTypeError: Return argument type int8 is not implicitly convertible to expected type (type of first return variable) uint256.\n  --\x3e contracts/ErrorTriage.sol:15:16:\n   |\n15 |         return first;\n   |                ^^^^^\n")),(0,o.kt)("p",null,"Fix by explicitly casting as necessary:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Reveal code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function compilerConversionErrorFixed() public pure returns (uint) {\n    int8 first = 1;\n\n    return uint(uint8(first));\n}\n"))),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You'll commonly need to use multiple conversions to bridge from one type to another.")),(0,o.kt)("h3",{id:"operator-errors"},"Operator Errors"),(0,o.kt)("p",null,"You cannot use operators between types as flexibly as you may be used to."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// Bad code example, do not use\nfunction compilerOperatorError() public pure returns (uint) {\n    int8 first = 1;\n    uint256 second = 2;\n\n    uint sum = first + second;\n\n    return sum;\n}\n")),(0,o.kt)("p",null,"Operator errors are often paired with a type error."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"from solidity:\nTypeError: Operator + not compatible with types int8 and uint256.\n  --\x3e contracts/ErrorTriage.sol:22:20:\n   |\n22 |         uint sum = first + second;\n   |                    ^^^^^^^^^^^^^^\n\nfrom solidity:\nTypeError: Type int8 is not implicitly convertible to expected type uint256.\n  --\x3e contracts/ErrorTriage.sol:22:9:\n   |\n22 |         uint sum = first + second;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n")),(0,o.kt)("p",null,"Resolve by explicitly converting to the final type:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Reveal code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"function compilerOperatorErrorFixed() public pure returns (uint) {\n    int8 first = 1;\n    uint256 second = 2;\n\n    uint sum = uint(uint8(first)) + second;\n\n    return sum;\n}\n"))),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"stack-depth-limit"},"Stack Depth Limit"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/introduction-to-smart-contracts.html#storage-memory-and-the-stack"},"EVM stack")," has 1024 slots, but only the top 16 slots are accessible. As a result, you can only have fewer than 16 variables in scope at one time."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Other items can also use up these slots. You are ",(0,o.kt)("strong",{parentName:"p"},"not")," guaranteed 15 slots, it can be lower.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// Bad code example, do not use\nfunction stackDepthLimit() public pure returns (uint) {\n        uint first = 1;\n        uint second = 2;\n        uint third = 3;\n        uint fourth = 4;\n        uint fifth = 5;\n        uint sixth = 6;\n        uint seventh = 7;\n        uint eighth = 8;\n        uint ninth = 9;\n        uint tenth = 10;\n        uint eleventh = 11;\n        uint twelfth = 12;\n        uint thirteenth = 13;\n        uint fourteenth = 14;\n        uint fifteenth = 15;\n        uint sixteenth = 16;\n\n        return first +\n                second +\n                third +\n                fourth +\n                fifth +\n                sixth +\n                seventh +\n                eighth +\n                ninth +\n                tenth +\n                eleventh +\n                twelfth +\n                thirteenth +\n                fourteenth +\n                fifteenth +\n                sixteenth;\n    }\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"from solidity:\nCompilerError: Stack too deep. Try compiling with --via-ir (cli) or the equivalent viaIR: true (standard JSON) while enabling the optimizer. Otherwise, try removing local variables.\n  --\x3e contracts/ErrorTriage.sol:92:17:\n   |\n92 |                 eighth +\n   |                 ^^^^^^\n")),(0,o.kt)("p",null,"Resolve this error by breaking up large functions and separating operations into different levels of scope."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Reveal code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function stackDepthLimitFixed() public pure returns (uint) {\n    uint subtotalA;\n    {\n        uint first = 1;\n        uint second = 2;\n        uint third = 3;\n        uint fourth = 4;\n        uint fifth = 5;\n        uint sixth = 6;\n        uint seventh = 7;\n        uint eighth = 8;\n        subtotalA = first +\n            second +\n            third +\n            fourth +\n            fifth +\n            sixth +\n            seventh +\n            eighth;\n    }\n\n    uint subtotalB;\n    {\n        uint ninth = 9;\n        uint tenth = 10;\n        uint eleventh = 11;\n        uint twelfth = 12;\n        uint thirteenth = 13;\n        uint fourteenth = 14;\n        uint fifteenth = 15;\n        uint sixteenth = 16;\n        subtotalB = ninth +\n            tenth +\n            eleventh +\n            twelfth +\n            thirteenth +\n            fourteenth +\n            fifteenth +\n            sixteenth;\n    }\n\n    return subtotalA + subtotalB;\n}\n"))),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"logical-errors"},"Logical Errors"),(0,o.kt)("p",null,"Logical errors occur when your code is syntactically correct, but still results in a data state that is a violation of the rules of the language."),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/control-structures.html?#panic-via-assert-and-error-via-require"},"panic")," occurs when your code tries to do an illegal operation. These return with a very basic error code, which Remix unfortunately hides. However, it makes up for that annoyance by providing a very powerful debugger."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The Remix VM doesn't behave exactly the same as true onchain operations, so note that these errors will not behave exactly the same if triggered while testing with Hardhat, or called from a front end.")),(0,o.kt)("p",null,"For each of these examples, copy them into Remix to explore with the debugger on your own."),(0,o.kt)("h3",{id:"array-index-out-of-bounds"},"Array Index Out-of-Bounds"),(0,o.kt)("p",null,"A panic will be triggered if you try to access an array at an invalid index."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// Bad code example, do not use\nfunction badGetLastValue() public pure returns (uint) {\n    uint[4] memory arr = [uint(1), 2, 3, 4];\n\n    return arr[arr.length];\n}\n")),(0,o.kt)("p",null,"Running this function will result in the following error in the console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"call to ErrorTriage.badGetLastValue errored: VM error: revert.\n\nrevert\n    The transaction has been reverted to the initial state.\nNote: The called function should be payable if you send value and the value you send should be less than your current balance.\nDebug the transaction to get more information.\n")),(0,o.kt)("p",null,"Click the ",(0,o.kt)("em",{parentName:"p"},"Debug")," button to open the debugger."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Debugger",src:n(55125).Z,width:"540",height:"808"})),(0,o.kt)("p",null,"The debugger contains panels with information about variables in storage, memory, what's on the stack, and so on. You can also add breakpoints to lines of code to further help with debugging."),(0,o.kt)("p",null,"One of the most useful features is the link near the top instructing you to ",(0,o.kt)("em",{parentName:"p"},'"Click here to jump where the call reverted."')),(0,o.kt)("p",null,"Click that link and the debugger will jump to the point of failure, ",(0,o.kt)("strong",{parentName:"p"},"and highlight the code that caused the panic.")," Neat!"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Highlighted Code",src:n(68362).Z,width:"584",height:"112"})),(0,o.kt)("p",null,"You can find the specific error here, but it's difficult."),(0,o.kt)("p",null,"Look in the ",(0,o.kt)("em",{parentName:"p"},"Memory")," panel. The first item at ",(0,o.kt)("inlineCode",{parentName:"p"},"0x0")," has a hash starting with ",(0,o.kt)("inlineCode",{parentName:"p"},"0x4e487b71"),". This code indicates a panic."),(0,o.kt)("p",null,"The second item, at ",(0,o.kt)("inlineCode",{parentName:"p"},"0x20")," has the error code of ",(0,o.kt)("inlineCode",{parentName:"p"},"32")," hidden in it, which is for array out-of-bounds."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Array out-of-bounds",src:n(5983).Z,width:"245",height:"136"})),(0,o.kt)("p",null,"It's sometimes better to just review the code first to see if the error is obvious."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"unction badGetLastValueFixed() public pure returns (uint) {\n    uint[4] memory arr = [uint(1), 2, 3, 4];\n\n    return arr[arr.length-1];\n}\n")),(0,o.kt)("h3",{id:"out-of-gas"},"Out of Gas"),(0,o.kt)("p",null,"The default settings for Remix make it difficult to trigger an out of gas error because the VM will often crash first. For this example, go to the ",(0,o.kt)("em",{parentName:"p"},"Deploy & Run Transactions")," tab and reduce the gas limit to ",(0,o.kt)("strong",{parentName:"p"},"300000"),"."),(0,o.kt)("p",null,"If you write code that can have an ambiguous execution time, it becomes very difficult to accurately estimate gas limits."),(0,o.kt)("p",null,"In this example, each loop has a 1 in 1000 chance of ending."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"block.timestamp")," can be manipulated. ",(0,o.kt)("strong",{parentName:"p"},"DO NOT")," use this as a source of randomness if any value can be derived from one outcome over another!")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// Bad code example, do not use\nfunction badRandomLoop() public view returns (uint) {\n    uint seed = 0;\n    // DO NOT USE THIS METHOD FOR RANDOM NUMBERS!!! IT IS EASILY EXPLOITABLE!!!\n    while(uint(keccak256(abi.encodePacked(block.timestamp, seed))) % 1000 != 0) {\n        seed++;\n        // ...do something\n    }\n\n    return seed;\n}\n")),(0,o.kt)("p",null,"Run this function a few times. Often, it will work just fine. Other times, an error appears:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"call to ErrorTriage.badLoop errored: VM error: out of gas.\n\nout of gas\n    The transaction ran out of gas. Please increase the Gas Limit.\n\nDebug the transaction to get more information.\n")),(0,o.kt)("p",null,"The error message here is a bit misleading. You do ",(0,o.kt)("strong",{parentName:"p"},"not")," usually want to fix this by increasing the gas limit. If you're getting a gas error because the transaction didn't estimate for enough gas, it's better to refactor for better predictability."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function badRandomLoopFixed() public view returns (uint) {\n    // DO NOT USE THIS METHOD FOR RANDOM NUMBERS!!! IT IS EASILY EXPLOITABLE!!!\n    uint times = uint(keccak256(abi.encodePacked(block.timestamp))) % 1000;\n\n    for(uint i = 0; i <= times; i++) {\n        // ...do something\n    }\n\n    return times;\n}\n")),(0,o.kt)("h3",{id:"overflow-or-underflow"},"Overflow or Underflow"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"uint")," type will ",(0,o.kt)("em",{parentName:"p"},"panic")," in the event of an overflow or underflow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function badSubstraction() public pure returns (uint) {\n    uint first = 1;\n    uint second = 2;\n    return first - second;\n}\n")),(0,o.kt)("p",null,"As before, you can see the panic code and panic type in ",(0,o.kt)("em",{parentName:"p"},"memory"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Underflow",src:n(34047).Z,width:"247",height:"139"})),(0,o.kt)("p",null,"In this case, the error type is ",(0,o.kt)("inlineCode",{parentName:"p"},"11"),", for overflow/underflow outside of an ",(0,o.kt)("inlineCode",{parentName:"p"},"unchecked")," block."),(0,o.kt)("p",null,"Fix by changing your code to handle the expected range of values."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Reveal code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function badSubstractionFixed() public pure returns (int) {\n    int first = 1;\n    int second = 2;\n    return first - second;\n}\n"))),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"divide-by-zero"},"Divide by Zero"),(0,o.kt)("p",null,"Divide by zero errors also trigger a panic, with a code of ",(0,o.kt)("inlineCode",{parentName:"p"},"12"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function badDivision() public pure returns (uint) {\n    uint first = 1;\n    uint second = 0;\n    return first / second;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Divide by zero",src:n(19667).Z,width:"248",height:"136"})),(0,o.kt)("p",null,"Don't divide by zero."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"In this lesson, you reviewed the causes of and solutions for a number of compiler errors and logical errors that you may encounter."),(0,o.kt)("hr",null))}d.isMDXComponent=!0},5983:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/array-out-of-bounds-3fc000d4e6abe1501e9d2e484042c591.png"},55125:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/debugger-204cab578646e4f02f30fdb5869ee858.png"},19667:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/divide-by-zero-257c799426df3d36788fd09622483ee9.png"},68362:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/highlight-code-4e927ea2380c98ed520be2dc80a09504.png"},34047:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/underflow-e8fcda2f45efa969e9c06ffced972f2e.png"}}]);