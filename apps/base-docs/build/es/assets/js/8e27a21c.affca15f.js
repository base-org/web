"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[2455],{30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),h=o,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||l;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},75727:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7896),o=(n(2784),n(30876));const l={title:"Deploying Smart Contracts",description:"Deploy smart contracts with hardhat deploy and hardhat",hide_table_of_contents:!1},r=void 0,i={unversionedId:"docs/hardhat-deploy/hardhat-deploy-sbs",id:"docs/hardhat-deploy/hardhat-deploy-sbs",title:"Deploying Smart Contracts",description:"Deploy smart contracts with hardhat deploy and hardhat",source:"@site/base-camp/docs/hardhat-deploy/hardhat-deploy-sbs.md",sourceDirName:"docs/hardhat-deploy",slug:"/docs/hardhat-deploy/hardhat-deploy-sbs",permalink:"/es/base-camp/docs/hardhat-deploy/hardhat-deploy-sbs",draft:!1,tags:[],version:"current",frontMatter:{title:"Deploying Smart Contracts",description:"Deploy smart contracts with hardhat deploy and hardhat",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Deployment",permalink:"/es/base-camp/docs/hardhat-deploy/deployment-vid"},next:{title:"Verifying Smart Contracts",permalink:"/es/base-camp/docs/hardhat-verify/hardhat-verify-vid"}},s={},p=[{value:"Objectives",id:"objectives",level:2},{value:"Overview",id:"overview",level:2},{value:"Setting up Hardhat deploy",id:"setting-up-hardhat-deploy",level:2},{value:"Testing your deployment",id:"testing-your-deployment",level:2},{value:"Deploying to a test network",id:"deploying-to-a-test-network",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"See also",id:"see-also",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...l}=e;return(0,o.kt)(c,(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this article, you'll learn how to deploy smart contracts to multiple Blockchain networks using Hardhat and Hardhat deploy."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"objectives"},"Objectives"),(0,o.kt)("p",null,"By the end of this lesson, you should be able to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Deploy a smart contract to the Base Sepolia Testnet with hardhat-deploy"),(0,o.kt)("li",{parentName:"ul"},"Deploy a smart contract to the Sepolia Testnet with hardhat-deploy"),(0,o.kt)("li",{parentName:"ul"},"Use etherscan to view a deployed smart contract")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Hardhat capabilities enable developers to deploy smart contracts easily to any Blockchain by simply creating ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts"),". However, due to the Hardhat architecture that enables its extension by creating plugins, you can rely on existing solutions developed by the community."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/wighawag/hardhat-deploy"},"Hardhat deploy")," is a community-developed plugin that enables the deployment of your smart contracts in a simple way."),(0,o.kt)("h2",{id:"setting-up-hardhat-deploy"},"Setting up Hardhat deploy"),(0,o.kt)("p",null,"To install:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"npm install -D hardhat-deploy"),". Then, import hardhat-deploy in ",(0,o.kt)("inlineCode",{parentName:"li"},"hardhat.config.ts"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import 'hardhat-deploy';\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a folder called deploy and inside it create a new file called ",(0,o.kt)("inlineCode",{parentName:"p"},"001_deploy_lock.ts"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Include the following:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { HardhatRuntimeEnvironment } from 'hardhat/types';\nimport { DeployFunction } from 'hardhat-deploy/types';\n\nconst func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {\n  // code here\n};\nexport default func;\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Modify the ",(0,o.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," file to look like:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "es2020",\n    "module": "commonjs",\n    "esModuleInterop": true,\n    "forceConsistentCasingInFileNames": true,\n    "strict": true,\n    "skipLibCheck": true,\n    "resolveJsonModule": true\n  },\n  "include": ["./hardhat.config.ts", "./scripts", "./deploy", "./test"]\n}\n')),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Before implementing the deploy functionality, configure a deployer account in the ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," file. Hardhat deployment includes a way to name accounts in the config file.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the following, which adds an alias to the account 0 of your environment:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const config: HardhatUserConfig = {\n  solidity: '0.8.23',\n  namedAccounts: {\n    deployer: 0,\n  },\n};\n")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Implement the deploy function by including the following in the ",(0,o.kt)("inlineCode",{parentName:"li"},"001_deploy_lock.ts")," file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { HardhatRuntimeEnvironment } from 'hardhat/types';\nimport { DeployFunction } from 'hardhat-deploy/types';\nimport { ethers } from 'hardhat';\n\nconst func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {\n  const { deploy } = hre.deployments;\n  // We can now use deployer\n  const { deployer } = await hre.getNamedAccounts();\n\n  // The value we want to lock\n  const VALUE_LOCKED = hre.ethers.parseEther('0.01');\n\n  // The unlock time after deployment\n  const UNLOCK_TIME = 10000;\n\n  // We use ethers to get the current time stamp\n  const blockNumber = await ethers.provider.getBlockNumber();\n  const lastBlockTimeStamp = (await ethers.provider.getBlock(blockNumber))?.timestamp as number;\n\n  // We say we want to deploy our Lock contract using the deployer\n  // account and passing the value and arguments.\n  await deploy('Lock', {\n    from: deployer,\n    args: [lastBlockTimeStamp + UNLOCK_TIME],\n    value: VALUE_LOCKED.toString(),\n  });\n};\n\nexport default func;\n\n// This tag will help us in the next section to trigger this deployment file programmatically\nfunc.tags = ['DeployAll'];\n")),(0,o.kt)("h2",{id:"testing-your-deployment"},"Testing your deployment"),(0,o.kt)("p",null,"The easiest way to test your deployment is by modifying the test."),(0,o.kt)("p",null,"Go to ",(0,o.kt)("inlineCode",{parentName:"p"},"Lock.ts")," and include in the imports the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ethers, deployments } from 'hardhat';\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"deployments")," will allow you to execute the deployment files from your test."),(0,o.kt)("p",null,"Change the ",(0,o.kt)("inlineCode",{parentName:"p"},"before")," function to look like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"before(async () => {\n  lastBlockTimeStamp = await time.latest();\n\n  const signers = await ethers.getSigners();\n  ownerSigner = signers[0];\n  otherUserSigner = signers[1];\n\n  await deployments.fixture(['DeployAll']);\n  const lockDeployment = await deployments.get('Lock');\n\n  lockInstance = Lock__factory.connect(lockDeployment.address, ownerSigner);\n});\n")),(0,o.kt)("p",null,"Notice how you execute ",(0,o.kt)("inlineCode",{parentName:"p"},"deployments.fixture")," and pass a tag that matches the one you specified in the deployment file (",(0,o.kt)("inlineCode",{parentName:"p"},"001_deploy_lock.ts"),")."),(0,o.kt)("p",null,"The deployment file is then executed and you can then reuse that functionality and simply consume the address of the newly-deployed contract by using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const lockDeployment = await deployments.get('Lock');\n")),(0,o.kt)("p",null,"Reuse ",(0,o.kt)("inlineCode",{parentName:"p"},"Lock__factory")," but use the connect function and pass the address of the newly-created contract plus a signer. Then, run ",(0,o.kt)("inlineCode",{parentName:"p"},"npx hardhat test")," and you should get the same result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'  Lock\n    \u2714 should get the unlockTime value\n    \u2714 should have the right ether balance\n    \u2714 should have the right owner\n    \u2714 shouldn"t allow to withdraw before unlock time (51ms)\n    \u2714 shouldn"t allow to withdraw a non owner\n    \u2714 should allow to withdraw a owner\n\n  6 passing (2s)\n')),(0,o.kt)("h2",{id:"deploying-to-a-test-network"},"Deploying to a test network"),(0,o.kt)("p",null,"Deploying to a real test network involves configuring the network parameters in the hardhat config file. You need to include parameters such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The JSON RPC url"),(0,o.kt)("li",{parentName:"ul"},"The account you want to use"),(0,o.kt)("li",{parentName:"ul"},"Real test ether or the native Blockchain token for gas costs")),(0,o.kt)("p",null,"Include the following in the ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const config: HardhatUserConfig = {\n  solidity: '0.8.18',\n  namedAccounts: {\n    deployer: 0,\n  },\n  networks: {\n    base_sepolia: {\n      url: 'https://sepolia.base.org',\n      accounts: {\n        mnemonic: process.env.MNEMONIC ?? '',\n      },\n    },\n    sepolia: {\n      url: `https://eth-sepolia.g.alchemy.com/v2/${process.env.ALCHEMY_SEPOLIA_KEY ?? ''}`,\n      accounts: {\n        mnemonic: process.env.MNEMONIC ?? '',\n      },\n    },\n  },\n};\n")),(0,o.kt)("p",null,"You've configured 2 networks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"base_sepolia"),(0,o.kt)("li",{parentName:"ul"},"sepolia")),(0,o.kt)("p",null,"You also need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file with the following variables:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'MNEMONIC="<REPLACE WITH YOUR MNEMONIC>"\nALCHEMY_SEPOLIA_KEY=<REPLACE WITH YOUR API KEY>\n')),(0,o.kt)("p",null,"In order to ensure the environment variables are loaded, you need to install another package called ",(0,o.kt)("inlineCode",{parentName:"p"},"dotenv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -D dotenv\n")),(0,o.kt)("p",null,"Then, include the following in the ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import dotenv from 'dotenv';\n\ndotenv.config();\n")),(0,o.kt)("p",null,"Deploy to base with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat deploy --network base_sepolia\n")),(0,o.kt)("p",null,"After you run the command, a deployments folder appears with a newly-created deployment for ",(0,o.kt)("inlineCode",{parentName:"p"},"base_sepolia"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"New deployment",src:n(50019).Z,width:"326",height:"184"})),(0,o.kt)("p",null,"If you want to deploy to another network, change the network name as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat deploy --network sepolia\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Be aware that you must have the correct environment variables for the JSON RPC URLs. For example, for Sepolia use ",(0,o.kt)("inlineCode",{parentName:"p"},"ALCHEMY_SEPOLIA_KEY"),".")),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"In this lesson, you've learned how to deploy smart contracts using Hardhat and Hardhat-deploy. You have configured hardhat to easily deploy to multiple networks and you created deployment files to abstract this task."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/"},"Solidity Docs")))}u.isMDXComponent=!0},50019:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/new-deploy-0e692631b87999c5d63a76c257ae7a92.png"}}]);