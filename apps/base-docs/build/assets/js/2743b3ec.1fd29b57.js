"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[8808],{82247:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(14041);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),y=a,m=u["".concat(s,".").concat(y)]||u[y]||d[y]||o;return n?r.createElement(m,c(c({ref:t},p),{},{components:n})):r.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=y;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},90859:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(89575),a=(n(14041),n(82247));const o={title:"Abstract Contracts",description:"Learn how to make contracts that must be inherited by another contract.",hide_table_of_contents:!1},c=void 0,i={unversionedId:"docs/inheritance/abstract-contracts-sbs",id:"docs/inheritance/abstract-contracts-sbs",title:"Abstract Contracts",description:"Learn how to make contracts that must be inherited by another contract.",source:"@site/base-camp/docs/inheritance/abstract-contracts-sbs.md",sourceDirName:"docs/inheritance",slug:"/docs/inheritance/abstract-contracts-sbs",permalink:"/base-camp/docs/inheritance/abstract-contracts-sbs",draft:!1,tags:[],version:"current",frontMatter:{title:"Abstract Contracts",description:"Learn how to make contracts that must be inherited by another contract.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Abstract Contracts",permalink:"/base-camp/docs/inheritance/abstract-contracts-vid"},next:{title:"Inheritance Exercise",permalink:"/base-camp/docs/inheritance/inheritance-exercise"}},s={},l=[{value:"Objectives",id:"objectives",level:2},{value:"Abstract Contracts",id:"abstract-contracts",level:2},{value:"Inheriting from an Abstract Function",id:"inheriting-from-an-abstract-function",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/contracts.html?#abstract-contracts"},"Abstract")," contracts can't exist on their own. Their functionality can only be utilized by a contract that inherits from them. In this lesson, you'll learn how to create an abstract contract."),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"objectives"},"Objectives"),(0,a.yg)("p",null,"By the end of this lesson you should be able to:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Use the virtual, override, and abstract keywords to create and use an abstract contract")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"abstract-contracts"},"Abstract Contracts"),(0,a.yg)("p",null,"Continue with your ",(0,a.yg)("inlineCode",{parentName:"p"},"Inheritance.sol")," file. Add ",(0,a.yg)("inlineCode",{parentName:"p"},"ContractD")," as an ",(0,a.yg)("inlineCode",{parentName:"p"},"abstract contract"),". Add a ",(0,a.yg)("inlineCode",{parentName:"p"},"virtual")," function called ",(0,a.yg)("inlineCode",{parentName:"p"},"whoAreYou")," function, but do ",(0,a.yg)("strong",{parentName:"p"},"not")," add any implementation for that function."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Reveal code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-solidity"},"abstract contract ContractD {\n    function whoAreYou() public virtual view returns (string memory);\n}\n"))),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"inheriting-from-an-abstract-function"},"Inheriting from an Abstract Function"),(0,a.yg)("p",null,"Update ",(0,a.yg)("inlineCode",{parentName:"p"},"ContractA")," to inherit from ",(0,a.yg)("inlineCode",{parentName:"p"},"ContractD"),"."),(0,a.yg)("p",null,"You'll get a slightly confusing error that ",(0,a.yg)("inlineCode",{parentName:"p"},"ContractA")," needs to be marked as ",(0,a.yg)("inlineCode",{parentName:"p"},"abstract"),". Doing so is ",(0,a.yg)("strong",{parentName:"p"},"not")," the correct fix."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-text"},'from solidity:\nTypeError: Contract "ContractA" should be marked as abstract.\n  --\x3e contracts/Inheritance.sol:25:1:\n   |\n25 | contract ContractA is ContractB, ContractC, ContractD {\n   | ^ (Relevant source part starts here and spans across multiple lines).\nNote: Missing implementation:\n --\x3e contracts/Inheritance.sol:6:5:\n  |\n6 |     function whoAreYou() public virtual view returns (string memory);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n')),(0,a.yg)("p",null,"The clue for the correct solution is further down: ",(0,a.yg)("inlineCode",{parentName:"p"},"Note:  Missing implementation:")),(0,a.yg)("p",null,"Only ",(0,a.yg)("inlineCode",{parentName:"p"},"abstract")," contracts can declare functions that are not implemented. To fix this, provide an ",(0,a.yg)("inlineCode",{parentName:"p"},"override")," implementation for ",(0,a.yg)("inlineCode",{parentName:"p"},"whoAreYou")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"ContractA"),":"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Reveal code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-solidity"},'function whoAreYou() public override pure returns (string memory) {\n    return "I\'m a person!";\n}\n'))),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"In this lesson, you've learned how to implement and inherit from an abstract contract."),(0,a.yg)("hr",null))}d.isMDXComponent=!0}}]);