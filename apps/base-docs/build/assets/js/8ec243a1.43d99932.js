"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[992],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},20071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(7896),r=(n(2784),n(30876));const o={title:"ethers.js",slug:"/tools/ethers",description:"Documentation for using ethers.js, a JavaScript library for EVM-compatible blockchain interactions. This page covers installation, setup, connecting to the Base network, reading and writing blockchain data, and interacting with smart contracts.",keywords:["ethers.js","JavaScript library","Base network","Base mainnet","Base testnet","smart contracts","EVM-compatible","blockchain","JsonRpcProvider","Signer","ABI","interacting with smart contract"],hide_table_of_contents:!0},i="ethers.js",c={unversionedId:"tools/ethers",id:"tools/ethers",title:"ethers.js",description:"Documentation for using ethers.js, a JavaScript library for EVM-compatible blockchain interactions. This page covers installation, setup, connecting to the Base network, reading and writing blockchain data, and interacting with smart contracts.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/tools/ethers.md",sourceDirName:"tools",slug:"/tools/ethers",permalink:"/docs/tools/ethers",draft:!1,tags:[],version:"current",frontMatter:{title:"ethers.js",slug:"/tools/ethers",description:"Documentation for using ethers.js, a JavaScript library for EVM-compatible blockchain interactions. This page covers installation, setup, connecting to the Base network, reading and writing blockchain data, and interacting with smart contracts.",keywords:["ethers.js","JavaScript library","Base network","Base mainnet","Base testnet","smart contracts","EVM-compatible","blockchain","JsonRpcProvider","Signer","ABI","interacting with smart contract"],hide_table_of_contents:!0},sidebar:"developers",previous:{title:"thirdweb CLI",permalink:"/docs/tools/thirdweb-cli"},next:{title:"thirdweb SDK",permalink:"/docs/tools/thirdweb-sdk"}},s={},l=[{value:"Install",id:"install",level:2},{value:"Setup",id:"setup",level:2},{value:"Connecting to Base",id:"connecting-to-base",level:2},{value:"Reading data from the blockchain",id:"reading-data-from-the-blockchain",level:2},{value:"Writing data to the blockchain",id:"writing-data-to-the-blockchain",level:2},{value:"Interacting with smart contracts",id:"interacting-with-smart-contracts",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ethersjs"},"ethers.js"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v5/"},"ethers.js")," is a JavaScript library that allows developers to interact with EVM-compatible blockchain networks."),(0,r.kt)("p",null,"You can use ethers.js to interact with smart contracts deployed on the Base network."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"To install ethers.js run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save ethers\n")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Before you can start using ethers.js, you need to import it into your project."),(0,r.kt)("p",null,"Add the following line of code to the top of your file to import ethers.js:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const ethers = require('ethers');\n")),(0,r.kt)("h2",{id:"connecting-to-base"},"Connecting to Base"),(0,r.kt)("p",null,"You can connect to Base by instantiating a new ethers.js ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonRpcProvider")," object with a RPC URL of the Base network:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const ethers = require('ethers');\n\nconst url = 'https://mainnet.base.org';\nconst provider = new ethers.providers.JsonRpcProvider(url);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To alternatively connect to Base Sepolia (testnet), change the above URL from ",(0,r.kt)("inlineCode",{parentName:"p"},"https://mainnet.base.org")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"https://sepolia.base.org"),".")),(0,r.kt)("h2",{id:"reading-data-from-the-blockchain"},"Reading data from the blockchain"),(0,r.kt)("p",null,"Once you have created a provider, you can use it to read data from the Base network."),(0,r.kt)("p",null,"For example, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getBlockNumber")," method to get the latest block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function getLatestBlock() {\n  const latestBlock = await provider.getBlockNumber();\n  console.log(latestBlock);\n}\n")),(0,r.kt)("h2",{id:"writing-data-to-the-blockchain"},"Writing data to the blockchain"),(0,r.kt)("p",null,"In order to write data to the Base network, you need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Signer"),"."),(0,r.kt)("p",null,"You can create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Signer")," by instantiating a new ethers.js ",(0,r.kt)("inlineCode",{parentName:"p"},"Wallet")," object, providing it with a private key and ",(0,r.kt)("inlineCode",{parentName:"p"},"Provider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const privateKey = 'PRIVATE_KEY';\nconst signer = new ethers.Wallet(privateKey, provider);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"PRIVATE_KEY")," is the private key of the wallet to use when creating the signer.")),(0,r.kt)("h2",{id:"interacting-with-smart-contracts"},"Interacting with smart contracts"),(0,r.kt)("p",null,"You can use ethers.js to interact with a smart contract on Base by instantiating a ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract")," object using the ABI and address of a deployed contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const abi = [\n\u2026 // ABI of deployed contract\n];\n\nconst contractAddress = "CONTRACT_ADDRESS"\n\n// read only\nconst contract = new ethers.Contract(contractAddress, abi, provider);\n')),(0,r.kt)("p",null,"For write-only contracts, provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"Signer")," object instead of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Provider")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// write only\nconst contract = new ethers.Contract(contractAddress, abi, signer);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"CONTRACT_ADDRESS")," is the address of the deployed contract.")),(0,r.kt)("p",null,"Once you have created a ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract")," object, you can use it to call desired methods on the smart contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function setValue(value) {\n  const tx = await contract.set(value);\n  console.log(tx.hash);\n}\n\nasync function getValue() {\n  const value = await contract.get();\n  console.log(value.toString());\n}\n")))}u.isMDXComponent=!0}}]);