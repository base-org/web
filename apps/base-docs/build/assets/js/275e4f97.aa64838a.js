"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[6344],{30876:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(2784);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(a),h=o,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||r;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},92805:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>B,contentTitle:()=>x,default:()=>D,frontMatter:()=>I,metadata:()=>j,toc:()=>S});var n=a(7896),o=a(2784),r=a(30876),l=a(6277),i=a(24126),s=a(7267),c=a(32424),u=a(42244),p=a(24155);function d(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:o}}=e;return{value:t,label:a,attributes:n,default:o}}))}function h(e){const{values:t,children:a}=e;return(0,o.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,c._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=h(e),[l,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[s,c]=y({queryString:a,groupId:n}),[u,d]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,p.Nk)(a);return[n,(0,o.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),f=(()=>{const e=s??u;return m({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),d(e)}),[c,d,r]),tabValues:r}}var k=a(89741);const g={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};var b=a(52322);function v(e){let{className:t,block:a,selectedValue:n,selectValue:o,tabValues:r}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),u=e=>{const t=e.currentTarget,a=s.indexOf(t),l=r[a].value;l!==n&&(c(t),o(l))},p=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=s.indexOf(e.currentTarget)+1;t=s[a]??s[0];break}case"ArrowLeft":{const a=s.indexOf(e.currentTarget)-1;t=s[a]??s[s.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.default)("tabs",{"tabs--block":a},t),children:r.map((e=>{let{value:t,label:a,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>s.push(e),onKeyDown:p,onClick:u,...o,className:(0,l.default)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":n===t}),children:a??t},t)}))})}function w(e){let{lazy:t,children:a,selectedValue:n}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===n));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n})))})}function N(e){const t=f(e);return(0,b.jsxs)("div",{className:(0,l.default)("tabs-container",g.tabList),children:[(0,b.jsx)(v,{...e,...t}),(0,b.jsx)(w,{...e,...t})]})}function C(e){const t=(0,k.Z)();return(0,b.jsx)(N,{...e},String(t))}const T={tabItem:"tabItem_OMyP"};function E(e){let{children:t,hidden:a,className:n}=e;return(0,b.jsx)("div",{role:"tabpanel",className:(0,l.default)(T.tabItem,n),hidden:a,children:t})}const I={title:"Deploying a smart contract using Hardhat",slug:"/deploy-with-hardhat",description:"A tutorial that teaches how to deploy a smart contract on the Base test network using Hardhat. Includes instructions for setting up the environment, compiling, and deploying the smart contract.",author:"taycaldwell",keywords:["Hardhat","smart contract","ERC-721","Base","Base test network","Base testnet","Node.js","Solidity","smart contract deployment","deploy a smart contract","build on base","write smart contract","smart contract development"],tags:["smart contracts"],difficulty:"beginner",displayed_sidebar:null},x=void 0,j={unversionedId:"docs/deploy-with-hardhat",id:"docs/deploy-with-hardhat",title:"Deploying a smart contract using Hardhat",description:"A tutorial that teaches how to deploy a smart contract on the Base test network using Hardhat. Includes instructions for setting up the environment, compiling, and deploying the smart contract.",source:"@site/tutorials/docs/0_deploy-with-hardhat.mdx",sourceDirName:"docs",slug:"/deploy-with-hardhat",permalink:"/tutorials/deploy-with-hardhat",draft:!1,tags:[{label:"smart contracts",permalink:"/tutorials/tags/smart-contracts"}],version:"current",sidebarPosition:0,frontMatter:{title:"Deploying a smart contract using Hardhat",slug:"/deploy-with-hardhat",description:"A tutorial that teaches how to deploy a smart contract on the Base test network using Hardhat. Includes instructions for setting up the environment, compiling, and deploying the smart contract.",author:"taycaldwell",keywords:["Hardhat","smart contract","ERC-721","Base","Base test network","Base testnet","Node.js","Solidity","smart contract deployment","deploy a smart contract","build on base","write smart contract","smart contract development"],tags:["smart contracts"],difficulty:"beginner",displayed_sidebar:null}},B={},S=[{value:"Objectives",id:"objectives",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Node v18+",id:"node-v18",level:3},{value:"Coinbase Wallet",id:"coinbase-wallet",level:3},{value:"Wallet funds",id:"wallet-funds",level:3},{value:"Creating a project",id:"creating-a-project",level:2},{value:"Configuring Hardhat with Base",id:"configuring-hardhat-with-base",level:2},{value:"Install Hardhat toolbox",id:"install-hardhat-toolbox",level:3},{value:"Loading environment variables",id:"loading-environment-variables",level:3},{value:"Local Networks",id:"local-networks",level:3},{value:"Compiling the smart contract",id:"compiling-the-smart-contract",level:2},{value:"Deploying the smart contract",id:"deploying-the-smart-contract",level:2},{value:"Verifying the Smart Contract",id:"verifying-the-smart-contract",level:2},{value:"Interacting with the Smart Contract",id:"interacting-with-the-smart-contract",level:2}],O={toc:S},L="wrapper";function D(e){let{components:t,...a}=e;return(0,r.kt)(L,(0,n.Z)({},O,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This section will guide you through deploying an NFT smart contract (ERC-721) on the Base test network using ",(0,r.kt)("a",{parentName:"p",href:"https://hardhat.org/"},"Hardhat"),"."),(0,r.kt)("p",null,"Hardhat is a developer tool that provides a simple way to deploy, test, and debug smart contracts."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"objectives"},"Objectives"),(0,r.kt)("p",null,"By the end of this tutorial, you should be able to do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Setup Hardhat for Base"),(0,r.kt)("li",{parentName:"ul"},"Create an NFT smart contract for Base"),(0,r.kt)("li",{parentName:"ul"},"Compile a smart contract for Base"),(0,r.kt)("li",{parentName:"ul"},"Deploy a smart contract to Base"),(0,r.kt)("li",{parentName:"ul"},"Interact with a smart contract deployed on Base")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("h3",{id:"node-v18"},"Node v18+"),(0,r.kt)("p",null,"This tutorial requires you have Node version 18+ installed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Download ",(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"Node v18+"))),(0,r.kt)("p",null,"If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"nvm")," to manage your node versions, you can just run ",(0,r.kt)("inlineCode",{parentName:"p"},"nvm install 18"),"."),(0,r.kt)("h3",{id:"coinbase-wallet"},"Coinbase Wallet"),(0,r.kt)("p",null,"In order to deploy a smart contract, you will first need a web3 wallet. You can create a wallet by downloading the Coinbase Wallet browser extension."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Download ",(0,r.kt)("a",{parentName:"li",href:"https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad?hl=en"},"Coinbase Wallet"))),(0,r.kt)("h3",{id:"wallet-funds"},"Wallet funds"),(0,r.kt)("p",null,"Deploying contracts to the blockchain requires a gas fee. Therefore, you will need to fund your wallet with ETH to cover those gas fees."),(0,r.kt)("p",null,"For this tutorial, you will be deploying a contract to the Base Sepolia test network. You can fund your wallet with Base Sepolia ETH using one of the faucets listed on the Base ",(0,r.kt)("a",{parentName:"p",href:"https://docs.base.org/tools/network-faucets"},"Network Faucets")," page."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"creating-a-project"},"Creating a project"),(0,r.kt)("p",null,"Before you can begin deploying smart contracts to Base, you need to set up your development environment by creating a Node.js project."),(0,r.kt)("p",null,"To create a new Node.js project, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm init --y\n")),(0,r.kt)("p",null,"Next, you will need to install Hardhat and create a new Hardhat project"),(0,r.kt)("p",null,"To install Hardhat, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev hardhat\n")),(0,r.kt)("p",null,"To create a new Hardhat project, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat init\n")),(0,r.kt)("p",null,"Select ",(0,r.kt)("inlineCode",{parentName:"p"},"Create a TypeScript project")," then press ",(0,r.kt)("em",{parentName:"p"},"enter")," to confirm the project root."),(0,r.kt)("p",null,"Select ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," for both adding a ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore")," and loading the sample project. It will take a moment for the project setup process to complete."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"configuring-hardhat-with-base"},"Configuring Hardhat with Base"),(0,r.kt)("p",null,"In order to deploy smart contracts to the Base network, you will need to configure your Hardhat project and add the Base network."),(0,r.kt)("p",null,"To configure Hardhat to use Base, add Base as a network to your project's ",(0,r.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { HardhatUserConfig } from 'hardhat/config';\nimport '@nomicfoundation/hardhat-toolbox';\n\nrequire('dotenv').config();\n\nconst config: HardhatUserConfig = {\n  solidity: {\n    version: '0.8.23',\n  },\n  networks: {\n    // for mainnet\n    'base-mainnet': {\n      url: 'https://mainnet.base.org',\n      accounts: [process.env.WALLET_KEY as string],\n      gasPrice: 1000000000,\n    },\n    // for testnet\n    'base-sepolia': {\n      url: 'https://sepolia.base.org',\n      accounts: [process.env.WALLET_KEY as string],\n      gasPrice: 1000000000,\n    },\n    // for local dev environment\n    'base-local': {\n      url: 'http://localhost:8545',\n      accounts: [process.env.WALLET_KEY as string],\n      gasPrice: 1000000000,\n    },\n  },\n  defaultNetwork: 'hardhat',\n};\n\nexport default config;\n")),(0,r.kt)("h3",{id:"install-hardhat-toolbox"},"Install Hardhat toolbox"),(0,r.kt)("p",null,"The above configuration uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"@nomicfoundation/hardhat-toolbox")," plugin to bundle all the commonly used packages and Hardhat plugins recommended to start developing with Hardhat."),(0,r.kt)("p",null,"To install ",(0,r.kt)("inlineCode",{parentName:"p"},"@nomicfoundation/hardhat-toolbox"),", run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @nomicfoundation/hardhat-toolbox\n")),(0,r.kt)("h3",{id:"loading-environment-variables"},"Loading environment variables"),(0,r.kt)("p",null,"The above configuration also uses ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dotenv"},"dotenv")," to load the ",(0,r.kt)("inlineCode",{parentName:"p"},"WALLET_KEY")," environment variable from a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file to ",(0,r.kt)("inlineCode",{parentName:"p"},"process.env.WALLET_KEY"),". You should use a similar method to avoid hardcoding your private keys within your source code."),(0,r.kt)("p",null,"To install ",(0,r.kt)("inlineCode",{parentName:"p"},"dotenv"),", run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev dotenv\n")),(0,r.kt)("p",null,"Once you have ",(0,r.kt)("inlineCode",{parentName:"p"},"dotenv")," installed, you can create a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'WALLET_KEY="<YOUR_PRIVATE_KEY>"\n')),(0,r.kt)("p",null,"Substituting ",(0,r.kt)("inlineCode",{parentName:"p"},"<YOUR_PRIVATE_KEY>")," with the private key for your wallet."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"WALLET_KEY")," is the private key of the wallet to use when deploying a contract. For instructions on how to get your private key from Coinbase Wallet, visit the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.cloud.coinbase.com/wallet-sdk/docs/developer-settings#show-private-key"},"Coinbase Wallet documentation"),". ",(0,r.kt)("strong",{parentName:"p"},"It is critical that you do NOT commit this to a public repo"))),(0,r.kt)("h3",{id:"local-networks"},"Local Networks"),(0,r.kt)("p",null,"You can run the Base network locally, and deploy using it. If this is what you are looking to do, see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/base-org/node"},"repo containing the relevant Docker builds"),"."),(0,r.kt)("p",null,"It will take a ",(0,r.kt)("strong",{parentName:"p"},"very")," long time for your node to sync with the network. If you get errors that the ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce has already been used")," when trying to deploy, you aren't synced yet."),(0,r.kt)("p",null,"For quick testing, such as if you want to add unit tests to the below NFT contract, you may wish to leave the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultNetwork")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"'hardhat'"),"."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"compiling-the-smart-contract"},"Compiling the smart contract"),(0,r.kt)("p",null,"Below is a simple NFT smart contract (ERC-721) written in the Solidity programming language:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\n\ncontract NFT is ERC721 {\n    uint256 public currentTokenId;\n\n    constructor() ERC721("NFT Name", "NFT") {}\n\n    function mint(address recipient) public payable returns (uint256) {\n        uint256 newItemId = ++currentTokenId;\n        _safeMint(recipient, newItemId);\n        return newItemId;\n    }\n}\n')),(0,r.kt)("p",null,"The Solidity code above defines a smart contract named ",(0,r.kt)("inlineCode",{parentName:"p"},"NFT"),". The code uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC721")," interface provided by the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/5.x/"},"OpenZeppelin Contracts library")," to create an NFT smart contract. OpenZeppelin allows developers to leverage battle-tested smart contract implementations that adhere to official ERC standards."),(0,r.kt)("p",null,"To add the OpenZeppelin Contracts library to your project, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @openzeppelin/contracts\n")),(0,r.kt)("p",null,"In your project, delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/Lock.sol")," contract that was generated with the project and add the above code in a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/NFT.sol"),". (You can also delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"test/Lock.ts")," test file, but you should add your own tests ASAP!)."),(0,r.kt)("p",null,"To compile the contract using Hardhat, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat compile\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deploying-the-smart-contract"},"Deploying the smart contract"),(0,r.kt)("p",null,"Once your contract has been successfully compiled, you can deploy the contract to the Base Sepolia test network."),(0,r.kt)("p",null,"To deploy the contract to the Base Sepolia test network, you'll need to modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts/deploy.ts")," in your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ethers } from 'hardhat';\n\nasync function main() {\n  const nft = await ethers.deployContract('NFT');\n\n  await nft.waitForDeployment();\n\n  console.log('NFT Contract Deployed at ' + nft.target);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n")),(0,r.kt)("p",null,"You'll also need testnet ETH in your wallet. See the ",(0,r.kt)("a",{parentName:"p",href:"#prerequisites"},"prerequisites")," if you haven't done that yet. Otherwise, the deployment attempt will fail."),(0,r.kt)("p",null,"Finally, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat run scripts/deploy.ts --network base-sepolia\n")),(0,r.kt)("p",null,"The contract will be deployed on the Base Sepolia test network. You can view the deployment status and contract by using a ",(0,r.kt)("a",{parentName:"p",href:"/tools/block-explorers"},"block explorer")," and searching for the address returned by your deploy script. If you've deployed an exact copy of the NFT contract above, it will already be verified and you'll be able to read and write to the contract using the web interface."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you'd like to deploy to mainnet, you'll modify the command like so:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat run scripts/deploy.ts --network base-mainnet\n"))),(0,r.kt)("p",null,"Regardless of the network you're deploying to, if you're deploying a new or modified contract, you'll need to verify it first."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"verifying-the-smart-contract"},"Verifying the Smart Contract"),(0,r.kt)("p",null,"If you want to interact with your contract on the block explorer, you, or someone, needs to verify it first. The above contract has already been verified, so you should be able to view your version on a block explorer already. For the remainder of this tutorial, we'll walk through how to verify your contract on Base Sepolia testnet."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),", configure Base Sepolia as a custom network. Add the following to your ",(0,r.kt)("inlineCode",{parentName:"p"},"HardhatUserConfig"),":"),(0,r.kt)(C,{mdxType:"Tabs"},(0,r.kt)(E,{value:"basescan",label:"Basescan",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'etherscan: {\n   apiKey: {\n    "base-sepolia": "PLACEHOLDER_STRING"\n   },\n   customChains: [\n     {\n       network: "base-sepolia",\n       chainId: 84532,\n       urls: {\n        apiURL: "https://api-sepolia.basescan.org/api",\n        browserURL: "https://sepolia.basescan.org"\n       }\n     }\n   ]\n },\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When verifying a contract with Basescan on testnet (Sepolia), an API key is not required. You can leave the value as ",(0,r.kt)("inlineCode",{parentName:"p"},"PLACEHOLDER_STRING"),". On mainnet, you can get your Basescan API key from ",(0,r.kt)("a",{parentName:"p",href:"https://basescan.org/myapikey"},"here")," after you sign up for an account."))),(0,r.kt)(E,{value:"blockscout",label:"Blockscout",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// Hardhat expects etherscan here, even if you\'re using Blockscout.\netherscan: {\n   apiKey: {\n    "base-sepolia": process.env.BLOCKSCOUT_KEY as string\n   },\n   customChains: [\n     {\n       network: "base-sepolia",\n       chainId: 84532,\n       urls: {\n        apiURL: "https://base-sepolia.blockscout.com/api",\n        browserURL: "https://base-sepolia.blockscout.com"\n       }\n     }\n   ]\n },\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can get your Blockscout API key from ",(0,r.kt)("a",{parentName:"p",href:"https://base-sepolia.blockscout.com/account/api_key"},"here")," after you sign up for an account.")))),(0,r.kt)("p",null,"Now, you can verify your contract. Grab the deployed address and run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat verify --network base-sepolia <deployed address>\n")),(0,r.kt)("p",null,"You should see an output similar to:"),(0,r.kt)(C,{mdxType:"Tabs"},(0,r.kt)(E,{value:"basescan",label:"Basescan",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Nothing to compile\nNo need to generate any newer typings.\nSuccessfully submitted source code for contract\ncontracts/NFT.sol:NFT at 0x6527E5052de5521fE370AE5ec0aFCC6cD5a221de\nfor verification on the block explorer. Waiting for verification result...\n\nSuccessfully verified contract NFT on Etherscan.\n"))),(0,r.kt)(E,{value:"blockscout",label:"Blockscout",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Nothing to compile\nNo need to generate any newer typings.\nSuccessfully submitted source code for contract\ncontracts/NFT.sol:NFT at 0x6527E5052de5521fE370AE5ec0aFCC6cD5a221de\nfor verification on the block explorer. Waiting for verification result...\n\nSuccessfully verified contract NFT on Etherscan.\n")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can't re-verify a contract identical to one that has already been verified. If you attempt to do so, such as verifying the above contract, you'll get an error similar to:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Error in plugin @nomiclabs/hardhat-etherscan: The API responded with an unexpected message.\nContract verification may have succeeded and should be checked manually.\nMessage: Already Verified\n"))),(0,r.kt)("p",null,"Search for your contract on ",(0,r.kt)("a",{parentName:"p",href:"https://base-sepolia.blockscout.com/"},"Blockscout")," or ",(0,r.kt)("a",{parentName:"p",href:"https://sepolia.basescan.org/"},"Basescan")," to confirm it is verified."),(0,r.kt)("h2",{id:"interacting-with-the-smart-contract"},"Interacting with the Smart Contract"),(0,r.kt)("p",null,"If you verified on Basescan, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Read Contract")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Write Contract")," tabs to interact with the deployed contract. You'll need to connect your wallet first, by clicking the Connect button."),(0,r.kt)("hr",null))}D.isMDXComponent=!0}}]);