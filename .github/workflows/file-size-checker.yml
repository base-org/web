name: File Size Checker

# Add required permissions
permissions:
  contents: read
  pull-requests: write
  statuses: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check-file-sizes:
    name: File Size Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check file sizes
        id: check-sizes
        run: |
          # Initialize variables for tracking findings
          large_files=""
          huge_files=""

          # Get all files changed in the PR
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "Files changed in PR: $changed_files"

          for file in $changed_files; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              size_mb=$(echo "scale=2; $size/1048576" | bc)

              echo "Checking $file: ${size_mb}MB"

              # Check for files over 40MB
              if (( $(echo "$size_mb > 40" | bc -l) )); then
                huge_files+=$(printf "* %s (%sMB)\n" "$file" "$size_mb")
              # Check for files over 10MB
              elif (( $(echo "$size_mb > 10" | bc -l) )); then
                large_files+=$(printf "* %s (%sMB)\n" "$file" "$size_mb")
              fi
            fi
          done

          # Print findings for debugging
          echo "Large files found:"
          echo "$large_files"
          echo "Huge files found:"
          echo "$huge_files"

          # Set outputs for use in next steps
          echo "large_files=$large_files" >> $GITHUB_OUTPUT
          echo "huge_files=$huge_files" >> $GITHUB_OUTPUT

          # Fail if huge files are found
          if [ ! -z "$huge_files" ]; then
            echo "‚ùå Files over 40MB found!"
            exit 1
          fi

      - name: Update Status and Comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const hugeFiles = `${{ steps.check-sizes.outputs.huge_files }}`;
            const largeFiles = `${{ steps.check-sizes.outputs.large_files }}`;

            try {
              // Only comment if issues were found
              if (hugeFiles || largeFiles) {
                let comment = '## ‚ö†Ô∏è File Size Check Results\n\n';

                if (hugeFiles) {
                  comment += '### üö´ Files over 40MB (Not Allowed):\n' + hugeFiles + '\n';
                  comment += '**These files must be removed from git history before the PR can be merged.**\n\n';
                }

                if (largeFiles) {
                  comment += '### ‚ö†Ô∏è Large Files (Over 10MB):\n' + largeFiles + '\n';
                  comment += 'Consider reducing the size of these files if possible.\n';
                }

                await github.rest.issues.createComment({
                  issue_number: context.payload.pull_request.number,
                  owner: context.payload.repository.owner.login,
                  repo: context.payload.repository.name,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Error:', error);
              core.setFailed(error.message);
            }
