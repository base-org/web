"use strict";(self.webpackChunk_app_base_docs=self.webpackChunk_app_base_docs||[]).push([[6939],{30876:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>b});var r=n(2784);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=l(n),m=a,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(b,c(c({ref:e},p),{},{components:n})):r.createElement(b,c({ref:e},p))}));function b(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99928:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7896),a=(n(2784),n(30876));const o={title:"Abstract Contracts",description:"Learn how to make contracts that must be inherited by another contract.",hide_table_of_contents:!1},c=void 0,i={unversionedId:"docs/inheritance/abstract-contracts-sbs",id:"docs/inheritance/abstract-contracts-sbs",title:"Abstract Contracts",description:"Learn how to make contracts that must be inherited by another contract.",source:"@site/base-camp/docs/inheritance/abstract-contracts-sbs.md",sourceDirName:"docs/inheritance",slug:"/docs/inheritance/abstract-contracts-sbs",permalink:"/base-camp/docs/inheritance/abstract-contracts-sbs",draft:!1,tags:[],version:"current",frontMatter:{title:"Abstract Contracts",description:"Learn how to make contracts that must be inherited by another contract.",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Abstract Contracts",permalink:"/base-camp/docs/inheritance/abstract-contracts-vid"},next:{title:"Inheritance Exercise",permalink:"/base-camp/docs/inheritance/inheritance-exercise"}},s={},l=[{value:"Objectives",id:"objectives",level:2},{value:"Abstract Contracts",id:"abstract-contracts",level:2},{value:"Inheriting from an Abstract Function",id:"inheriting-from-an-abstract-function",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:l},u="wrapper";function d(t){let{components:e,...n}=t;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.17/contracts.html?#abstract-contracts"},"Abstract")," contracts can't exist on their own. Their functionality can only be utilized by a contract that inherits from them. In this lesson, you'll learn how to create an abstract contract."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"objectives"},"Objectives"),(0,a.kt)("p",null,"By the end of this lesson you should be able to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use the virtual, override, and abstract keywords to create and use an abstract contract")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"abstract-contracts"},"Abstract Contracts"),(0,a.kt)("p",null,"Continue with your ",(0,a.kt)("inlineCode",{parentName:"p"},"Inheritance.sol")," file. Add ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractD")," as an ",(0,a.kt)("inlineCode",{parentName:"p"},"abstract contract"),". Add a ",(0,a.kt)("inlineCode",{parentName:"p"},"virtual")," function called ",(0,a.kt)("inlineCode",{parentName:"p"},"whoAreYou")," function, but do ",(0,a.kt)("strong",{parentName:"p"},"not")," add any implementation for that function."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Reveal code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"abstract contract ContractD {\n    function whoAreYou() public virtual view returns (string memory);\n}\n"))),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"inheriting-from-an-abstract-function"},"Inheriting from an Abstract Function"),(0,a.kt)("p",null,"Update ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractA")," to inherit from ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractD"),"."),(0,a.kt)("p",null,"You'll get a slightly confusing error that ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractA")," needs to be marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"abstract"),". Doing so is ",(0,a.kt)("strong",{parentName:"p"},"not")," the correct fix."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},'from solidity:\nTypeError: Contract "ContractA" should be marked as abstract.\n  --\x3e contracts/Inheritance.sol:25:1:\n   |\n25 | contract ContractA is ContractB, ContractC, ContractD {\n   | ^ (Relevant source part starts here and spans across multiple lines).\nNote: Missing implementation:\n --\x3e contracts/Inheritance.sol:6:5:\n  |\n6 |     function whoAreYou() public virtual view returns (string memory);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n')),(0,a.kt)("p",null,"The clue for the correct solution is further down: ",(0,a.kt)("inlineCode",{parentName:"p"},"Note:  Missing implementation:")),(0,a.kt)("p",null,"Only ",(0,a.kt)("inlineCode",{parentName:"p"},"abstract")," contracts can declare functions that are not implemented. To fix this, provide an ",(0,a.kt)("inlineCode",{parentName:"p"},"override")," implementation for ",(0,a.kt)("inlineCode",{parentName:"p"},"whoAreYou")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractA"),":"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Reveal code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'function whoAreYou() public override pure returns (string memory) {\n    return "I\'m a person!";\n}\n'))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"In this lesson, you've learned how to implement and inherit from an abstract contract."),(0,a.kt)("hr",null))}d.isMDXComponent=!0}}]);